/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGRUBY
#define SWIGRUBY
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



#include <ruby.h>

/* Ruby 1.9.1 has a "memoisation optimisation" when compiling with GCC which
 * breaks using rb_intern as an lvalue, as SWIG does.  We work around this
 * issue for now by disabling this.
 * https://sourceforge.net/tracker/?func=detail&aid=2859614&group_id=1645&atid=101645
 */
#ifdef rb_intern
# undef rb_intern
#endif

/* Remove global macros defined in Ruby's win32.h */
#ifdef write
# undef write
#endif
#ifdef read
# undef read
#endif
#ifdef bind
# undef bind
#endif
#ifdef close
# undef close
#endif
#ifdef connect
# undef connect
#endif


/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/* RSTRING_LEN, etc are new in Ruby 1.9, but ->ptr and ->len no longer work */
/* Define these for older versions so we can just write code the new way */
#ifndef RSTRING_LEN
# define RSTRING_LEN(x) RSTRING(x)->len
#endif
#ifndef RSTRING_PTR
# define RSTRING_PTR(x) RSTRING(x)->ptr
#endif
#ifndef RSTRING_END
# define RSTRING_END(x) (RSTRING_PTR(x) + RSTRING_LEN(x))
#endif
#ifndef RARRAY_LEN
# define RARRAY_LEN(x) RARRAY(x)->len
#endif
#ifndef RARRAY_PTR
# define RARRAY_PTR(x) RARRAY(x)->ptr
#endif
#ifndef RFLOAT_VALUE
# define RFLOAT_VALUE(x) RFLOAT(x)->value
#endif
#ifndef DOUBLE2NUM
# define DOUBLE2NUM(x) rb_float_new(x)
#endif
#ifndef RHASH_TBL
# define RHASH_TBL(x) (RHASH(x)->tbl)
#endif
#ifndef RHASH_ITER_LEV
# define RHASH_ITER_LEV(x) (RHASH(x)->iter_lev)
#endif
#ifndef RHASH_IFNONE
# define RHASH_IFNONE(x) (RHASH(x)->ifnone)
#endif
#ifndef RHASH_SIZE
# define RHASH_SIZE(x) (RHASH(x)->tbl->num_entries)
#endif
#ifndef RHASH_EMPTY_P
# define RHASH_EMPTY_P(x) (RHASH_SIZE(x) == 0)
#endif
#ifndef RSTRUCT_LEN
# define RSTRUCT_LEN(x) RSTRUCT(x)->len
#endif
#ifndef RSTRUCT_PTR
# define RSTRUCT_PTR(x) RSTRUCT(x)->ptr
#endif



/*
 * Need to be very careful about how these macros are defined, especially
 * when compiling C++ code or C code with an ANSI C compiler.
 *
 * VALUEFUNC(f) is a macro used to typecast a C function that implements
 * a Ruby method so that it can be passed as an argument to API functions
 * like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is a macro used to typecast a C function that implements
 * either the "mark" or "free" stuff for a Ruby Data object, so that it
 * can be passed as an argument to API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 */
 
#ifdef __cplusplus
#  ifndef RUBY_METHOD_FUNC /* These definitions should work for Ruby 1.4.6 */
#    define PROTECTFUNC(f) ((VALUE (*)()) f)
#    define VALUEFUNC(f) ((VALUE (*)()) f)
#    define VOIDFUNC(f)  ((void (*)()) f)
#  else
#    ifndef ANYARGS /* These definitions should work for Ruby 1.6 */
#      define PROTECTFUNC(f) ((VALUE (*)()) f)
#      define VALUEFUNC(f) ((VALUE (*)()) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    else /* These definitions should work for Ruby 1.7+ */
#      define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#      define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    endif
#  endif
#else
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#endif

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING_PTR(RB_STRING_VALUE(s))
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING_LEN(RB_STRING_VALUE(s))
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif

static VALUE _mSWIG = Qnil;

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */


/* Define some additional error types */
#define SWIG_ObjectPreviouslyDeletedError  -100


/* Define custom exceptions for errors that do not map to existing Ruby
   exceptions.  Note this only works for C++ since a global cannot be
   initialized by a function in C.  For C, fallback to rb_eRuntimeError.*/

SWIGINTERN VALUE 
getNullReferenceError(void) {
  static int init = 0;
  static VALUE rb_eNullReferenceError ;
  if (!init) {
    init = 1;
    rb_eNullReferenceError = rb_define_class("NullReferenceError", rb_eRuntimeError);
  }
  return rb_eNullReferenceError;
} 

SWIGINTERN VALUE 
getObjectPreviouslyDeletedError(void) {
  static int init = 0;
  static VALUE rb_eObjectPreviouslyDeleted ;
  if (!init) {
    init = 1;
    rb_eObjectPreviouslyDeleted = rb_define_class("ObjectPreviouslyDeleted", rb_eRuntimeError);
  }
  return rb_eObjectPreviouslyDeleted;
} 


SWIGINTERN VALUE
SWIG_Ruby_ErrorType(int SWIG_code) {
  VALUE type;
  switch (SWIG_code) {
  case SWIG_MemoryError:
    type = rb_eNoMemError;
    break;
  case SWIG_IOError:
    type = rb_eIOError;
    break;
  case SWIG_RuntimeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_IndexError:
    type = rb_eIndexError;
    break;
  case SWIG_TypeError:
    type = rb_eTypeError;
    break;
  case SWIG_DivisionByZero:
    type = rb_eZeroDivError;
    break;
  case SWIG_OverflowError:
    type = rb_eRangeError;
    break;
  case SWIG_SyntaxError:
    type = rb_eSyntaxError;
    break;
  case SWIG_ValueError:
    type = rb_eArgError;
    break;
  case SWIG_SystemError:
    type = rb_eFatal;
    break;
  case SWIG_AttributeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_NullReferenceError:
    type = getNullReferenceError();
    break;
  case SWIG_ObjectPreviouslyDeletedError:
    type = getObjectPreviouslyDeletedError();
    break;
  case SWIG_UnknownError:
    type = rb_eRuntimeError;
    break;
  default:
    type = rb_eRuntimeError;
  }
  return type;
}


/* This function is called when a user inputs a wrong argument to
   a method.
 */
SWIGINTERN 
const char* Ruby_Format_TypeError( const char* msg,
				   const char* type, 
				   const char* name, 
				   const int argn,
				   VALUE input )
{
  char buf[128];
  VALUE str;
  VALUE asStr;
  if ( msg && *msg )
    {
      str = rb_str_new2(msg);
    }
  else
    {
      str = rb_str_new(NULL, 0);
    }

  str = rb_str_cat2( str, "Expected argument " );
  sprintf( buf, "%d of type ", argn-1 );
  str = rb_str_cat2( str, buf );
  str = rb_str_cat2( str, type );
  str = rb_str_cat2( str, ", but got " );
  str = rb_str_cat2( str, rb_obj_classname(input) );
  str = rb_str_cat2( str, " " );
  asStr = rb_inspect(input);
  if ( RSTRING_LEN(asStr) > 30 )
    {
      str = rb_str_cat( str, StringValuePtr(asStr), 30 );
      str = rb_str_cat2( str, "..." );
    }
  else
    {
      str = rb_str_append( str, asStr );
    }

  if ( name )
    {
      str = rb_str_cat2( str, "\n\tin SWIG method '" );
      str = rb_str_cat2( str, name );
      str = rb_str_cat2( str, "'" );
    }

  return StringValuePtr( str );
}

/* This function is called when an overloaded method fails */
SWIGINTERN 
void Ruby_Format_OverloadedError(
				 const int argc,
				 const int maxargs,
				 const char* method, 
				 const char* prototypes 
				 )
{
  const char* msg = "Wrong # of arguments";
  if ( argc <= maxargs ) msg = "Wrong arguments";
  rb_raise(rb_eArgError,"%s for overloaded method '%s'.\n"  
	   "Possible C/C++ prototypes are:\n%s",
	   msg, method, prototypes);
}

/* -----------------------------------------------------------------------------
 * rubytracking.swg
 *
 * This file contains support for tracking mappings from 
 * Ruby objects to C++ objects.  This functionality is needed
 * to implement mark functions for Ruby's mark and sweep
 * garbage collector.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#if !defined(ST_DATA_T_DEFINED)
/* Needs to be explicitly included for Ruby 1.8 and earlier */
#include <st.h>
#endif

/* Ruby 1.8 actually assumes the first case. */
#if SIZEOF_VOIDP == SIZEOF_LONG
#  define SWIG2NUM(v) LONG2NUM((unsigned long)v)
#  define NUM2SWIG(x) (unsigned long)NUM2LONG(x)
#elif SIZEOF_VOIDP == SIZEOF_LONG_LONG
#  define SWIG2NUM(v) LL2NUM((unsigned long long)v)
#  define NUM2SWIG(x) (unsigned long long)NUM2LL(x)
#else
#  error sizeof(void*) is not the same as long or long long
#endif

/* Global hash table to store Trackings from C/C++
   structs to Ruby Objects. 
*/
static st_table* swig_ruby_trackings = NULL;

static VALUE swig_ruby_trackings_count(ANYARGS) {
  return SWIG2NUM(swig_ruby_trackings->num_entries);
}


/* Setup a hash table to store Trackings */
SWIGRUNTIME void SWIG_RubyInitializeTrackings(void) {
  /* Create a hash table to store Trackings from C++
     objects to Ruby objects. */

  /* Try to see if some other .so has already created a 
     tracking hash table, which we keep hidden in an instance var
     in the SWIG module.
     This is done to allow multiple DSOs to share the same
     tracking table.
  */
  VALUE trackings_value = Qnil;
  /* change the variable name so that we can mix modules
     compiled with older SWIG's - this used to be called "@__trackings__" */
  ID trackings_id = rb_intern( "@__safetrackings__" );
  VALUE verbose = rb_gv_get("VERBOSE");
  rb_gv_set("VERBOSE", Qfalse);
  trackings_value = rb_ivar_get( _mSWIG, trackings_id );
  rb_gv_set("VERBOSE", verbose);

  /* The trick here is that we have to store the hash table
  pointer in a Ruby variable. We do not want Ruby's GC to
  treat this pointer as a Ruby object, so we convert it to
  a Ruby numeric value. */
  if (trackings_value == Qnil) {
    /* No, it hasn't.  Create one ourselves */
    swig_ruby_trackings = st_init_numtable();
    rb_ivar_set( _mSWIG, trackings_id, SWIG2NUM(swig_ruby_trackings) );
  } else {
    swig_ruby_trackings = (st_table*)NUM2SWIG(trackings_value);
  }

  rb_define_virtual_variable("SWIG_TRACKINGS_COUNT", swig_ruby_trackings_count, NULL);
}

/* Add a Tracking from a C/C++ struct to a Ruby object */
SWIGRUNTIME void SWIG_RubyAddTracking(void* ptr, VALUE object) {
  /* Store the mapping to the global hash table. */
  st_insert(swig_ruby_trackings, (st_data_t)ptr, object);
}

/* Get the Ruby object that owns the specified C/C++ struct */
SWIGRUNTIME VALUE SWIG_RubyInstanceFor(void* ptr) {
  /* Now lookup the value stored in the global hash table */
  VALUE value;

  if (st_lookup(swig_ruby_trackings, (st_data_t)ptr, &value)) {
    return value;
  } else {
    return Qnil;
  }
}

/* Remove a Tracking from a C/C++ struct to a Ruby object.  It
   is very important to remove objects once they are destroyed
   since the same memory address may be reused later to create
   a new object. */
SWIGRUNTIME void SWIG_RubyRemoveTracking(void* ptr) {
  /* Delete the object from the hash table */
  st_delete(swig_ruby_trackings, (st_data_t *)&ptr, NULL);
}

/* This is a helper method that unlinks a Ruby object from its
   underlying C++ object.  This is needed if the lifetime of the
   Ruby object is longer than the C++ object */
SWIGRUNTIME void SWIG_RubyUnlinkObjects(void* ptr) {
  VALUE object = SWIG_RubyInstanceFor(ptr);

  if (object != Qnil) {
    if (TYPE(object) != T_DATA)
      abort();
    DATA_PTR(object) = 0;
  }
}

/* This is a helper method that iterates over all the trackings
   passing the C++ object pointer and its related Ruby object
   to the passed callback function. */

/* Proxy method to abstract the internal trackings datatype */
static int swig_ruby_internal_iterate_callback(void* ptr, VALUE obj, void(*meth)(void* ptr, VALUE obj)) {
  (*meth)(ptr, obj);
  return ST_CONTINUE;
}

SWIGRUNTIME void SWIG_RubyIterateTrackings( void(*meth)(void* ptr, VALUE obj) ) {
  st_foreach(swig_ruby_trackings, (int (*)(ANYARGS))&swig_ruby_internal_iterate_callback, (st_data_t)meth);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Ruby API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN VALUE
SWIG_Ruby_AppendOutput(VALUE target, VALUE o) {
  if (NIL_P(target)) {
    target = o;
  } else {
    if (TYPE(target) != T_ARRAY) {
      VALUE o2 = target;
      target = rb_ary_new();
      rb_ary_push(target, o2);
    }
    rb_ary_push(target, o);
  }
  return target;
}

/* For ruby1.8.4 and earlier. */
#ifndef RUBY_INIT_STACK
   RUBY_EXTERN void Init_stack(VALUE* addr);
#  define RUBY_INIT_STACK \
   VALUE variable_in_this_stack_frame; \
   Init_stack(&variable_in_this_stack_frame);
#endif


#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * rubyrun.swg
 *
 * This file contains the runtime support for Ruby modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Ruby_NewPointerObj(ptr, type, flags)
#define SWIG_AcquirePtr(ptr, own)                       SWIG_Ruby_AcquirePtr(ptr, own)
#define swig_owntype                                    swig_ruby_owntype

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Ruby_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer) 		SWIG_Ruby_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Ruby_ErrorType(code)               
#define SWIG_Error(code, msg)            		rb_raise(SWIG_Ruby_ErrorType(code), "%s", msg)
#define SWIG_fail                        		goto fail				 


/* Ruby-specific SWIG API */

#define SWIG_InitRuntime()                              SWIG_Ruby_InitRuntime()              
#define SWIG_define_class(ty)                        	SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty)             	SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value)                        	SWIG_Ruby_MangleStr(value)		  
#define SWIG_CheckConvert(value, ty)                 	SWIG_Ruby_CheckConvert(value, ty)	  

#include "assert.h"

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
  int trackObjects;
} swig_class;


/* Global pointer used to keep some internal SWIG stuff */
static VALUE _cSWIG_Pointer = Qnil;
static VALUE swig_runtime_data_type_pointer = Qnil;

/* Global IDs used to keep some internal SWIG stuff */
static ID swig_arity_id = 0;
static ID swig_call_id  = 0;

/*
  If your swig extension is to be run within an embedded ruby and has
  director callbacks, you should set -DRUBY_EMBEDDED during compilation.  
  This will reset ruby's stack frame on each entry point from the main 
  program the first time a virtual director function is invoked (in a 
  non-recursive way).
  If this is not done, you run the risk of Ruby trashing the stack.
*/

#ifdef RUBY_EMBEDDED

#  define SWIG_INIT_STACK                            \
      if ( !swig_virtual_calls ) { RUBY_INIT_STACK } \
      ++swig_virtual_calls;
#  define SWIG_RELEASE_STACK --swig_virtual_calls;
#  define Ruby_DirectorTypeMismatchException(x) \
          rb_raise( rb_eTypeError, "%s", x ); return c_result;

      static unsigned int swig_virtual_calls = 0;

#else  /* normal non-embedded extension */

#  define SWIG_INIT_STACK
#  define SWIG_RELEASE_STACK
#  define Ruby_DirectorTypeMismatchException(x) \
          throw Swig::DirectorTypeMismatchException( x );

#endif  /* RUBY_EMBEDDED */


SWIGRUNTIME VALUE 
getExceptionClass(void) {
  static int init = 0;
  static VALUE rubyExceptionClass ;
  if (!init) {
    init = 1;
    rubyExceptionClass = rb_const_get(_mSWIG, rb_intern("Exception"));
  }
  return rubyExceptionClass;
} 

/* This code checks to see if the Ruby object being raised as part
   of an exception inherits from the Ruby class Exception.  If so,
   the object is simply returned.  If not, then a new Ruby exception
   object is created and that will be returned to Ruby.*/
SWIGRUNTIME VALUE
SWIG_Ruby_ExceptionType(swig_type_info *desc, VALUE obj) {
  VALUE exceptionClass = getExceptionClass();
  if (rb_obj_is_kind_of(obj, exceptionClass)) {
    return obj;
  }  else {
    return rb_exc_new3(rb_eRuntimeError, rb_obj_as_string(obj));
  }
}

/* Initialize Ruby runtime support */
SWIGRUNTIME void
SWIG_Ruby_InitRuntime(void)
{
  if (_mSWIG == Qnil) {
    _mSWIG = rb_define_module("SWIG");
    swig_call_id  = rb_intern("call");
    swig_arity_id = rb_intern("arity");
  }
}

/* Define Ruby class for C type */
SWIGRUNTIME void
SWIG_Ruby_define_class(swig_type_info *type)
{
  char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
  sprintf(klass_name, "TYPE%s", type->name);
  if (NIL_P(_cSWIG_Pointer)) {
    _cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
    rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
  }
  rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
  free((void *) klass_name);
}

/* Create a new pointer object */
SWIGRUNTIME VALUE
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int flags)
{
  int own =  flags & SWIG_POINTER_OWN; 
  int track;
  char *klass_name;
  swig_class *sklass;
  VALUE klass;
  VALUE obj;
  
  if (!ptr)
    return Qnil;
  
  if (type->clientdata) {
    sklass = (swig_class *) type->clientdata;
		
    /* Are we tracking this class and have we already returned this Ruby object? */
    track = sklass->trackObjects;
    if (track) {
      obj = SWIG_RubyInstanceFor(ptr);
      
      /* Check the object's type and make sure it has the correct type.
        It might not in cases where methods do things like 
        downcast methods. */
      if (obj != Qnil) {
        VALUE value = rb_iv_get(obj, "@__swigtype__");
        const char* type_name = RSTRING_PTR(value);
				
        if (strcmp(type->name, type_name) == 0) {
          return obj;
        }
      }
    }

    /* Create a new Ruby object */
    obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), 
			   ( own ? VOIDFUNC(sklass->destroy) : 
			     (track ? VOIDFUNC(SWIG_RubyRemoveTracking) : 0 )
			     ), ptr);

    /* If tracking is on for this class then track this object. */
    if (track) {
      SWIG_RubyAddTracking(ptr, obj);
    }
  } else {
    klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    klass = rb_const_get(_mSWIG, rb_intern(klass_name));
    free((void *) klass_name);
    obj = Data_Wrap_Struct(klass, 0, 0, ptr);
  }
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  
  return obj;
}

/* Create a new class instance (always owned) */
SWIGRUNTIME VALUE
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
  VALUE obj;
  swig_class *sklass = (swig_class *) type->clientdata;
  obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  return obj;
}

/* Get type mangle from class name */
SWIGRUNTIMEINLINE char *
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "@__swigtype__");
  return StringValuePtr(stype);
}

/* Acquire a pointer value */
typedef struct {
  void (*datafree)(void *);
  int own;
} swig_ruby_owntype;

SWIGRUNTIME swig_ruby_owntype
SWIG_Ruby_AcquirePtr(VALUE obj, swig_ruby_owntype own) {
  swig_ruby_owntype oldown = {0, 0};
  if (obj) {
    oldown.datafree = RDATA(obj)->dfree;
    RDATA(obj)->dfree = own.datafree;
  }
  return oldown;
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPtrAndOwn(VALUE obj, void **ptr, swig_type_info *ty, int flags, swig_ruby_owntype *own)
{
  char *c;
  swig_cast_info *tc;
  void *vptr = 0;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  } else {
    if (TYPE(obj) != T_DATA) {
      return SWIG_ERROR;
    }
    Data_Get_Struct(obj, void, vptr);
  }
  
  if (own) {
    own->datafree = RDATA(obj)->dfree;
    own->own = 0;
  }
    
  /* Check to see if the input object is giving up ownership
     of the underlying C struct or C++ object.  If so then we
     need to reset the destructor since the Ruby object no 
     longer owns the underlying C++ object.*/ 
  if (flags & SWIG_POINTER_DISOWN) {
    /* Is tracking on for this class? */
    int track = 0;
    if (ty && ty->clientdata) {
      swig_class *sklass = (swig_class *) ty->clientdata;
      track = sklass->trackObjects;
    }
		
    if (track) {
      /* We are tracking objects for this class.  Thus we change the destructor
       * to SWIG_RubyRemoveTracking.  This allows us to
       * remove the mapping from the C++ to Ruby object
       * when the Ruby object is garbage collected.  If we don't
       * do this, then it is possible we will return a reference 
       * to a Ruby object that no longer exists thereby crashing Ruby. */
      RDATA(obj)->dfree = SWIG_RubyRemoveTracking;
    } else {    
      RDATA(obj)->dfree = 0;
    }
  }

  /* Do type-checking if type info was provided */
  if (ty) {
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      return SWIG_ERROR;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      return SWIG_ERROR;
    } else {
      if (vptr == 0) {
        /* The object has already been deleted */
        return SWIG_ObjectPreviouslyDeletedError;
      }
      if (ptr) {
        if (tc->type == ty) {
          *ptr = vptr;
        } else {
          int newmemory = 0;
          *ptr = SWIG_TypeCast(tc, vptr, &newmemory);
          if (newmemory == SWIG_CAST_NEW_MEMORY) {
            assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
            if (own)
              own->own = own->own | SWIG_CAST_NEW_MEMORY;
          }
        }
      }
    }
  } else {
    if (ptr)
      *ptr = vptr;
  }
  
  return SWIG_OK;
}

/* Check convert */
SWIGRUNTIMEINLINE int
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c) return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

SWIGRUNTIME VALUE
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:
  return SWIG_ERROR;
}

SWIGRUNTIME swig_module_info *
SWIG_Ruby_GetModule(void *SWIGUNUSEDPARM(clientdata))
{
  VALUE pointer;
  swig_module_info *ret = 0;
  VALUE verbose = rb_gv_get("VERBOSE");

 /* temporarily disable warnings, since the pointer check causes warnings with 'ruby -w' */
  rb_gv_set("VERBOSE", Qfalse);
  
  /* first check if pointer already created */
  pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  if (pointer != Qnil) {
    Data_Get_Struct(pointer, swig_module_info, ret);
  }

  /* reinstate warnings */
  rb_gv_set("VERBOSE", verbose);
  return ret;
}

SWIGRUNTIME void 
SWIG_Ruby_SetModule(swig_module_info *pointer)
{
  /* register a new class */
  VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
  /* create and store the structure pointer to a global variable */
  swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, pointer);
  rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
}

/* This function can be used to check whether a proc or method or similarly
   callable function has been passed.  Usually used in a %typecheck, like:

   %typecheck(c_callback_t, precedence=SWIG_TYPECHECK_POINTER) {
        $result = SWIG_Ruby_isCallable( $input );
   }
 */
SWIGINTERN
int SWIG_Ruby_isCallable( VALUE proc )
{
  if ( rb_respond_to( proc, swig_call_id ) )
    return 1;
  return 0;
}

/* This function can be used to check the arity (number of arguments)
   a proc or method can take.  Usually used in a %typecheck.
   Valid arities will be that equal to minimal or those < 0
   which indicate a variable number of parameters at the end.
 */
SWIGINTERN
int SWIG_Ruby_arity( VALUE proc, int minimal )
{
  if ( rb_respond_to( proc, swig_arity_id ) )
    {
      VALUE num = rb_funcall( proc, swig_arity_id, 0 );
      int arity = NUM2INT(num);
      if ( arity < 0 && (arity+1) < -minimal ) return 1;
      if ( arity == minimal ) return 1;
      return 1;
    }
  return 0;
}


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg);; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_ArrayT_bool_Dynamic_1_t swig_types[0]
#define SWIGTYPE_p_ArrayT_bool_Dynamic_Dynamic_t swig_types[1]
#define SWIGTYPE_p_Eigen__ArrayXXd swig_types[2]
#define SWIGTYPE_p_MatrixT_bool_Dynamic_1_t swig_types[3]
#define SWIGTYPE_p_MatrixT_bool_Dynamic_Dynamic_t swig_types[4]
#define SWIGTYPE_p_RubyEigen__ArrayXXd swig_types[5]
#define SWIGTYPE_p_RubyEigen__ArrayXd swig_types[6]
#define SWIGTYPE_p_RubyEigen__FullPivHouseholderQRT_RubyEigen__MatrixXcd_t swig_types[7]
#define SWIGTYPE_p_RubyEigen__FullPivHouseholderQRT_RubyEigen__MatrixXd_t swig_types[8]
#define SWIGTYPE_p_RubyEigen__FullPivLUT_RubyEigen__MatrixXcd_t swig_types[9]
#define SWIGTYPE_p_RubyEigen__FullPivLUT_RubyEigen__MatrixXd_t swig_types[10]
#define SWIGTYPE_p_RubyEigen__JacobiSVDT_RubyEigen__MatrixXcd_t swig_types[11]
#define SWIGTYPE_p_RubyEigen__JacobiSVDT_RubyEigen__MatrixXd_t swig_types[12]
#define SWIGTYPE_p_RubyEigen__LDLTT_RubyEigen__MatrixXcd_t swig_types[13]
#define SWIGTYPE_p_RubyEigen__LDLTT_RubyEigen__MatrixXd_t swig_types[14]
#define SWIGTYPE_p_RubyEigen__LLTT_RubyEigen__MatrixXcd_t swig_types[15]
#define SWIGTYPE_p_RubyEigen__LLTT_RubyEigen__MatrixXd_t swig_types[16]
#define SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t swig_types[17]
#define SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t swig_types[18]
#define SWIGTYPE_p_RubyEigen__MatrixXcd swig_types[19]
#define SWIGTYPE_p_RubyEigen__MatrixXd swig_types[20]
#define SWIGTYPE_p_RubyEigen__PartialPivLUT_RubyEigen__MatrixXcd_t swig_types[21]
#define SWIGTYPE_p_RubyEigen__PartialPivLUT_RubyEigen__MatrixXd_t swig_types[22]
#define SWIGTYPE_p_allocator_type swig_types[23]
#define SWIGTYPE_p_char swig_types[24]
#define SWIGTYPE_p_difference_type swig_types[25]
#define SWIGTYPE_p_p_void swig_types[26]
#define SWIGTYPE_p_size_type swig_types[27]
#define SWIGTYPE_p_std__allocatorT_double_t swig_types[28]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[29]
#define SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t swig_types[30]
#define SWIGTYPE_p_swig__ConstIterator swig_types[31]
#define SWIGTYPE_p_swig__GC_VALUE swig_types[32]
#define SWIGTYPE_p_swig__Iterator swig_types[33]
#define SWIGTYPE_p_value_type swig_types[34]
#define SWIGTYPE_p_void swig_types[35]
static swig_type_info *swig_types[37];
static swig_module_info swig_module = {swig_types, 36, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_eigen
#define SWIG_name    "Eigen"

static VALUE mEigen;

#define SWIG_RUBY_THREAD_BEGIN_BLOCK
#define SWIG_RUBY_THREAD_END_BLOCK


#define SWIGVERSION 0x030008 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include <stdexcept>

namespace RubyEigen {
  class EigenRuntimeError : public std::runtime_error {
  public:
    EigenRuntimeError(const std::string& cause) 
      : std::runtime_error(cause) {}
  };
};

static VALUE rb_eEigenRuntimeError;

/* DONOT use rb_raise here. eigen_assert is called inside the functions
   of eigen library in C++. Calling rb_raise will cause deconstructor issues. */
#undef eigen_assert
#define eigen_assert(x) do {\
 if(!Eigen::internal::copy_bool(x)) throw (RubyEigen::EigenRuntimeError(EIGEN_MAKESTRING(x))); } while(false)



#include <string>


#include <iostream>


#include <stdexcept>


namespace swig {
  class SwigGCReferences {
    VALUE _hash;

    SwigGCReferences() : _hash(Qnil) {
    }
    ~SwigGCReferences() {
      if (_hash != Qnil)
        rb_gc_unregister_address(&_hash);
    }
    static void EndProcHandler(VALUE) {
      // Ruby interpreter ending - _hash can no longer be accessed.
      SwigGCReferences &s_references = instance();
      s_references._hash = Qnil;
    }
  public:
    static SwigGCReferences& instance() {
      // Hash of all GC_VALUE's currently in use
      static SwigGCReferences s_references;

      return s_references;
    }
    static void initialize() {
      SwigGCReferences &s_references = instance();
      if (s_references._hash == Qnil) {
        rb_set_end_proc(&EndProcHandler, Qnil);
        s_references._hash = rb_hash_new();
        rb_gc_register_address(&s_references._hash);
      }
    }
    void GC_register(VALUE& obj) {
      if (FIXNUM_P(obj) || SPECIAL_CONST_P(obj) || SYMBOL_P(obj))
        return;
      if (_hash != Qnil) {
        VALUE val = rb_hash_aref(_hash, obj);
        unsigned n = FIXNUM_P(val) ? NUM2UINT(val) : 0;
        ++n;
        rb_hash_aset(_hash, obj, INT2NUM(n));
      }
    }
    void GC_unregister(const VALUE& obj) {
      if (FIXNUM_P(obj) || SPECIAL_CONST_P(obj) || SYMBOL_P(obj))
        return;
      // this test should not be needed but I've noticed some very erratic
      // behavior of none being unregistered in some very rare situations.
      if (BUILTIN_TYPE(obj) == T_NONE)
        return;
      if (_hash != Qnil) {
        VALUE val = rb_hash_aref(_hash, obj);
        unsigned n = FIXNUM_P(val) ? NUM2UINT(val) : 1;
        --n;
        if (n)
          rb_hash_aset(_hash, obj, INT2NUM(n));
        else
          rb_hash_delete(_hash, obj);
      }
    }
  };

  class GC_VALUE {
  protected:
    VALUE  _obj;

    static ID hash_id;
    static ID   lt_id;
    static ID   gt_id;
    static ID   eq_id;
    static ID   le_id;
    static ID   ge_id;

    static ID  pos_id;
    static ID  neg_id;
    static ID  inv_id;

    static ID  add_id;
    static ID  sub_id;
    static ID  mul_id;
    static ID  div_id;
    static ID  mod_id;

    static ID  and_id;
    static ID   or_id;
    static ID  xor_id;

    static ID  lshift_id;
    static ID  rshift_id;

    struct OpArgs
    {
      VALUE src;
      ID    id;
      int   nargs;
      VALUE target;
    };


  public:
    GC_VALUE() : _obj(Qnil)
    {
    }

    GC_VALUE(const GC_VALUE& item) : _obj(item._obj)
    {
      SwigGCReferences::instance().GC_register(_obj);
    }
    
    GC_VALUE(VALUE obj) :_obj(obj)
    {
      SwigGCReferences::instance().GC_register(_obj);
    }
    
    ~GC_VALUE() 
    {
      SwigGCReferences::instance().GC_unregister(_obj);
    }
    
    GC_VALUE & operator=(const GC_VALUE& item) 
    {
      SwigGCReferences::instance().GC_unregister(_obj);
      _obj = item._obj;
      SwigGCReferences::instance().GC_register(_obj);
      return *this;
    }

    operator VALUE() const
    {
      return _obj;
    }

    VALUE inspect() const
    {
      return rb_inspect(_obj);
    }

    VALUE to_s() const
    {
      return rb_inspect(_obj);
    }

    static VALUE swig_rescue_swallow(VALUE)
    {
      /*
      VALUE errstr = rb_obj_as_string(rb_errinfo());
      printf("Swallowing error: '%s'\n", RSTRING_PTR(StringValue(errstr)));
      */
      return Qnil; /* Swallow Ruby exception */
    }

    static VALUE swig_rescue_funcall(VALUE p)
    {
      OpArgs* args = (OpArgs*) p;
      return rb_funcall(args->src, args->id, args->nargs, args->target);
    }

    bool relational_equal_op(const GC_VALUE& other, const ID& op_id, bool (*op_func)(const VALUE& a, const VALUE& b)) const
    {
      if (FIXNUM_P(_obj) && FIXNUM_P(other._obj)) {
        return op_func(_obj, other._obj);
      }
      bool res = false;
      VALUE ret = Qnil;
      SWIG_RUBY_THREAD_BEGIN_BLOCK;
      if (rb_respond_to(_obj, op_id)) {
        OpArgs  args;
        args.src    = _obj;
        args.id     = op_id;
        args.nargs  = 1;
        args.target = VALUE(other);
        ret = rb_rescue(RUBY_METHOD_FUNC(swig_rescue_funcall), VALUE(&args),
                       (RUBY_METHOD_FUNC(swig_rescue_swallow)), Qnil);
      }
      if (ret == Qnil) {
        VALUE a = rb_funcall(         _obj, hash_id, 0 );
        VALUE b = rb_funcall( VALUE(other), hash_id, 0 );
        res = op_func(a, b);
      } else {
        res = RTEST(ret);
      }
      SWIG_RUBY_THREAD_END_BLOCK;
      return res;
    }

    static bool operator_eq(const VALUE& a, const VALUE& b) { return a == b; }
    static bool operator_lt(const VALUE& a, const VALUE& b) { return a < b; }
    static bool operator_le(const VALUE& a, const VALUE& b) { return a <= b; }
    static bool operator_gt(const VALUE& a, const VALUE& b) { return a > b; }
    static bool operator_ge(const VALUE& a, const VALUE& b) { return a >= b; }

    bool operator==(const GC_VALUE& other) const { return relational_equal_op(other, eq_id, operator_eq); }
    bool operator<(const GC_VALUE& other) const { return relational_equal_op(other, lt_id, operator_lt); }
    bool operator<=(const GC_VALUE& other) const { return relational_equal_op(other, le_id, operator_le); }
    bool operator>(const GC_VALUE& other) const { return relational_equal_op(other, gt_id, operator_gt); }
    bool operator>=(const GC_VALUE& other) const { return relational_equal_op(other, ge_id, operator_ge); }

    bool operator!=(const GC_VALUE& other) const
    {
      return !(this->operator==(other));
    }

    GC_VALUE unary_op(const ID& op_id) const
    {
      VALUE ret = Qnil;
      SWIG_RUBY_THREAD_BEGIN_BLOCK;
      OpArgs  args;
      args.src    = _obj;
      args.id     = op_id;
      args.nargs  = 0;
      args.target = Qnil;
      ret = rb_rescue(RUBY_METHOD_FUNC(swig_rescue_funcall), VALUE(&args),
                     (RUBY_METHOD_FUNC(swig_rescue_swallow)), Qnil);
      SWIG_RUBY_THREAD_END_BLOCK;
      return ret;
    }

    GC_VALUE operator+() const { return unary_op(pos_id); }
    GC_VALUE operator-() const { return unary_op(neg_id); }
    GC_VALUE operator~() const { return unary_op(inv_id); }

    GC_VALUE binary_op(const GC_VALUE& other, const ID& op_id) const
    {
      VALUE ret = Qnil;
      SWIG_RUBY_THREAD_BEGIN_BLOCK;
      OpArgs  args;
      args.src    = _obj;
      args.id     = op_id;
      args.nargs  = 1;
      args.target = VALUE(other);
      ret = rb_rescue(RUBY_METHOD_FUNC(swig_rescue_funcall), VALUE(&args),
                     (RUBY_METHOD_FUNC(swig_rescue_swallow)), Qnil);
      SWIG_RUBY_THREAD_END_BLOCK;
      return GC_VALUE(ret);
    }

    GC_VALUE operator+(const GC_VALUE& other) const { return binary_op(other, add_id); }
    GC_VALUE operator-(const GC_VALUE& other) const { return binary_op(other, sub_id); }
    GC_VALUE operator*(const GC_VALUE& other) const { return binary_op(other, mul_id); }
    GC_VALUE operator/(const GC_VALUE& other) const { return binary_op(other, div_id); }
    GC_VALUE operator%(const GC_VALUE& other) const { return binary_op(other, mod_id); }
    GC_VALUE operator&(const GC_VALUE& other) const { return binary_op(other, and_id); }
    GC_VALUE operator^(const GC_VALUE& other) const { return binary_op(other, xor_id); }
    GC_VALUE operator|(const GC_VALUE& other) const { return binary_op(other, or_id); }
    GC_VALUE operator<<(const GC_VALUE& other) const { return binary_op(other, lshift_id); }
    GC_VALUE operator>>(const GC_VALUE& other) const { return binary_op(other, rshift_id); }
  };

  ID  GC_VALUE::hash_id = rb_intern("hash");
  ID  GC_VALUE::lt_id = rb_intern("<");
  ID  GC_VALUE::gt_id = rb_intern(">");
  ID  GC_VALUE::eq_id = rb_intern("==");
  ID  GC_VALUE::le_id = rb_intern("<=");
  ID  GC_VALUE::ge_id = rb_intern(">=");

  ID  GC_VALUE::pos_id = rb_intern("+@");
  ID  GC_VALUE::neg_id = rb_intern("-@");
  ID  GC_VALUE::inv_id = rb_intern("~");

  ID  GC_VALUE::add_id = rb_intern("+");
  ID  GC_VALUE::sub_id = rb_intern("-");
  ID  GC_VALUE::mul_id = rb_intern("*");
  ID  GC_VALUE::div_id = rb_intern("/");
  ID  GC_VALUE::mod_id = rb_intern("%");

  ID  GC_VALUE::and_id = rb_intern("&");
  ID  GC_VALUE::or_id  = rb_intern("|");
  ID  GC_VALUE::xor_id = rb_intern("^");

  ID  GC_VALUE::lshift_id = rb_intern("<<");
  ID  GC_VALUE::rshift_id = rb_intern(">>");

  typedef GC_VALUE LANGUAGE_OBJ;

} // namespace swig



#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  /** 
   * Abstract base class used to represent all iterators of STL containers.
   */
  struct ConstIterator {
  public:
    typedef ConstIterator self_type;

  protected:
    GC_VALUE _seq;

  protected:
    ConstIterator(VALUE seq) : _seq(seq)
    {
    }

    // Random access iterator methods, but not required in Ruby
    virtual ptrdiff_t distance(const ConstIterator &x) const
    {
      throw std::invalid_argument("distance not supported");
    }

    virtual bool equal (const ConstIterator &x) const
    {
      throw std::invalid_argument("equal not supported");
    }

    virtual self_type* advance(ptrdiff_t n)
    {
      throw std::invalid_argument("advance not supported");
    }
      
  public:
    virtual ~ConstIterator() {}

    // Access iterator method, required by Ruby
    virtual VALUE value() const {
      throw std::invalid_argument("value not supported");
      return Qnil;
    };

    virtual VALUE setValue( const VALUE& v ) {
      throw std::invalid_argument("value= not supported");
      return Qnil;
    }

    virtual self_type* next( size_t n = 1 )
    {
      return this->advance( n );
    }

    virtual self_type* previous( size_t n = 1 )
    {
      ptrdiff_t nn = n;
      return this->advance( -nn );
    }

    virtual VALUE to_s() const {
      throw std::invalid_argument("to_s not supported");
      return Qnil;
    }

    virtual VALUE inspect() const {
      throw std::invalid_argument("inspect not supported");
      return Qnil;
    }
    
    virtual ConstIterator *dup() const
    {
      throw std::invalid_argument("dup not supported");
      return NULL;
    }

    //
    // C++ common/needed methods.  We emulate a bidirectional
    // operator, to be compatible with all the STL.
    // The iterator traits will then tell the STL what type of
    // iterator we really are.
    //
    ConstIterator() : _seq( Qnil )
    {
    }

    ConstIterator( const self_type& b ) : _seq( b._seq )
    {
    }

    self_type& operator=( const self_type& b )
    {
      _seq = b._seq;
      return *this;
    }

    bool operator == (const ConstIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const ConstIterator& x) const
    {
      return ! operator==(x);
    }
      
    // Pre-decrement operator
    self_type& operator--()
    {
      return *previous();
    }

    // Pre-increment operator
    self_type& operator++()
    {
      return *next();
    }

    // Post-decrement operator
    self_type operator--(int)
    {
      self_type r = *this;
      previous();
      return r;
    }

    // Post-increment operator
    self_type operator++(int)
    {
      self_type r = *this;
      next();
      return r;
    }

    ConstIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    ConstIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }

    ConstIterator* operator + (ptrdiff_t n) const
    {
      return dup()->advance(n);
    }

    ConstIterator* operator - (ptrdiff_t n) const
    {
      return dup()->advance(-n);
    }
      
    ptrdiff_t operator - (const ConstIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::ConstIterator *");
	init = 1;
      }	
      return desc;
    }
  };


  /**
   * Abstract base class used to represent all non-const iterators of STL containers.
   * 
   */
  struct Iterator : public ConstIterator {
  public:
    typedef Iterator self_type;

  protected:
    Iterator(VALUE seq) : ConstIterator(seq)
    {
    }

    virtual self_type* advance(ptrdiff_t n)
    {
      throw std::invalid_argument("operation not supported");
    }

  public:
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::Iterator *");
	init = 1;
      }	
      return desc;
    }
    
    virtual Iterator *dup() const
    {
      throw std::invalid_argument("dup not supported");
      return NULL;
    }
      
    virtual self_type* next( size_t n = 1 )
    {
      return this->advance( n );
    }

    virtual self_type* previous( size_t n = 1 )
    {
      ptrdiff_t nn = n;
      return this->advance( -nn );
    }

    bool operator == (const ConstIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const Iterator& x) const
    {
      return ! operator==(x);
    }
      
    Iterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    Iterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    Iterator* operator + (ptrdiff_t n) const
    {
      return dup()->advance(n);
    }

    Iterator* operator - (ptrdiff_t n) const
    {
      return dup()->advance(-n);
    }
      
    ptrdiff_t operator - (const Iterator& x) const
    {
      return x.distance(*this);
    }
  };

}


SWIGINTERN VALUE
SWIG_ruby_failed(void)
{
  return Qnil;
} 


/*@SWIG:/opt/local/share/swig/3.0.8/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2ULONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  unsigned long *res = (unsigned long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2ULONG(obj) : rb_big2ulong(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (VALUE obj, unsigned long *val) 
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    unsigned long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2ULONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (VALUE obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_bool  (bool value)
{
  return value ? Qtrue : Qfalse;
}


/*@SWIG:/opt/local/share/swig/3.0.8/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2LONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  long *res = (long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2LONG(obj) : rb_big2long(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_long (VALUE obj, long* val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2LONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (VALUE obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


  #define SWIG_From_long   LONG2NUM 


SWIGINTERNINLINE VALUE
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


#include <algorithm>


#include <vector>


#include <complex> 



#include <strstream>
#include <Eigen/Core>
#include <Eigen/LU>
#include <Eigen/Eigenvalues>
#include <Eigen/QR>
#include <Eigen/SVD>
#include <Eigen/Cholesky>




/* to avoid SWIG warning */
namespace Eigen {};

/* To avoid contaminating Eigen namespace, we use RubyEigen instead of Eigen. */
namespace RubyEigen {
  using namespace Eigen;

  /*
     By redefining VectorXd and VectorXcd in SWIG scope, SWIG can interpret what the templates are.
     The following templates appear in some decomposition classes.
  */
  typedef RubyEigen::Matrix<RubyEigen::MatrixXd::Scalar, RubyEigen::Dynamic, 1> VectorXd;
  typedef RubyEigen::Matrix<RubyEigen::MatrixXcd::Scalar, RubyEigen::Dynamic, 1> VectorXcd;

  typedef Matrix<bool, Dynamic, Dynamic> MatrixBool;
  typedef Matrix<bool, Dynamic, 1> VectorBool;
  typedef Array<bool, Dynamic, Dynamic> ArrayBool;
  typedef Array<bool, Dynamic, 1> VecBoolCWise;

};



namespace RubyEigen {
  typedef FullPivLU<MatrixXd> FullPivLUDouble;
  typedef FullPivLU<MatrixXcd> FullPivLUComplex;
  typedef PartialPivLU<MatrixXd> PartialPivLUDouble;
  typedef FullPivHouseholderQR<MatrixXd> FullPivHouseholderQRDouble;
  typedef FullPivHouseholderQR<MatrixXcd> FullPivHouseholderQRComplex;
  typedef JacobiSVD<MatrixXd> JacobiSVDDouble;
  typedef JacobiSVD<MatrixXcd> JacobiSVDComplex;
  typedef LDLT<MatrixXd>  LDLTDouble;
  typedef LDLT<MatrixXcd> LDLTComplex;
  typedef LLT<MatrixXd>   LLTDouble;
  typedef LLT<MatrixXcd>  LLTComplex;
};


/*@SWIG:/opt/local/share/swig/3.0.8/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2DBL(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  double *res = (double *)(args[1]);
  *res = NUM2DBL(obj); (void)type;
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_double (VALUE obj, double *val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FLOAT) || (type == T_FIXNUM) || (type == T_BIGNUM)) {
    double v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2DBL), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


  #define SWIG_From_double   rb_float_new 


namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type>
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}



namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static VALUE from(Type *val, int owner = 0) {
      return SWIG_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static VALUE from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static VALUE from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static VALUE from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline VALUE from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline VALUE from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(VALUE obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(VALUE obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(VALUE obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(VALUE obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(VALUE obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(VALUE obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (throw_error) throw std::invalid_argument("bad type");
	VALUE lastErr = rb_gv_get("$!");
	if (lastErr == Qnil) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(VALUE obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	if (throw_error) throw std::invalid_argument("bad type");
	VALUE lastErr = rb_gv_get("$!");
	if (lastErr == Qnil) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	static Type *v_def = (Type*) malloc(sizeof(Type));
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(VALUE obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (throw_error) throw std::invalid_argument("bad type");
	VALUE lastErr = rb_gv_get("$!");
	if (lastErr == Qnil) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	return 0;
      }
    }
  };

  template <class Type>
  inline Type as(VALUE obj, bool te = false) {
    return traits_as< Type, typename traits< Type >::category >::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(VALUE obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(VALUE obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(VALUE obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


namespace swig {
  template <> struct traits< double > {
    typedef value_category category;
    static const char* type_name() { return"double"; }
  };
  template <>  struct traits_asval< double > {
    typedef double value_type;
    static int asval(VALUE obj, value_type *val) {
      return SWIG_AsVal_double (obj, val);
    }
  };
  template <>  struct traits_from< double > {
    typedef double value_type;
    static VALUE from(const value_type& val) {
      return SWIG_From_double  (val);
    }
  };
}


#include <functional>


namespace swig {
  template < class T >
  struct yield : public std::unary_function< T, bool >
  {
    bool
    operator()( const T& v ) const
    { 
      return RTEST( rb_yield( swig::from< T >(v) ) );
    }
  };


  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence>
  inline void
  resize(Sequence *seq, typename Sequence::size_type n, typename Sequence::value_type x) {
    seq->resize(n, x);
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, (i == size && j == size));
    typename Sequence::size_type jj = swig::slice_index(j, size);

    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    size_t ssize = jj - ii;
    if (ssize <= v.size()) {
      typename Sequence::iterator sb = self->begin();
      typename InputSeq::const_iterator vmid = v.begin();
      std::advance(sb,ii);
      std::advance(vmid, jj - ii);
      self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
    } else {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
      self->insert(sb, v.begin(), v.end());
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {

  /** 
   * Templated base classes for all custom const_iterators.
   *
   */
  template<typename OutConstIterator>
  class ConstIterator_T :  public ConstIterator
  {
  public:
    typedef OutConstIterator const_iter;
    typedef typename std::iterator_traits<const_iter>::value_type value_type;    
    typedef ConstIterator_T<const_iter> self_type;

  protected:

    
    virtual bool equal (const ConstIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    virtual ptrdiff_t distance(const ConstIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }

    virtual ConstIterator* advance(ptrdiff_t n)
    {
      std::advance( current, n );
      return this;
    }

  public:
    ConstIterator_T() : ConstIterator(Qnil)
    {
    }

    ConstIterator_T(const_iter curr, VALUE seq = Qnil)
      : ConstIterator(seq), current(curr)
    {
    }

    const const_iter& get_current() const
    {
      return current;
    }

    const value_type& operator*() const
    {
      return *current;
    }

    virtual VALUE inspect() const
    {
      VALUE ret = rb_str_new2("#<");
      ret = rb_str_cat2( ret, rb_obj_classname(_seq) );
      ret = rb_str_cat2( ret, "::const_iterator " );
      VALUE cur = value();
      ret = rb_str_concat( ret, rb_inspect(cur) );
      ret = rb_str_cat2( ret, ">" );
      return ret;
    }

    virtual VALUE to_s()    const
    {
      VALUE ret = rb_str_new2( rb_obj_classname(_seq) );
      ret = rb_str_cat2( ret, "::const_iterator " );
      VALUE cur = value();
      ret = rb_str_concat( ret, rb_obj_as_string(cur) );
      return ret;
    }

  protected:
    const_iter current;
  };


  /** 
   * Templated base classes for all custom non-const iterators.
   *
   */
  template<typename InOutIterator>
  class Iterator_T :  public Iterator
  {
  public:
    typedef InOutIterator nonconst_iter;

    // Make this class iterator STL compatible, by using iterator_traits
    typedef typename std::iterator_traits<nonconst_iter >::iterator_category iterator_category;
    typedef typename std::iterator_traits<nonconst_iter >::value_type        value_type;
    typedef typename std::iterator_traits<nonconst_iter >::difference_type   difference_type;
    typedef typename std::iterator_traits<nonconst_iter >::pointer           pointer;
    typedef typename std::iterator_traits<nonconst_iter >::reference         reference;

    typedef Iterator                         base;
    typedef Iterator_T< nonconst_iter > self_type;

  protected:

    virtual bool equal (const ConstIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    virtual ptrdiff_t distance(const ConstIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }

    virtual Iterator* advance(ptrdiff_t n)
    {
      std::advance( current, n );
      return this;
    }

  public:

    Iterator_T(nonconst_iter curr, VALUE seq = Qnil)
      : Iterator(seq), current(curr)
    {
    }

    const nonconst_iter& get_current() const
    {
      return current;
    }

    self_type& operator=( const self_type& b )
    {
      base::operator=( b );
      return *this;
    }
    
    self_type& operator=( const value_type& b )
    {
      *current = b;
      return *this;
    }

    const value_type& operator*() const
    {
      return *current;
    }

    value_type& operator*()
    {
      return *current;
    }
    
    virtual VALUE inspect() const
    {
      VALUE ret = rb_str_new2("#<");
      ret = rb_str_cat2( ret, rb_obj_classname(_seq) );
      ret = rb_str_cat2( ret, "::iterator " );
      VALUE cur = value();
      ret = rb_str_concat( ret, rb_inspect(cur) );
      ret = rb_str_cat2( ret, ">" );
      return ret;
    }

    virtual VALUE to_s()    const
    {
      VALUE ret = rb_str_new2( rb_obj_classname(_seq) );
      ret = rb_str_cat2( ret, "::iterator " );
      VALUE cur = value();
      ret = rb_str_concat( ret, rb_obj_as_string(cur) );
      return ret;
    }

  protected:
    nonconst_iter current;
  };


  /**
   * Auxiliary functor to store the value of a ruby object inside
   * a reference of a compatible C++ type.  ie: Ruby -> C++
   * 
   */
  template <class ValueType>
  struct asval_oper 
  {
    typedef ValueType    value_type;
    typedef bool        result_type;
    bool operator()(VALUE obj, value_type& v) const
    {
      return ( swig::asval< value_type >(obj, &v) == SWIG_OK );
    }
  };

  /**
   * Auxiliary functor to return a ruby object from a C++ type. 
   * ie: C++ -> Ruby
   * 
   */
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef VALUE result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };


  /** 
   * ConstIterator class for a const_iterator with no end() boundaries.
   *
   */
  template<typename OutConstIterator, 
	   typename ValueType = typename std::iterator_traits<OutConstIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class ConstIteratorOpen_T :  public ConstIterator_T<OutConstIterator>
  {
  public:
    FromOper from;
    typedef OutConstIterator const_iter;
    typedef ValueType value_type;
    typedef ConstIterator_T<const_iter>  base;
    typedef ConstIteratorOpen_T<OutConstIterator, ValueType, FromOper> self_type;
    
    ConstIteratorOpen_T(const_iter curr, VALUE seq = Qnil)
      : ConstIterator_T<OutConstIterator>(curr, seq)
    {
    }
    
    virtual VALUE value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    ConstIterator *dup() const
    {
      return new self_type(*this);
    }
  };

  /** 
   * Iterator class for an iterator with no end() boundaries.
   *
   */
  template<typename InOutIterator, 
	   typename ValueType = typename std::iterator_traits<InOutIterator>::value_type,
	   typename FromOper = from_oper<ValueType>,
	   typename AsvalOper = asval_oper<ValueType> >
  class IteratorOpen_T :  public Iterator_T<InOutIterator>
  {
  public:
    FromOper  from;
    AsvalOper asval;
    typedef InOutIterator nonconst_iter;
    typedef ValueType value_type;
    typedef Iterator_T<nonconst_iter>  base;
    typedef IteratorOpen_T<InOutIterator, ValueType, FromOper, AsvalOper> self_type;

  public:
    IteratorOpen_T(nonconst_iter curr, VALUE seq = Qnil)
      : Iterator_T<InOutIterator>(curr, seq)
    {
    }
    
    virtual VALUE value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }

    virtual VALUE setValue( const VALUE& v )
    {
      value_type& dst = *base::current;
      if ( asval(v, dst) ) return v;
      return Qnil;
    }
    
    Iterator *dup() const
    {
      return new self_type(*this);
    }
  };

  /** 
   * ConstIterator class for a const_iterator where begin() and end() boundaries are known.
   *
   */
  template<typename OutConstIterator, 
	   typename ValueType = typename std::iterator_traits<OutConstIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class ConstIteratorClosed_T :  public ConstIterator_T<OutConstIterator>
  {
  public:
    FromOper from;
    typedef OutConstIterator const_iter;
    typedef ValueType value_type;
    typedef ConstIterator_T<const_iter>  base;    
    typedef ConstIteratorClosed_T<OutConstIterator, ValueType, FromOper> self_type;
    
  protected:
    virtual ConstIterator* advance(ptrdiff_t n)
    {
      std::advance( base::current, n );
      if ( base::current == end )
	throw stop_iteration();
      return this;
    }

  public:
    ConstIteratorClosed_T(const_iter curr, const_iter first, 
			  const_iter last, VALUE seq = Qnil)
      : ConstIterator_T<OutConstIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    virtual VALUE value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    ConstIterator *dup() const
    {
      return new self_type(*this);
    }


  private:
    const_iter begin;
    const_iter end;
  };

  /** 
   * Iterator class for a iterator where begin() and end() boundaries are known.
   *
   */
  template<typename InOutIterator, 
	   typename ValueType = typename std::iterator_traits<InOutIterator>::value_type,
	   typename FromOper = from_oper<ValueType>,
	   typename AsvalOper = asval_oper<ValueType> >
  class IteratorClosed_T :  public Iterator_T<InOutIterator>
  {
  public:
    FromOper   from;
    AsvalOper asval;
    typedef InOutIterator nonconst_iter;
    typedef ValueType value_type;
    typedef Iterator_T<nonconst_iter>  base;
    typedef IteratorClosed_T<InOutIterator, ValueType, FromOper, AsvalOper> self_type;
    
  protected:
    virtual Iterator* advance(ptrdiff_t n)
    {
      std::advance( base::current, n );
      if ( base::current == end )
	throw stop_iteration();
      return this;
    }

  public:
    IteratorClosed_T(nonconst_iter curr, nonconst_iter first, 
		     nonconst_iter last, VALUE seq = Qnil)
      : Iterator_T<InOutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    virtual VALUE value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    // Iterator setter method, required by Ruby
    virtual VALUE setValue( const VALUE& v )
    {
      if (base::current == end)
	throw stop_iteration();

      value_type& dst = *base::current;
      if ( asval( v, dst ) ) return v;
      return Qnil;
    }
    
    Iterator *dup() const
    {
      return new self_type(*this);
    }

  private:
    nonconst_iter begin;
    nonconst_iter end;
  };

  /* Partial specialization for bools which don't allow de-referencing */
  template< typename InOutIterator, typename FromOper, typename AsvalOper >
  class IteratorOpen_T< InOutIterator, bool, FromOper, AsvalOper > : 
    public Iterator_T<InOutIterator>
  {
  public:
    FromOper   from;
    AsvalOper asval;
    typedef InOutIterator nonconst_iter;
    typedef bool value_type;
    typedef Iterator_T<nonconst_iter>  base;
    typedef IteratorOpen_T<InOutIterator, bool, FromOper, AsvalOper> self_type;

    IteratorOpen_T(nonconst_iter curr, VALUE seq = Qnil)
      : Iterator_T<InOutIterator>(curr, seq)
    {
    }

    virtual VALUE value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    virtual VALUE setValue( const VALUE& v )
    {
      bool tmp = *base::current;
      if ( asval( v, tmp ) )
	{
	  *base::current = tmp;
	  return v;
	}
      return Qnil;
    }    
    
    Iterator *dup() const
    {
      return new self_type(*this);
    }
    
  };

  /* Partial specialization for bools which don't allow de-referencing */
  template< typename InOutIterator, typename FromOper, typename AsvalOper >
  class IteratorClosed_T< InOutIterator, bool, FromOper, AsvalOper > : 
    public Iterator_T<InOutIterator>
  {
  public:
    FromOper   from;
    AsvalOper asval;
    typedef InOutIterator nonconst_iter;
    typedef bool value_type;
    typedef Iterator_T<nonconst_iter>  base;
    typedef IteratorClosed_T<InOutIterator, bool, FromOper, AsvalOper> self_type;
    
  protected:
    virtual Iterator* advance(ptrdiff_t n)
    {
      std::advance( base::current, n );
      if ( base::current == end )
	throw stop_iteration();
      return this;
    }

  public:
    IteratorClosed_T(nonconst_iter curr, nonconst_iter first, 
		     nonconst_iter last, VALUE seq = Qnil)
      : Iterator_T<InOutIterator>(curr, seq), begin(first), end(last)
    {
    }

    virtual VALUE value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }

    virtual VALUE setValue( const VALUE& v )
    {
      if (base::current == end)
	throw stop_iteration();

      bool tmp = *base::current;
      if ( asval( v, tmp ) )
	{
	  *base::current = tmp;
	  return v;
	}
      return Qnil;
    }
    
    Iterator *dup() const
    {
      return new self_type(*this);
    }

  private:
    nonconst_iter begin;
    nonconst_iter end;
  };


  /** 
   * Helper function used to wrap a bounded const_iterator.  This is to be used in
   * a %typemap(out), for example.
   *
   */
  template<typename InOutIter>
  inline Iterator*
  make_nonconst_iterator(const InOutIter& current, const InOutIter& begin,
			 const InOutIter& end, VALUE seq = Qnil)
  {
    return new IteratorClosed_T<InOutIter>(current, begin, end, seq);
  }

  /** 
   * Helper function used to wrap an unbounded const_iterator.  This is to be used in
   * a %typemap(out), for example.
   *
   */
  template<typename InOutIter>
  inline Iterator*
  make_nonconst_iterator(const InOutIter& current, VALUE seq = Qnil)
  {
    return new IteratorOpen_T<InOutIter>(current, seq);
  }

  /** 
   * Helper function used to wrap a bounded const_iterator.  This is to be used in
   * a %typemap(out), for example.
   *
   */
  template<typename OutIter>
  inline ConstIterator*
  make_const_iterator(const OutIter& current, const OutIter& begin,
                       const OutIter& end, VALUE seq = Qnil)
  {
    return new ConstIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  /** 
   * Helper function used to wrap an unbounded const_iterator.  This is to be used in
   * a %typemap(out), for example.
   *
   */
  template<typename OutIter>
  inline ConstIterator*
  make_const_iterator(const OutIter& current, VALUE seq = Qnil)
  {
    return new ConstIteratorOpen_T<OutIter>(current, seq);
  }
}


namespace swig
{

  /**
   * This class is a proxy class for references, used to return and set values
   * of an element of a Ruby Array of stuff.
   * It can be used by RubySequence_InputIterator to make it work with STL
   * algorithms.
   */
  template <class T>
  struct RubySequence_Ref
  {
    RubySequence_Ref(VALUE  seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      VALUE item = rb_ary_entry(_seq, _index );
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	VALUE lastErr = rb_gv_get("$!");
	if ( lastErr == Qnil ) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	VALUE str = rb_str_new2(msg);
	str = rb_str_cat2( str, e.what() );
	SWIG_Ruby_ExceptionType( NULL, str );
	throw;
      }
    }

    RubySequence_Ref& operator=(const T& v)
    {
      rb_ary_set(_seq, _index, swig::from< T >(v));
      return *this;
    }

  private:
    VALUE  _seq;
    int _index;
  };


  /**
   * This class is a proxy to return a pointer to a class, usually
   * RubySequence_Ref. 
   * It can be used by RubySequence_InputIterator to make it work with STL
   * algorithms.
   */
  template <class T>
  struct RubySequence_ArrowProxy
  {
    RubySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };


  /**
   * Input Iterator.  This adapator class is a random access iterator that 
   * allows you to use STL algorithms with a Ruby class (a Ruby Array by default).
   */
  template <class T, class Reference = RubySequence_Ref< T > >
  struct RubySequence_InputIterator
  {
    typedef RubySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef ptrdiff_t difference_type;

    RubySequence_InputIterator()
    {
    }

    RubySequence_InputIterator(VALUE  seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    RubySequence_ArrowProxy<T>
    operator->() const {
      return RubySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    VALUE  _seq;
    difference_type _index;
  };


  /**
   * This adaptor class allows you to use a Ruby Array as if it was an STL
   * container, giving it begin(), end(), and iterators.
   */
  template <class T>
  struct RubySequence_Cont
  {
    typedef RubySequence_Ref<T> reference;
    typedef const RubySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef RubySequence_InputIterator<T, reference> iterator;
    typedef RubySequence_InputIterator<T, const_reference> const_iterator;

    RubySequence_Cont(VALUE  seq) : _seq(0)
    {
      if (!rb_obj_is_kind_of(seq, rb_cArray)) {
	throw std::invalid_argument("an Array is expected");
      }
      _seq = seq;
    }

    ~RubySequence_Cont()
    {
    }

    size_type size() const
    {
      return RARRAY_LEN(_seq);
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = false) const
    {
      int s = (int) size();
      for (int i = 0; i < s; ++i) {
	VALUE item = rb_ary_entry(_seq, i );
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    VALUE  _seq;
  };

}


namespace swig {
  template <class RubySeq, class Seq>
  inline void
  assign(const RubySeq& rubyseq, Seq* seq) {
    // seq->assign(rubyseq.begin(), rubyseq.end()); // not used as not always implemented
    typedef typename RubySeq::value_type value_type;
    typename RubySeq::const_iterator it = rubyseq.begin();
    for (;it != rubyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(VALUE obj, sequence **seq) {
      if (rb_obj_is_kind_of(obj, rb_cArray) == Qtrue) {
	try {
	  RubySequence_Cont<value_type> rubyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(rubyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return rubyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    VALUE lastErr = rb_gv_get("$!");
	    if (lastErr == Qnil) {
	      rb_raise(rb_eTypeError, "%s", e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      } else {
	sequence *p;
	if (SWIG_ConvertPtr(obj,(void**)&p,
			    swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      }
      return SWIG_ERROR;
    }
  };

  // Partial specialization for GC_VALUE's.  No need to typecheck each
  // element.
  template< class Seq >
  struct traits_asptr_stdseq< Seq, swig::GC_VALUE > {
    typedef Seq sequence;
    typedef swig::GC_VALUE value_type;

    static int asptr(VALUE obj, sequence **seq) {
      if (rb_obj_is_kind_of(obj, rb_cArray) == Qtrue) {
	try {
	  if (seq) {
	    RubySequence_Cont<value_type> rubyseq(obj);
	    sequence *pseq = new sequence();
	    assign(rubyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return true;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    VALUE lastErr = rb_gv_get("$!");
	    if (lastErr == Qnil) {
	      rb_raise(rb_eTypeError, "%s", e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      } else {
	sequence *p;
	if (SWIG_ConvertPtr(obj,(void**)&p,
			    swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static VALUE from(const sequence& seq) {






      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	VALUE obj = rb_ary_new2((int)size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  rb_ary_push(obj, swig::from< value_type >(*it));
	}
	rb_obj_freeze(obj);  // treat as immutable result
	return obj;
      } else {
	rb_raise(rb_eRangeError,"sequence size not valid in ruby");
	return Qnil;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(VALUE obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static VALUE from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< double, std::allocator< double > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "double" "," "std::allocator< double >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg__dup(std::vector< double > *self){
      return new std::vector< double,std::allocator< double > >(*self);
    }
SWIGINTERN VALUE std_vector_Sl_double_Sg__inspect(std::vector< double > *self){
      std::vector< double,std::allocator< double > >::const_iterator i = self->begin();
      std::vector< double,std::allocator< double > >::const_iterator e = self->end();
      const char *type_name = swig::type_name< std::vector< double,std::allocator< double > > >();
      VALUE str = rb_str_new2(type_name);
      str = rb_str_cat2( str, " [" );
      bool comma = false;
      VALUE tmp;
      for ( ; i != e; ++i, comma = true )
	{
	  if (comma) str = rb_str_cat2( str, "," );
	  tmp = swig::from< std::vector< double,std::allocator< double > >::value_type >( *i );
	  tmp = rb_inspect( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      str = rb_str_cat2( str, "]" );
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_double_Sg__to_a(std::vector< double > *self){
      std::vector< double,std::allocator< double > >::const_iterator i = self->begin();
      std::vector< double,std::allocator< double > >::const_iterator e = self->end();
      VALUE ary = rb_ary_new2( std::distance( i, e ) );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector< double,std::allocator< double > >::value_type >( *i );
	  rb_ary_push( ary, tmp );
	}
      return ary;
    }
SWIGINTERN VALUE std_vector_Sl_double_Sg__to_s(std::vector< double > *self){
      std::vector< double,std::allocator< double > >::iterator i = self->begin();
      std::vector< double,std::allocator< double > >::iterator e = self->end();
      VALUE str = rb_str_new2( "" );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector< double,std::allocator< double > >::value_type >( *i );
	  tmp = rb_obj_as_string( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_double_Sg__slice(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type length){
      if ( length < 0 )
        return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) {
        if ( i + static_cast<std::vector< double,std::allocator< double > >::difference_type>(len) < 0 )
          return Qnil;
        else
          i = len + i;
      }
      std::vector< double,std::allocator< double > >::difference_type j = length + i;
      if ( j > static_cast<std::vector< double,std::allocator< double > >::difference_type>(len) )
        j = len;

      VALUE r = Qnil;
      try {
	r = swig::from< const std::vector< double,std::allocator< double > >* >( swig::getslice(self, i, j) );
      }
      catch( std::out_of_range ) {
      }
      return r;
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg__each(std::vector< double > *self){
	if ( !rb_block_given_p() )
	  rb_raise( rb_eArgError, "no block given");

	VALUE r;
	std::vector< double,std::allocator< double > >::const_iterator i = self->begin();
	std::vector< double,std::allocator< double > >::const_iterator e = self->end();
	for ( ; i != e; ++i )
	  {
	    r = swig::from< std::vector< double,std::allocator< double > >::value_type >(*i);
	    rb_yield(r);
	  }
	
	return self;
      }
SWIGINTERN VALUE std_vector_Sl_double_Sg____delete2__(std::vector< double > *self,std::vector< double >::value_type const &i){
      VALUE r = Qnil;
      return r;
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg__select(std::vector< double > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector< double,std::allocator< double > >* r = new std::vector< double,std::allocator< double > >();
      std::vector< double,std::allocator< double > >::const_iterator i = self->begin();
      std::vector< double,std::allocator< double > >::const_iterator e = self->end();
      for ( ; i != e; ++i )
	{
	  VALUE v = swig::from< std::vector< double,std::allocator< double > >::value_type >(*i);
	  if ( RTEST( rb_yield(v) ) )
	    self->insert( r->end(), *i);
	}
	
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_double_Sg__delete_at(std::vector< double > *self,std::vector< double >::difference_type i){
      VALUE r = Qnil;
      try {
	std::vector< double,std::allocator< double > >::iterator at = swig::getpos(self, i);
	r = swig::from< std::vector< double,std::allocator< double > >::value_type >( *(at) );
	self->erase(at); 
      }
      catch (std::out_of_range)
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_double_Sg__at(std::vector< double > const *self,std::vector< double >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector< double,std::allocator< double > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range ) {
      }
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_double_Sg____getitem____SWIG_0(std::vector< double > const *self,std::vector< double >::difference_type i,std::vector< double >::difference_type length){
      if ( length < 0 )
        return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) {
        if ( i + static_cast<std::vector< double,std::allocator< double > >::difference_type>(len) < 0 )
          return Qnil;
        else
          i = len + i;
      }
      std::vector< double,std::allocator< double > >::difference_type j = length + i;
      if ( j > static_cast<std::vector< double,std::allocator< double > >::difference_type>(len) )
        j = len;

      VALUE r = Qnil;
      try {
	r = swig::from< const std::vector< double,std::allocator< double > >* >( swig::getslice(self, i, j) );
      }
      catch( std::out_of_range ) {
      }
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_double_Sg____getitem____SWIG_1(std::vector< double > const *self,std::vector< double >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector< double,std::allocator< double > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range ) {
      }
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_double_Sg____getitem____SWIG_2(std::vector< double > const *self,VALUE i){
      if ( rb_obj_is_kind_of( i, rb_cRange ) == Qfalse ) {
        rb_raise( rb_eTypeError, "not a valid index or range" );
      }

      static ID id_end   = rb_intern("end");
      static ID id_start = rb_intern("begin");
      static ID id_noend = rb_intern("exclude_end?");

      VALUE start = rb_funcall( i, id_start, 0 );
      VALUE end   = rb_funcall( i, id_end, 0 );
      bool  noend = ( rb_funcall( i, id_noend, 0 ) == Qtrue );

      int len = self->size();

      int s = NUM2INT( start );
      if ( s < 0 ) {
        s = len + s;
        if ( s < 0 )
          return Qnil;
      } else if ( s > len )
        return Qnil;

      int e = NUM2INT( end );
      if ( e < 0 ) e = len + e;
      if ( noend ) e -= 1;
      if ( e < 0 ) e = -1;
      if ( e >= len ) e = len - 1;
      if ( s == len ) e = len - 1;

      return swig::from< std::vector< double,std::allocator< double > >* >( swig::getslice(self, s, e+1) );
    }
SWIGINTERN VALUE std_vector_Sl_double_Sg____setitem____SWIG_0(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::value_type const &x){
	if ( i >= static_cast<std::vector< double,std::allocator< double > >::difference_type>( self->size()) )
          swig::resize( self, i+1, x );
        else
          *(swig::getpos(self, i)) = x;

	return swig::from< std::vector< double,std::allocator< double > >::value_type >( x );
      }
SWIGINTERN VALUE std_vector_Sl_double_Sg____setitem____SWIG_1(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type length,std::vector< double,std::allocator< double > > const &v){

      if ( length < 0 )
        return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) {
        if ( i + static_cast<std::vector< double,std::allocator< double > >::difference_type>(len) < 0 )
          return Qnil;
        else
          i = len + i;
      }
      std::vector< double,std::allocator< double > >::difference_type j = length + i;
      if ( j > static_cast<std::vector< double,std::allocator< double > >::difference_type>(len) ) {
        swig::resize( self, j, *(v.begin()) );
      }

      VALUE r = Qnil;
      swig::setslice(self, i, j, v);
      r = swig::from< const std::vector< double,std::allocator< double > >* >( &v );
      return r;
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg__reject_bang(std::vector< double > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      self->erase( std::remove_if( self->begin(), self->end(),
            swig::yield< std::vector< double,std::allocator< double > >::value_type >() ), self->end() );
      return self;
    }
SWIGINTERN VALUE std_vector_Sl_double_Sg__pop(std::vector< double > *self){
      if (self->empty()) return Qnil;
      std::vector< double,std::allocator< double > >::value_type x = self->back();
      self->pop_back();
      return swig::from< std::vector< double,std::allocator< double > >::value_type >( x );
    }
SWIGINTERN std::vector< double >::value_type const std_vector_Sl_double_Sg__push(std::vector< double > *self,std::vector< double >::value_type const &e){
      self->push_back( e );
      return e;
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg__reject(std::vector< double > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector< double,std::allocator< double > >* r = new std::vector< double,std::allocator< double > >();
      std::remove_copy_if( self->begin(), self->end(),              
			   std::back_inserter(*r),
			   swig::yield< std::vector< double,std::allocator< double > >::value_type >() );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_double_Sg__shift(std::vector< double > *self){
      if (self->empty()) return Qnil;
      std::vector< double,std::allocator< double > >::value_type x = self->front();
      self->erase( self->begin() );
      return swig::from< std::vector< double,std::allocator< double > >::value_type >( x );
    }

SWIGINTERN int
SWIG_AsVal_int (VALUE obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}

SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg__insert__SWIG_0(std::vector< double > *self,std::vector< double >::difference_type pos,int argc,VALUE *argv,...){
      std::size_t len = self->size();
      std::size_t   i = swig::check_index( pos, len, true );
      std::vector< double,std::allocator< double > >::iterator start;

      VALUE elem = argv[0];
      int idx = 0;
      try {
	std::vector< double,std::allocator< double > >::value_type val = swig::as<std::vector< double,std::allocator< double > >::value_type>( elem, true );
	if ( i >= len ) {
	  self->resize(i-1, val);
	  return self;
	}
	start = self->begin();
	std::advance( start, i );
	self->insert( start++, val );

	for ( ++idx; idx < argc; ++idx )
	  {
	    elem = argv[idx];
	    val = swig::as<std::vector< double,std::allocator< double > >::value_type>( elem );
	    self->insert( start++, val );
	  }

      } 
      catch( std::invalid_argument )
	{
	  rb_raise( rb_eArgError, "%s",
		    Ruby_Format_TypeError( "", 
					   swig::type_name<std::vector< double,std::allocator< double > >::value_type>(),
					   __FUNCTION__, idx+2, elem ));
	}


      return self;
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg__unshift(std::vector< double > *self,int argc,VALUE *argv,...){
      for ( int idx = argc-1; idx >= 0; --idx )
	{
	  std::vector< double,std::allocator< double > >::iterator start = self->begin();
	  VALUE elem = argv[idx];
	  try {
	    std::vector< double,std::allocator< double > >::value_type val = swig::as<std::vector< double,std::allocator< double > >::value_type>( elem, true );
	    self->insert( start, val );
	  }
	  catch( std::invalid_argument )
	    {
	      rb_raise( rb_eArgError, "%s",
			Ruby_Format_TypeError( "", 
					       swig::type_name<std::vector< double,std::allocator< double > >::value_type>(),
					       __FUNCTION__, idx+2, elem ));
	    }
	}

      return self;
    }

SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return ULONG2NUM(value); 
}


SWIGINTERNINLINE VALUE
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}

SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__erase__SWIG_0(std::vector< double > *self,std::vector< double >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__erase__SWIG_1(std::vector< double > *self,std::vector< double >::iterator first,std::vector< double >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__insert__SWIG_1(std::vector< double > *self,std::vector< double >::iterator pos,std::vector< double >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_double_Sg__insert__SWIG_2(std::vector< double > *self,std::vector< double >::iterator pos,std::vector< double >::size_type n,std::vector< double >::value_type const &x){ self->insert(pos, n, x); }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg__map_bang(std::vector< double > *self){

    if ( !rb_block_given_p() )
      rb_raise( rb_eArgError, "No block given" );

    VALUE r = Qnil;
    std::vector< double >::iterator i = self->begin();
    std::vector< double >::iterator e = self->end();

    try {
      for ( ; i != e; ++i )
	{
	  r = swig::from< double >( *i );
	  r = rb_yield( r );
	  *i = swig::as< double >( r );
	}
    }
    catch ( const std::invalid_argument& )
      {
	rb_raise(rb_eTypeError,
		 "Yield block did not return a valid element for " "std::vector");
      }
    
    return self;
  }
SWIGINTERN VALUE std_vector_Sl_double_Sg____delete__(std::vector< double > *self,double const &val){
    VALUE r = Qnil;
    std::vector<double >::iterator e = self->end();
    std::vector<double >::iterator i = std::remove( self->begin(), e, val );
    // remove dangling elements now
    self->erase( i, e );
    
    if ( i != e )
      r = swig::from< double >( val );
    else if ( rb_block_given_p() )
      r = rb_yield(Qnil);
    return r;
  }

SWIGINTERNINLINE VALUE
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}

SWIGINTERN void RubyEigen_MatrixXd___set_col__(RubyEigen::MatrixXd *self,int i,std::vector< double,std::allocator< double > > const &v){
      (*self).col(i) = Eigen::VectorXd::Map(v.data(), v.size());
    }
SWIGINTERN void RubyEigen_MatrixXd___set_row__(RubyEigen::MatrixXd *self,int i,std::vector< double,std::allocator< double > > const &v){
      (*self).row(i) = Eigen::VectorXd::Map(v.data(), v.size());
    }
SWIGINTERN RubyEigen::MatrixXd RubyEigen_MatrixXd___mul_n__(RubyEigen::MatrixXd *self,RubyEigen::MatrixXd &a,RubyEigen::MatrixXd &b,RubyEigen::MatrixXd &c,RubyEigen::MatrixXd &d){
      return (*self) * a * b * c * d;
    }
SWIGINTERN std::string RubyEigen_MatrixXd_to_s(RubyEigen::MatrixXd *self){
      std::ostrstream s;
      s << (*self) << std::ends;
      return s.str();
    }

SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE VALUE 
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > LONG_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : Qnil;
    } else {
      return rb_str_new(carray, static_cast< long >(size));
    }
  } else {
    return Qnil;
  }
}


SWIGINTERNINLINE VALUE
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}

SWIGINTERN double RubyEigen_MatrixXd___getitem__(RubyEigen::MatrixXd *self,int i,int j){
      return (*self)(i, j);
    }
SWIGINTERN void RubyEigen_MatrixXd___setitem__(RubyEigen::MatrixXd *self,int i,int j,double c){
      (*self)(i, j) = c;
    }
SWIGINTERN RubyEigen::MatrixXd RubyEigen_MatrixXd_triu(RubyEigen::MatrixXd *self){
      return (*self).triangularView<Eigen::Upper>();
    }
SWIGINTERN RubyEigen::MatrixXd RubyEigen_MatrixXd_tril(RubyEigen::MatrixXd *self){
      return (*self).triangularView<Eigen::Lower>();
    }
SWIGINTERN RubyEigen::FullPivLU< RubyEigen::MatrixXd > RubyEigen_MatrixXd_fullPivLu(RubyEigen::MatrixXd *self){
      return (*self).fullPivLu();
    }
SWIGINTERN RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXd > RubyEigen_MatrixXd_fullPivHouseholderQR(RubyEigen::MatrixXd *self){
      return RubyEigen::FullPivHouseholderQR<RubyEigen::MatrixXd>(*self);
    }
SWIGINTERN RubyEigen::JacobiSVD< RubyEigen::MatrixXd > RubyEigen_MatrixXd_svd(RubyEigen::MatrixXd *self){
      return Eigen::JacobiSVD<Eigen::MatrixXd>(*self, Eigen::ComputeFullU | Eigen::ComputeFullV);
    }

#if !defined(T_COMPLEX)
SWIGINTERN int SWIG_Is_Complex( VALUE obj ) {
  static ID real_id = rb_intern("real");
  static ID imag_id = rb_intern("imag");
  return ( (rb_respond_to( obj, real_id ) ) &&
           (rb_respond_to( obj, imag_id ) ) );
}
#else
SWIGINTERN int SWIG_Is_Complex( VALUE obj ) {
  return TYPE(obj) == T_COMPLEX;
}
#endif

SWIGINTERN VALUE SWIG_Complex_Real(VALUE obj) {
  static ID real_id = rb_intern("real");
  return rb_funcall(obj, real_id, 0);
}

SWIGINTERN VALUE SWIG_Complex_Imaginary(VALUE obj) {
  static ID imag_id = rb_intern("imag");
  return rb_funcall(obj, imag_id, 0);
}


SWIGINTERN int
SWIG_AsVal_std_complex_Sl_double_Sg_  (VALUE o, std::complex<double>* val)
{
  if ( SWIG_Is_Complex( o ) ) {
    if (val) {
      VALUE real = SWIG_Complex_Real(o);
      VALUE imag = SWIG_Complex_Imaginary(o);
      double re = 0;
      SWIG_AsVal_double( real, &re );
      double im = 0;
      SWIG_AsVal_double( imag, &im );
      *val = std::complex<double>(re, im);
    }
    return SWIG_OK;
  } else {
    double d;    
    int res = SWIG_AddCast(SWIG_AsVal_double (o, &d));
    if (SWIG_IsOK(res)) {
      if (val) *val = std::complex<double>(d, 0.0);
      return res;
    }
  }
  return SWIG_TypeError;
}


#if !defined(T_COMPLEX)
/* Ruby versions prior to 1.9 did not have native complex numbers.  They were an extension in the STD library.  */
SWIGINTERN VALUE rb_complex_new(VALUE x, VALUE y) {
  static ID new_id = rb_intern("new");
  static VALUE cComplex = rb_const_get(rb_cObject, rb_intern("Complex"));
  return rb_funcall(cComplex, new_id, 2, x, y);
}
#endif


SWIGINTERNINLINE VALUE
SWIG_From_std_complex_Sl_double_Sg_  (/*@SWIG:/opt/local/share/swig/3.0.8/typemaps/swigmacros.swg,104,%ifcplusplus@*/

const std::complex<double>&



/*@SWIG@*/ c)
{
  VALUE re = rb_float_new(std::real(c));
  VALUE im = rb_float_new(std::imag(c));
  return rb_complex_new(re, im);
}

SWIGINTERN void RubyEigen_MatrixXcd___set_col__(RubyEigen::MatrixXcd *self,int i,std::vector< std::complex< double >,std::allocator< std::complex< double > > > const &v){
      (*self).col(i) = Eigen::VectorXcd::Map(v.data(), v.size());
    }
SWIGINTERN void RubyEigen_MatrixXcd___set_row__(RubyEigen::MatrixXcd *self,int i,std::vector< std::complex< double >,std::allocator< std::complex< double > > > const &v){
      (*self).row(i) = Eigen::VectorXcd::Map(v.data(), v.size());
    }
SWIGINTERN RubyEigen::MatrixXcd RubyEigen_MatrixXcd___mul_n__(RubyEigen::MatrixXcd *self,RubyEigen::MatrixXcd &a,RubyEigen::MatrixXcd &b,RubyEigen::MatrixXcd &c,RubyEigen::MatrixXcd &d){
      return (*self) * a * b * c * d;
    }
SWIGINTERN std::string RubyEigen_MatrixXcd_to_s(RubyEigen::MatrixXcd *self){
      std::ostrstream s;
      s << (*self) << std::ends;
      return s.str();
    }
SWIGINTERN std::complex< double > RubyEigen_MatrixXcd___getitem__(RubyEigen::MatrixXcd *self,int i,int j){
      return (*self)(i, j);
    }
SWIGINTERN void RubyEigen_MatrixXcd___setitem__(RubyEigen::MatrixXcd *self,int i,int j,std::complex< double > c){
      (*self)(i, j) = c;
    }
SWIGINTERN RubyEigen::MatrixXcd RubyEigen_MatrixXcd_triu(RubyEigen::MatrixXcd *self){
      return (*self).triangularView<Eigen::Upper>();
    }
SWIGINTERN RubyEigen::MatrixXcd RubyEigen_MatrixXcd_tril(RubyEigen::MatrixXcd *self){
      return (*self).triangularView<Eigen::Lower>();
    }
SWIGINTERN RubyEigen::FullPivLU< RubyEigen::MatrixXcd > RubyEigen_MatrixXcd_fullPivLu(RubyEigen::MatrixXcd *self){
      return (*self).fullPivLu();
    }
SWIGINTERN RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXcd > RubyEigen_MatrixXcd_fullPivHouseholderQR(RubyEigen::MatrixXcd *self){
      return RubyEigen::FullPivHouseholderQR<RubyEigen::MatrixXcd>(*self);
    }
SWIGINTERN RubyEigen::JacobiSVD< RubyEigen::MatrixXcd > RubyEigen_MatrixXcd_svd(RubyEigen::MatrixXcd *self){
      return Eigen::JacobiSVD<Eigen::MatrixXcd>(*self, Eigen::ComputeFullU | Eigen::ComputeFullV);
    }
SWIGINTERN double RubyEigen_VectorXd___getitem__(RubyEigen::VectorXd *self,int i){
      return (*self)(i);
    }
SWIGINTERN void RubyEigen_VectorXd___setitem__(RubyEigen::VectorXd *self,int i,double c){
      (*self)(i) = c;
    }
SWIGINTERN std::string RubyEigen_VectorXd_to_s(RubyEigen::VectorXd *self){
      std::ostrstream s;
      s << (*self) << std::ends;
      return s.str();
    }
SWIGINTERN std::complex< double > RubyEigen_VectorXcd___getitem__(RubyEigen::VectorXcd *self,int i){
      return (*self)(i);
    }
SWIGINTERN void RubyEigen_VectorXcd___setitem__(RubyEigen::VectorXcd *self,int i,std::complex< double > c){
      (*self)(i) = c;
    }
SWIGINTERN std::string RubyEigen_VectorXcd_to_s(RubyEigen::VectorXcd *self){
      std::ostrstream s;
      s << (*self) << std::ends;
      return s.str();
    }
SWIGINTERN RubyEigen::MatrixXd RubyEigen_MatrixBool_select(RubyEigen::MatrixBool *self,RubyEigen::MatrixXd const &a,RubyEigen::MatrixXd const &b){
      return (*self).select(a, b);
    }
SWIGINTERN RubyEigen::MatrixXd RubyEigen_FullPivLU_Sl_RubyEigen_MatrixXd_Sg__u(RubyEigen::FullPivLU< RubyEigen::MatrixXd > *self){
      return (*self).matrixLU().triangularView<Eigen::Upper>();
    }
SWIGINTERN RubyEigen::MatrixXd RubyEigen_FullPivLU_Sl_RubyEigen_MatrixXd_Sg__l(RubyEigen::FullPivLU< RubyEigen::MatrixXd > *self){
      return (*self).matrixLU().triangularView<Eigen::UnitLower>();
    }
SWIGINTERN RubyEigen::MatrixXcd RubyEigen_FullPivLU_Sl_RubyEigen_MatrixXcd_Sg__u(RubyEigen::FullPivLU< RubyEigen::MatrixXcd > *self){
      return (*self).matrixLU().triangularView<Eigen::Upper>();
    }
SWIGINTERN RubyEigen::MatrixXcd RubyEigen_FullPivLU_Sl_RubyEigen_MatrixXcd_Sg__l(RubyEigen::FullPivLU< RubyEigen::MatrixXcd > *self){
      return (*self).matrixLU().triangularView<Eigen::UnitLower>();
    }
SWIGINTERN RubyEigen::MatrixXd RubyEigen_FullPivHouseholderQR_Sl_RubyEigen_MatrixXd_Sg__r(RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXd > *self){
      return (*self).matrixQR().triangularView<Eigen::Upper>();
    }
SWIGINTERN RubyEigen::MatrixXcd RubyEigen_FullPivHouseholderQR_Sl_RubyEigen_MatrixXcd_Sg__r(RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXcd > *self){
      return (*self).matrixQR().triangularView<Eigen::Upper>();
    }
SWIGINTERN double RubyEigen_ArrayXXd___getitem__(RubyEigen::ArrayXXd *self,int i,int j){
      return (*self)(i, j);
    }
SWIGINTERN void RubyEigen_ArrayXXd___setitem__(RubyEigen::ArrayXXd *self,int i,int j,double c){
      (*self)(i, j) = c;
    }
SWIGINTERN double RubyEigen_ArrayXd___getitem__(RubyEigen::ArrayXd *self,int i){
      return (*self)(i);
    }
SWIGINTERN void RubyEigen_ArrayXd___setitem__(RubyEigen::ArrayXd *self,int i,double c){
      (*self)(i) = c;
    }
SWIGINTERN RubyEigen::MatrixXd RubyEigen_ArrayBool_select(RubyEigen::ArrayBool *self,RubyEigen::MatrixXd &a,RubyEigen::MatrixXd &b){
      return (*self).select(a, b);
    }
static swig_class SwigClassGC_VALUE;


/*
  Document-method: Eigen::GC_VALUE.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_GC_VALUE_inspect(int argc, VALUE *argv, VALUE self) {
  swig::GC_VALUE *arg1 = (swig::GC_VALUE *) 0 ;
  swig::GC_VALUE r1 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  r1 = self; arg1 = &r1;
  {
    try {
      result = (VALUE)((swig::GC_VALUE const *)arg1)->inspect();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::GC_VALUE.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_GC_VALUE_to_s(int argc, VALUE *argv, VALUE self) {
  swig::GC_VALUE *arg1 = (swig::GC_VALUE *) 0 ;
  swig::GC_VALUE r1 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  r1 = self; arg1 = &r1;
  {
    try {
      result = (VALUE)((swig::GC_VALUE const *)arg1)->to_s();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassConstIterator;

SWIGINTERN void
free_swig_ConstIterator(void *self) {
    swig::ConstIterator *arg1 = (swig::ConstIterator *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_ConstIterator_value(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","value", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  {
    try {
      try {
        result = (VALUE)((swig::ConstIterator const *)arg1)->value();
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_Ruby_ExceptionType(NULL, Qnil);
          SWIG_fail;
        }
      }
      
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::ConstIterator.dup

  call-seq:
    dup -> ConstIterator

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_ConstIterator_dup(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  {
    try {
      result = (swig::ConstIterator *)((swig::ConstIterator const *)arg1)->dup();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::ConstIterator.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_ConstIterator_inspect(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  {
    try {
      result = (VALUE)((swig::ConstIterator const *)arg1)->inspect();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::ConstIterator.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_ConstIterator_to_s(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  {
    try {
      result = (VALUE)((swig::ConstIterator const *)arg1)->to_s();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_next__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","next", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = (swig::ConstIterator *)(arg1)->next(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_next__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  {
    try {
      try {
        result = (swig::ConstIterator *)(arg1)->next();
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_Ruby_ExceptionType(NULL, Qnil);
          SWIG_fail;
        }
      }
      
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ConstIterator_next(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ConstIterator_next__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ConstIterator_next__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "ConstIterator.next", 
    "    swig::ConstIterator * ConstIterator.next(size_t n)\n"
    "    swig::ConstIterator * ConstIterator.next()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_previous__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","previous", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = (swig::ConstIterator *)(arg1)->previous(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_previous__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  {
    try {
      try {
        result = (swig::ConstIterator *)(arg1)->previous();
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_Ruby_ExceptionType(NULL, Qnil);
          SWIG_fail;
        }
      }
      
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ConstIterator_previous(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ConstIterator_previous__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ConstIterator_previous__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "ConstIterator.previous", 
    "    swig::ConstIterator * ConstIterator.previous(size_t n)\n"
    "    swig::ConstIterator * ConstIterator.previous()\n");
  
  return Qnil;
}



/*
  Document-method: Eigen::ConstIterator.==

  call-seq:
    ==(x) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_ConstIterator___eq__(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  swig::ConstIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__ConstIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::ConstIterator const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::ConstIterator const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::ConstIterator * >(argp2);
  {
    try {
      result = (bool)((swig::ConstIterator const *)arg1)->operator ==((swig::ConstIterator const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::ConstIterator.+

  call-seq:
    +(n) -> ConstIterator

Add operator.
*/
SWIGINTERN VALUE
_wrap_ConstIterator___add__(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator +", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try {
      try {
        result = (swig::ConstIterator *)((swig::ConstIterator const *)arg1)->operator +(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_Ruby_ExceptionType(NULL, Qnil);
          SWIG_fail;
        }
      }
      
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::ConstIterator.-

  call-seq:
    -(n) -> ConstIterator
    -(x) -> ptrdiff_t

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_ConstIterator___sub____SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator -", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try {
      try {
        result = (swig::ConstIterator *)((swig::ConstIterator const *)arg1)->operator -(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_Ruby_ExceptionType(NULL, Qnil);
          SWIG_fail;
        }
      }
      
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator___sub____SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  swig::ConstIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ptrdiff_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__ConstIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::ConstIterator const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::ConstIterator const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::ConstIterator * >(argp2);
  {
    try {
      result = ((swig::ConstIterator const *)arg1)->operator -((swig::ConstIterator const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ConstIterator___sub__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ConstIterator___sub____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ConstIterator___sub____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__sub__.new", 
    "    __sub__.new(ptrdiff_t n)\n"
    "    __sub__.new(swig::ConstIterator const &x)\n");
  
  return Qnil;
}


static swig_class SwigClassIterator;

SWIGINTERN VALUE
_wrap_Iterator_valuee___(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  VALUE *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE temp2 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","setValue", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  temp2 = static_cast< VALUE >(argv[0]);
  arg2 = &temp2;
  {
    try {
      result = (VALUE)(arg1)->setValue((VALUE const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::Iterator.dup

  call-seq:
    dup -> Iterator

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_Iterator_dup(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  {
    try {
      result = (swig::Iterator *)((swig::Iterator const *)arg1)->dup();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_next__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","next", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = (swig::Iterator *)(arg1)->next(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_next__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  {
    try {
      try {
        result = (swig::Iterator *)(arg1)->next();
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_Ruby_ExceptionType(NULL, Qnil);
          SWIG_fail;
        }
      }
      
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Iterator_next(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Iterator_next__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Iterator_next__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Iterator.next", 
    "    swig::Iterator * Iterator.next(size_t n)\n"
    "    swig::Iterator * Iterator.next()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_previous__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","previous", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = (swig::Iterator *)(arg1)->previous(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_previous__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  {
    try {
      try {
        result = (swig::Iterator *)(arg1)->previous();
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_Ruby_ExceptionType(NULL, Qnil);
          SWIG_fail;
        }
      }
      
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Iterator_previous(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Iterator_previous__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Iterator_previous__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Iterator.previous", 
    "    swig::Iterator * Iterator.previous(size_t n)\n"
    "    swig::Iterator * Iterator.previous()\n");
  
  return Qnil;
}



/*
  Document-method: Eigen::Iterator.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_Iterator_inspect(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  {
    try {
      result = (VALUE)((swig::Iterator const *)arg1)->inspect();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::Iterator.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_Iterator_to_s(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  {
    try {
      result = (VALUE)((swig::Iterator const *)arg1)->to_s();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::Iterator.==

  call-seq:
    ==(x) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_Iterator___eq__(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  swig::Iterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__Iterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::Iterator const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::Iterator const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::Iterator * >(argp2);
  {
    try {
      result = (bool)((swig::Iterator const *)arg1)->operator ==((swig::Iterator const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::Iterator.+

  call-seq:
    +(n) -> Iterator

Add operator.
*/
SWIGINTERN VALUE
_wrap_Iterator___add__(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator +", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try {
      try {
        result = (swig::Iterator *)((swig::Iterator const *)arg1)->operator +(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_Ruby_ExceptionType(NULL, Qnil);
          SWIG_fail;
        }
      }
      
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::Iterator.-

  call-seq:
    -(n) -> Iterator
    -(x) -> ptrdiff_t

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_Iterator___sub____SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator -", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try {
      try {
        result = (swig::Iterator *)((swig::Iterator const *)arg1)->operator -(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_Ruby_ExceptionType(NULL, Qnil);
          SWIG_fail;
        }
      }
      
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator___sub____SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  swig::Iterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ptrdiff_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__Iterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::Iterator const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::Iterator const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::Iterator * >(argp2);
  {
    try {
      result = ((swig::Iterator const *)arg1)->operator -((swig::Iterator const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Iterator___sub__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_swig__Iterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Iterator___sub____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Iterator___sub____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__sub__.new", 
    "    __sub__.new(ptrdiff_t n)\n"
    "    __sub__.new(swig::Iterator const &x)\n");
  
  return Qnil;
}


SWIGINTERN void
free_swig_Iterator(void *self) {
    swig::Iterator *arg1 = (swig::Iterator *)self;
    delete arg1;
}

static swig_class SwigClassStdVectorDouble__;


/*
  Document-method: Eigen::StdVectorDouble__.dup

  call-seq:
    dup -> StdVectorDouble__

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_StdVectorDouble___dup(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg__dup(arg1);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::StdVectorDouble__.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_StdVectorDouble___inspect(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_double_Sg__inspect(arg1);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::StdVectorDouble__.to_a

  call-seq:
    to_a -> VALUE

Convert StdVectorDouble__ to an Array.
*/
SWIGINTERN VALUE
_wrap_StdVectorDouble___to_a(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","to_a", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_double_Sg__to_a(arg1);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::StdVectorDouble__.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_StdVectorDouble___to_s(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_double_Sg__to_s(arg1);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::StdVectorDouble__.slice

  call-seq:
    slice(i, length) -> VALUE

Return a slice (portion of) the StdVectorDouble__.
*/
SWIGINTERN VALUE
_wrap_StdVectorDouble___slice(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","slice", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< double >::difference_type","slice", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< double >::difference_type","slice", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    try {
      try {
        result = (VALUE)std_vector_Sl_double_Sg__slice(arg1,arg2,arg3);
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::StdVectorDouble__.each

  call-seq:
    each -> StdVectorDouble__

Iterate thru each element in the StdVectorDouble__.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_StdVectorDouble___each(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg__each(arg1);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_StdVectorDouble_____delete2__(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","__delete2__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< double >::value_type","__delete2__", 2, argv[0] ));
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (VALUE)std_vector_Sl_double_Sg____delete2__(arg1,(double const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::StdVectorDouble__.select

  call-seq:
    select -> StdVectorDouble__

Iterate thru each element in the StdVectorDouble__ and select those that match a condition.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_StdVectorDouble___select(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","select", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg__select(arg1);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::StdVectorDouble__.delete_at

  call-seq:
    delete_at(i) -> VALUE

Delete an element at a certain index.
*/
SWIGINTERN VALUE
_wrap_StdVectorDouble___delete_at(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","delete_at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< double >::difference_type","delete_at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  {
    try {
      result = (VALUE)std_vector_Sl_double_Sg__delete_at(arg1,arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::StdVectorDouble__.at

  call-seq:
    at(i) -> VALUE

Return element at a certain index.
*/
SWIGINTERN VALUE
_wrap_StdVectorDouble___at(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > const *","at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< double >::difference_type","at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  {
    try {
      result = (VALUE)std_vector_Sl_double_Sg__at((std::vector< double > const *)arg1,arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::StdVectorDouble__.[]

  call-seq:
    [](i, length) -> VALUE
    [](i) -> VALUE
    [](i) -> VALUE

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_StdVectorDouble_____getitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< double >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< double >::difference_type","__getitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    try {
      try {
        result = (VALUE)std_vector_Sl_double_Sg____getitem____SWIG_0((std::vector< double > const *)arg1,arg2,arg3);
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_StdVectorDouble_____getitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< double >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  {
    try {
      result = (VALUE)std_vector_Sl_double_Sg____getitem____SWIG_1((std::vector< double > const *)arg1,arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_StdVectorDouble_____getitem____SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  arg2 = argv[0];
  {
    try {
      try {
        result = (VALUE)std_vector_Sl_double_Sg____getitem____SWIG_2((std::vector< double > const *)arg1,arg2);
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_StdVectorDouble_____getitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StdVectorDouble_____getitem____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_StdVectorDouble_____getitem____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_StdVectorDouble_____getitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "__getitem__", 
    "    VALUE __getitem__(std::vector< double >::difference_type i, std::vector< double >::difference_type length)\n"
    "    VALUE __getitem__(std::vector< double >::difference_type i)\n"
    "    VALUE __getitem__(VALUE i)\n");
  
  return Qnil;
}



/*
  Document-method: Eigen::StdVectorDouble__.[]=

  call-seq:
    []=(i, x) -> VALUE
    []=(i, length, v) -> VALUE

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_StdVectorDouble_____setitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< double >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< double >::value_type","__setitem__", 3, argv[1] ));
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      try {
        result = (VALUE)std_vector_Sl_double_Sg____setitem____SWIG_0(arg1,arg2,(double const &)*arg3);
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_StdVectorDouble_____setitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< double >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< double >::difference_type","__setitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< double,std::allocator< double > > const &","__setitem__", 4, argv[2] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< double,std::allocator< double > > const &","__setitem__", 4, argv[2])); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        result = (VALUE)std_vector_Sl_double_Sg____setitem____SWIG_1(arg1,arg2,arg3,(std::vector< double,std::allocator< double > > const &)*arg4);
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = result;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return vresult;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_StdVectorDouble_____setitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_StdVectorDouble_____setitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_StdVectorDouble_____setitem____SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "__setitem__", 
    "    VALUE __setitem__(std::vector< double >::difference_type i, std::vector< double >::value_type const &x)\n"
    "    VALUE __setitem__(std::vector< double >::difference_type i, std::vector< double >::difference_type length, std::vector< double,std::allocator< double > > const &v)\n");
  
  return Qnil;
}



/*
  Document-method: Eigen::StdVectorDouble__.reject!

  call-seq:
    reject! -> StdVectorDouble__

Iterate thru each element in the StdVectorDouble__ and reject those that fail a condition.  A block must be provided.  StdVectorDouble__ is modified in place.
*/
SWIGINTERN VALUE
_wrap_StdVectorDouble___rejectN___(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","reject_bang", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg__reject_bang(arg1);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::StdVectorDouble__.pop

  call-seq:
    pop -> VALUE

Remove and return element at the end of the StdVectorDouble__.
*/
SWIGINTERN VALUE
_wrap_StdVectorDouble___pop(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","pop", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_double_Sg__pop(arg1);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::StdVectorDouble__.push

  call-seq:
    push(e) -> std::vector< double >::value_type const

Add an element at the end of the StdVectorDouble__.
*/
SWIGINTERN VALUE
_wrap_StdVectorDouble___push(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","push", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< double >::value_type","push", 2, argv[0] ));
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (std::vector< double >::value_type)std_vector_Sl_double_Sg__push(arg1,(double const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::StdVectorDouble__.reject

  call-seq:
    reject -> StdVectorDouble__

Iterate thru each element in the StdVectorDouble__ and reject those that fail a condition returning a new StdVectorDouble__.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_StdVectorDouble___reject(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","reject", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg__reject(arg1);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::StdVectorDouble__.shift

  call-seq:
    shift -> VALUE

Remove and return element at the beginning of the StdVectorDouble__.
*/
SWIGINTERN VALUE
_wrap_StdVectorDouble___shift(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","shift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_double_Sg__shift(arg1);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::StdVectorDouble__.insert

  call-seq:
    insert(pos, argc) -> StdVectorDouble__
    insert(pos, x) -> std::vector< double >::iterator
    insert(pos, n, x)

Insert one or more new elements in the StdVectorDouble__.
*/
SWIGINTERN VALUE
_wrap_StdVectorDouble___insert__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  int arg3 ;
  VALUE *arg4 = (VALUE *) 0 ;
  void *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 2) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< double >::difference_type","insert", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  {
    arg3 = argc - 1;
    arg4 = argv + 1;
  }
  {
    try {
      result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg__insert__SWIG_0(arg1,arg2,arg3,arg4,arg5);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::StdVectorDouble__.unshift

  call-seq:
    unshift(argc) -> StdVectorDouble__

Add one or more elements at the beginning of the StdVectorDouble__.
*/
SWIGINTERN VALUE
_wrap_StdVectorDouble___unshift(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  VALUE *arg3 = (VALUE *) 0 ;
  void *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 1) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","unshift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    arg2 = argc;
    arg3 = argv;
  }
  {
    try {
      result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg__unshift(arg1,arg2,arg3,arg4);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_StdVectorDouble____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (std::vector< double > *)new std::vector< double >();
      DATA_PTR(self) = result;
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_StdVectorDouble____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< double > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > const &","vector<(double)>", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< double > const &","vector<(double)>", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
      DATA_PTR(self) = result;
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}



/*
  Document-method: Eigen::StdVectorDouble__.empty?

  call-seq:
    empty? -> bool

Check if the StdVectorDouble__ is empty or not.
*/
SWIGINTERN VALUE
_wrap_StdVectorDouble___emptyq___(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > const *","empty", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (bool)((std::vector< double > const *)arg1)->empty();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::StdVectorDouble__.size

  call-seq:
    size -> std::vector< double >::size_type

Size or Length of the StdVectorDouble__.
*/
SWIGINTERN VALUE
_wrap_StdVectorDouble___size(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = ((std::vector< double > const *)arg1)->size();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_StdVectorDouble___swap(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","swap", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< double > &","swap", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< double > &","swap", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< double > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::StdVectorDouble__.begin

  call-seq:
    begin -> std::vector< double >::iterator

Return an iterator to the beginning of the StdVectorDouble__.
*/
SWIGINTERN VALUE
_wrap_StdVectorDouble___begin(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","begin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< double >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::StdVectorDouble__.end

  call-seq:
    end -> std::vector< double >::iterator

Return an iterator to past the end of the StdVectorDouble__.
*/
SWIGINTERN VALUE
_wrap_StdVectorDouble___end(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","end", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (arg1)->end();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< double >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::StdVectorDouble__.rbegin

  call-seq:
    rbegin -> std::vector< double >::reverse_iterator

Return a reverse iterator to the beginning (the end) of the StdVectorDouble__.
*/
SWIGINTERN VALUE
_wrap_StdVectorDouble___rbegin(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","rbegin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< double >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::StdVectorDouble__.rend

  call-seq:
    rend -> std::vector< double >::reverse_iterator

Return a reverse iterator to past the end (past the beginning) of the StdVectorDouble__.
*/
SWIGINTERN VALUE
_wrap_StdVectorDouble___rend(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","rend", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< double >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::StdVectorDouble__.clear

  call-seq:
    clear

Clear StdVectorDouble__ contents.
*/
SWIGINTERN VALUE
_wrap_StdVectorDouble___clear(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      (arg1)->clear();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_StdVectorDouble___get_allocator(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::allocator< double > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > const *","get_allocator", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = ((std::vector< double > const *)arg1)->get_allocator();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new std::vector< double >::allocator_type(static_cast< const std::vector< double >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_double_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_StdVectorDouble____SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< double >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< double > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< double >::size_type","vector<(double)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  {
    try {
      result = (std::vector< double > *)new std::vector< double >(arg1);
      DATA_PTR(self) = result;
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return self;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::StdVectorDouble__.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the StdVectorDouble__.
*/
SWIGINTERN VALUE
_wrap_StdVectorDouble___resize__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< double >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::StdVectorDouble__.erase

  call-seq:
    erase(pos) -> std::vector< double >::iterator
    erase(first, last) -> std::vector< double >::iterator

Delete a portion of the StdVectorDouble__.
*/
SWIGINTERN VALUE
_wrap_StdVectorDouble___erase__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  std::vector< double >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< double >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< double >::iterator","erase", 2, argv[0] ));
    }
  }
  {
    try {
      result = std_vector_Sl_double_Sg__erase__SWIG_0(arg1,arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< double >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_StdVectorDouble___erase__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  swig::Iterator *iter3 = 0 ;
  int res3 ;
  std::vector< double >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< double >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< double >::iterator","erase", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter3), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< double >::iterator","erase", 3, argv[1] ));
  } else {
    swig::Iterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< double >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< double >::iterator","erase", 3, argv[1] ));
    }
  }
  {
    try {
      result = std_vector_Sl_double_Sg__erase__SWIG_1(arg1,arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< double >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_StdVectorDouble___erase(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_StdVectorDouble___erase__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        swig::ConstIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), 
          swig::Iterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< double >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_StdVectorDouble___erase__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "erase", 
    "    std::vector< double >::iterator erase(std::vector< double >::iterator pos)\n"
    "    std::vector< double >::iterator erase(std::vector< double >::iterator first, std::vector< double >::iterator last)\n");
  
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_StdVectorDouble___allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_StdVectorDouble___allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_StdVectorDouble____SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::vector< double >::size_type arg1 ;
  std::vector< double >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  std::vector< double > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< double >::size_type","vector<(double)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< double >::value_type","vector<(double)>", 2, argv[1] ));
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (std::vector< double > *)new std::vector< double >(arg1,(std::vector< double >::value_type const &)*arg2);
      DATA_PTR(self) = result;
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_StdVectorDouble__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_StdVectorDouble____SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_StdVectorDouble____SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StdVectorDouble____SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_StdVectorDouble____SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "StdVectorDouble__.new", 
    "    StdVectorDouble__.new()\n"
    "    StdVectorDouble__.new(std::vector< double > const &)\n"
    "    StdVectorDouble__.new(std::vector< double >::size_type size)\n"
    "    StdVectorDouble__.new(std::vector< double >::size_type size, std::vector< double >::value_type const &value)\n");
  
  return Qnil;
}



/*
  Document-method: Eigen::StdVectorDouble__.front

  call-seq:
    front -> std::vector< double >::value_type const &

Return the first element in StdVectorDouble__.
*/
SWIGINTERN VALUE
_wrap_StdVectorDouble___front(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > const *","front", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->front();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::StdVectorDouble__.back

  call-seq:
    back -> std::vector< double >::value_type const &

Return the last element in StdVectorDouble__.
*/
SWIGINTERN VALUE
_wrap_StdVectorDouble___back(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > const *","back", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->back();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::StdVectorDouble__.assign

  call-seq:
    assign(n, x)

Assign a new StdVectorDouble__ or portion of it.
*/
SWIGINTERN VALUE
_wrap_StdVectorDouble___assign(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","assign", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< double >::size_type","assign", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< double >::value_type","assign", 3, argv[1] ));
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->assign(arg2,(std::vector< double >::value_type const &)*arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::StdVectorDouble__.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the StdVectorDouble__.
*/
SWIGINTERN VALUE
_wrap_StdVectorDouble___resize__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< double >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< double >::value_type","resize", 3, argv[1] ));
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->resize(arg2,(std::vector< double >::value_type const &)*arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_StdVectorDouble___resize(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StdVectorDouble___resize__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_StdVectorDouble___resize__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "StdVectorDouble__.resize", 
    "    void StdVectorDouble__.resize(std::vector< double >::size_type new_size)\n"
    "    void StdVectorDouble__.resize(std::vector< double >::size_type new_size, std::vector< double >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: Eigen::StdVectorDouble__.insert

  call-seq:
    insert(pos, argc) -> StdVectorDouble__
    insert(pos, x) -> std::vector< double >::iterator
    insert(pos, n, x)

Insert one or more new elements in the StdVectorDouble__.
*/
SWIGINTERN VALUE
_wrap_StdVectorDouble___insert__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  std::vector< double >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< double >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< double >::iterator","insert", 2, argv[0] ));
    }
  }
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< double >::value_type","insert", 3, argv[1] ));
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      result = std_vector_Sl_double_Sg__insert__SWIG_1(arg1,arg2,(double const &)*arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< double >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_StdVectorDouble___insert__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::size_type arg3 ;
  std::vector< double >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< double >::value_type temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< double >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< double >::iterator","insert", 2, argv[0] ));
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< double >::size_type","insert", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< double >::size_type >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "std::vector< double >::value_type","insert", 4, argv[2] ));
  } 
  temp4 = static_cast< std::vector< double >::value_type >(val4);
  arg4 = &temp4;
  {
    try {
      std_vector_Sl_double_Sg__insert__SWIG_2(arg1,arg2,arg3,(double const &)*arg4);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_StdVectorDouble___insert(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_StdVectorDouble___insert__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_StdVectorDouble___insert__SWIG_0(nargs, args, self);
          }
          return _wrap_StdVectorDouble___insert__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_StdVectorDouble___insert__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "insert", 
    "    void insert(std::vector< double >::difference_type pos, int argc, VALUE *argv, ...)\n"
    "    void insert(std::vector< double >::iterator pos, std::vector< double >::value_type const &x)\n"
    "    void insert(std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: Eigen::StdVectorDouble__.reserve

  call-seq:
    reserve(n)

Reserve memory in the StdVectorDouble__ for a number of elements.
*/
SWIGINTERN VALUE
_wrap_StdVectorDouble___reserve(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","reserve", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< double >::size_type","reserve", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::StdVectorDouble__.capacity

  call-seq:
    capacity -> std::vector< double >::size_type

Reserved capacity of the StdVectorDouble__.
*/
SWIGINTERN VALUE
_wrap_StdVectorDouble___capacity(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > const *","capacity", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = ((std::vector< double > const *)arg1)->capacity();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_StdVectorDouble___map_bang(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","map_bang", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg__map_bang(arg1);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::StdVectorDouble__.__delete__

  call-seq:
    __delete__(val) -> VALUE

Delete a matching element.
*/
SWIGINTERN VALUE
_wrap_StdVectorDouble_____delete__(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","__delete__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","__delete__", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (VALUE)std_vector_Sl_double_Sg____delete__(arg1,(double const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_std_vector_Sl_double_Sg_(void *self) {
    std::vector< double > *arg1 = (std::vector< double > *)self;
    delete arg1;
}

static swig_class SwigClassMatrixDouble;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_MatrixDouble_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_MatrixDouble_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_RubyEigen__MatrixXd);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_MatrixDouble(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  RubyEigen::MatrixXd *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","MatrixXd", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","MatrixXd", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (RubyEigen::MatrixXd *)new RubyEigen::MatrixXd(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_RubyEigen_MatrixXd(void *self) {
    RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_MatrixDouble_cwiseAbs(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","cwiseAbs", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = (arg1)->cwiseAbs();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_cwiseAbs2(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","cwiseAbs2", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = (arg1)->cwiseAbs2();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_cwiseMax__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  RubyEigen::MatrixXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","cwiseMax", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd &","cwiseMax", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXd &","cwiseMax", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::MatrixXd * >(argp2);
  {
    try {
      result = (arg1)->cwiseMax(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_cwiseMax__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","cwiseMax", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","cwiseMax", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (arg1)->cwiseMax(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MatrixDouble_cwiseMax(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__MatrixXd, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MatrixDouble_cwiseMax__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatrixDouble_cwiseMax__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MatrixDouble.cwiseMax", 
    "    RubyEigen::MatrixXd MatrixDouble.cwiseMax(RubyEigen::MatrixXd &m)\n"
    "    RubyEigen::MatrixXd MatrixDouble.cwiseMax(double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_cwiseMin__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  RubyEigen::MatrixXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","cwiseMin", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd &","cwiseMin", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXd &","cwiseMin", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::MatrixXd * >(argp2);
  {
    try {
      result = (arg1)->cwiseMin(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_cwiseMin__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","cwiseMin", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","cwiseMin", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (arg1)->cwiseMin(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MatrixDouble_cwiseMin(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__MatrixXd, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MatrixDouble_cwiseMin__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatrixDouble_cwiseMin__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MatrixDouble.cwiseMin", 
    "    RubyEigen::MatrixXd MatrixDouble.cwiseMin(RubyEigen::MatrixXd &m)\n"
    "    RubyEigen::MatrixXd MatrixDouble.cwiseMin(double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_maxCoeff(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","maxCoeff", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = (double)(arg1)->maxCoeff();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_minCoeff(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","minCoeff", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = (double)(arg1)->minCoeff();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_array(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::ArrayXXd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","array", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = (arg1)->array();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new Eigen::ArrayXXd(static_cast< const Eigen::ArrayXXd& >(result))), SWIGTYPE_p_Eigen__ArrayXXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_real(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","real", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = (arg1)->real();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_hasNaN(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","hasNaN", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = (bool)(arg1)->hasNaN();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_setRandom(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","setRandom", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      (arg1)->setRandom();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_setConstant(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","setConstant", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setConstant", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setConstant(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_setIdentity(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","setIdentity", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      (arg1)->setIdentity();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_setOnes(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","setOnes", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      (arg1)->setOnes();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_setZero(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","setZero", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      (arg1)->setZero();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_cwiseSqrt(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","cwiseSqrt", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = (arg1)->cwiseSqrt();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_cwiseInverse(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","cwiseInverse", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = (arg1)->cwiseInverse();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_cwiseProduct(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  RubyEigen::MatrixXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","cwiseProduct", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd &","cwiseProduct", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXd &","cwiseProduct", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::MatrixXd * >(argp2);
  {
    try {
      result = (arg1)->cwiseProduct(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_cwiseQuotient(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  RubyEigen::MatrixXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","cwiseQuotient", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd &","cwiseQuotient", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXd &","cwiseQuotient", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::MatrixXd * >(argp2);
  {
    try {
      result = (arg1)->cwiseQuotient(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_cwiseEqual__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  RubyEigen::MatrixXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  RubyEigen::MatrixBool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","cwiseEqual", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd &","cwiseEqual", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXd &","cwiseEqual", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::MatrixXd * >(argp2);
  {
    try {
      result = (arg1)->cwiseEqual(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixBool(static_cast< const RubyEigen::MatrixBool& >(result))), SWIGTYPE_p_MatrixT_bool_Dynamic_Dynamic_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_cwiseEqual__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  RubyEigen::MatrixBool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","cwiseEqual", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","cwiseEqual", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (arg1)->cwiseEqual(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixBool(static_cast< const RubyEigen::MatrixBool& >(result))), SWIGTYPE_p_MatrixT_bool_Dynamic_Dynamic_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MatrixDouble_cwiseEqual(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__MatrixXd, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MatrixDouble_cwiseEqual__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatrixDouble_cwiseEqual__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MatrixDouble.cwiseEqual", 
    "    RubyEigen::MatrixBool MatrixDouble.cwiseEqual(RubyEigen::MatrixXd &m)\n"
    "    RubyEigen::MatrixBool MatrixDouble.cwiseEqual(double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_cwiseNotEqual(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  RubyEigen::MatrixXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  RubyEigen::MatrixBool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","cwiseNotEqual", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd &","cwiseNotEqual", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXd &","cwiseNotEqual", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::MatrixXd * >(argp2);
  {
    try {
      result = (arg1)->cwiseNotEqual(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixBool(static_cast< const RubyEigen::MatrixBool& >(result))), SWIGTYPE_p_MatrixT_bool_Dynamic_Dynamic_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::MatrixDouble.+

  call-seq:
    +(m) -> MatrixDouble

Add operator.
*/
SWIGINTERN VALUE
_wrap_MatrixDouble___add__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  RubyEigen::MatrixXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd const &","operator +", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXd const &","operator +", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::MatrixXd * >(argp2);
  {
    try {
      result = (arg1)->operator +((RubyEigen::MatrixXd const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::MatrixDouble.-

  call-seq:
    -(m) -> MatrixDouble

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_MatrixDouble___sub__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  RubyEigen::MatrixXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXd const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::MatrixXd * >(argp2);
  {
    try {
      result = (arg1)->operator -((RubyEigen::MatrixXd const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::MatrixDouble.-@

  call-seq:
    -@ -> MatrixDouble

Negation operator.
*/
SWIGINTERN VALUE
_wrap_MatrixDouble___neg__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = (arg1)->operator -();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble___mul____SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  RubyEigen::MatrixXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd const &","operator *", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXd const &","operator *", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::MatrixXd * >(argp2);
  {
    try {
      result = (arg1)->operator *((RubyEigen::MatrixXd const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble___mul____SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  RubyEigen::VectorXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  RubyEigen::VectorXd result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::VectorXd const &","operator *", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::VectorXd const &","operator *", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::VectorXd * >(argp2);
  {
    try {
      result = (arg1)->operator *((RubyEigen::VectorXd const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXd(static_cast< const RubyEigen::VectorXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble___mul____SWIG_2(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator *", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (arg1)->operator *(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MatrixDouble___mul__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__MatrixXd, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MatrixDouble___mul____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MatrixDouble___mul____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatrixDouble___mul____SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MatrixDouble.__mul__", 
    "    RubyEigen::MatrixXd MatrixDouble.__mul__(RubyEigen::MatrixXd const &m)\n"
    "    RubyEigen::MatrixXd MatrixDouble.__mul__(RubyEigen::VectorXd const &m)\n"
    "    RubyEigen::MatrixXd MatrixDouble.__mul__(double d)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble___div__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","operator /", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator /", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (arg1)->operator /(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::MatrixDouble.==

  call-seq:
    ==(m) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_MatrixDouble___eq__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  RubyEigen::MatrixXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXd &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::MatrixXd * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator ==(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_isApprox__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  RubyEigen::MatrixXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","isApprox", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd &","isApprox", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXd &","isApprox", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::MatrixXd * >(argp2);
  {
    try {
      result = (bool)(arg1)->isApprox(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_isApprox__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  RubyEigen::MatrixXd *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","isApprox", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd &","isApprox", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXd &","isApprox", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::MatrixXd * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","isApprox", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (bool)(arg1)->isApprox(*arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MatrixDouble_isApprox(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__MatrixXd, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MatrixDouble_isApprox__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__MatrixXd, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MatrixDouble_isApprox__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MatrixDouble.isApprox", 
    "    bool MatrixDouble.isApprox(RubyEigen::MatrixXd &m)\n"
    "    bool MatrixDouble.isApprox(RubyEigen::MatrixXd &m, double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_isApproxToConstant(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","isApproxToConstant", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","isApproxToConstant", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)(arg1)->isApproxToConstant(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_isConstant(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","isConstant", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","isConstant", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)(arg1)->isConstant(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_isMuchSmallerThan__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","isMuchSmallerThan", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","isMuchSmallerThan", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)(arg1)->isMuchSmallerThan(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_isMuchSmallerThan__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","isMuchSmallerThan", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","isMuchSmallerThan", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","isMuchSmallerThan", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (bool)(arg1)->isMuchSmallerThan(arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_isMuchSmallerThan__SWIG_2(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  RubyEigen::MatrixXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","isMuchSmallerThan", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd &","isMuchSmallerThan", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXd &","isMuchSmallerThan", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::MatrixXd * >(argp2);
  {
    try {
      result = (bool)(arg1)->isMuchSmallerThan(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_isMuchSmallerThan__SWIG_3(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  RubyEigen::MatrixXd *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","isMuchSmallerThan", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd &","isMuchSmallerThan", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXd &","isMuchSmallerThan", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::MatrixXd * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","isMuchSmallerThan", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (bool)(arg1)->isMuchSmallerThan(*arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MatrixDouble_isMuchSmallerThan(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__MatrixXd, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MatrixDouble_isMuchSmallerThan__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatrixDouble_isMuchSmallerThan__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__MatrixXd, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MatrixDouble_isMuchSmallerThan__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MatrixDouble_isMuchSmallerThan__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MatrixDouble.isMuchSmallerThan", 
    "    bool MatrixDouble.isMuchSmallerThan(double)\n"
    "    bool MatrixDouble.isMuchSmallerThan(double, double)\n"
    "    bool MatrixDouble.isMuchSmallerThan(RubyEigen::MatrixXd &m)\n"
    "    bool MatrixDouble.isMuchSmallerThan(RubyEigen::MatrixXd &m, double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_isOnes__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","isOnes", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = (bool)(arg1)->isOnes();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_isOnes__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","isOnes", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","isOnes", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)(arg1)->isOnes(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MatrixDouble_isOnes(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MatrixDouble_isOnes__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatrixDouble_isOnes__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MatrixDouble.isOnes", 
    "    bool MatrixDouble.isOnes()\n"
    "    bool MatrixDouble.isOnes(double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_isZero__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","isZero", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = (bool)(arg1)->isZero();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_isZero__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","isZero", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","isZero", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)(arg1)->isZero(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MatrixDouble_isZero(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MatrixDouble_isZero__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatrixDouble_isZero__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MatrixDouble.isZero", 
    "    bool MatrixDouble.isZero()\n"
    "    bool MatrixDouble.isZero(double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_adjoint(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","adjoint", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = (arg1)->adjoint();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_col(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  RubyEigen::VectorXd result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","col", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","col", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->col(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXd(static_cast< const RubyEigen::VectorXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_row(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  RubyEigen::VectorXd result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","row", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","row", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->row(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXd(static_cast< const RubyEigen::VectorXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_cols(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","cols", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = (int)(arg1)->cols();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_rows(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","rows", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = (int)(arg1)->rows();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_diagonal__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::VectorXd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","diagonal", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = (arg1)->diagonal();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXd(static_cast< const RubyEigen::VectorXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_diagonal__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","diagonal", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","diagonal", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->diagonal(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MatrixDouble_diagonal(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MatrixDouble_diagonal__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatrixDouble_diagonal__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MatrixDouble.diagonal", 
    "    RubyEigen::MatrixXd MatrixDouble.diagonal()\n"
    "    RubyEigen::MatrixXd MatrixDouble.diagonal(int)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_inverse(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","inverse", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = (arg1)->inverse();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_determinant(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","determinant", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = (double)(arg1)->determinant();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_norm(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","norm", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = (double)(arg1)->norm();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_operatorNorm(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","operatorNorm", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = (double)(arg1)->operatorNorm();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_sum(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","sum", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = (double)(arg1)->sum();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_prod(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","prod", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = (double)(arg1)->prod();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_normalize(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","normalize", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      (arg1)->normalize();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_transpose(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","transpose", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = (arg1)->transpose();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_conjugate(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","conjugate", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = (arg1)->conjugate();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_reverse(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","reverse", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = (arg1)->reverse();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_replicate(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","replicate", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","replicate", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","replicate", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (arg1)->replicate(arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_eigenvalues(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::VectorXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","eigenvalues", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = (arg1)->eigenvalues();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXcd(static_cast< const RubyEigen::VectorXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_isDiagonal(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","isDiagonal", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = (bool)(arg1)->isDiagonal();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_isIdentity(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","isIdentity", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = (bool)(arg1)->isIdentity();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_isLowerTriangular__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","isLowerTriangular", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = (bool)(arg1)->isLowerTriangular();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_isLowerTriangular__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","isLowerTriangular", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","isLowerTriangular", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)(arg1)->isLowerTriangular(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MatrixDouble_isLowerTriangular(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MatrixDouble_isLowerTriangular__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatrixDouble_isLowerTriangular__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MatrixDouble.isLowerTriangular", 
    "    bool MatrixDouble.isLowerTriangular()\n"
    "    bool MatrixDouble.isLowerTriangular(double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_isUpperTriangular__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","isUpperTriangular", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = (bool)(arg1)->isUpperTriangular();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_isUpperTriangular__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","isUpperTriangular", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","isUpperTriangular", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)(arg1)->isUpperTriangular(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MatrixDouble_isUpperTriangular(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MatrixDouble_isUpperTriangular__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatrixDouble_isUpperTriangular__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MatrixDouble.isUpperTriangular", 
    "    bool MatrixDouble.isUpperTriangular()\n"
    "    bool MatrixDouble.isUpperTriangular(double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_middleCols(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","middleCols", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","middleCols", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","middleCols", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (arg1)->middleCols(arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_middleRows(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","middleRows", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","middleRows", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","middleRows", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (arg1)->middleRows(arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_lu(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::PartialPivLU< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","lu", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = (arg1)->lu();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::PartialPivLU< RubyEigen::MatrixXd >(static_cast< const RubyEigen::PartialPivLU< RubyEigen::MatrixXd >& >(result))), SWIGTYPE_p_RubyEigen__PartialPivLUT_RubyEigen__MatrixXd_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_ldlt(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::LDLT< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","ldlt", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = (arg1)->ldlt();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::LDLT< RubyEigen::MatrixXd >(static_cast< const RubyEigen::LDLT< RubyEigen::MatrixXd >& >(result))), SWIGTYPE_p_RubyEigen__LDLTT_RubyEigen__MatrixXd_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_llt(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::LLT< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","llt", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = (arg1)->llt();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::LLT< RubyEigen::MatrixXd >(static_cast< const RubyEigen::LLT< RubyEigen::MatrixXd >& >(result))), SWIGTYPE_p_RubyEigen__LLTT_RubyEigen__MatrixXd_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble___set_col__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  int arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","__set_col__", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","__set_col__", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< double,std::allocator< double > > const &","__set_col__", 3, argv[1] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< double,std::allocator< double > > const &","__set_col__", 3, argv[1])); 
    }
    arg3 = ptr;
  }
  {
    try {
      RubyEigen_MatrixXd___set_col__(arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble___set_row__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  int arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","__set_row__", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","__set_row__", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< double,std::allocator< double > > const &","__set_row__", 3, argv[1] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< double,std::allocator< double > > const &","__set_row__", 3, argv[1])); 
    }
    arg3 = ptr;
  }
  {
    try {
      RubyEigen_MatrixXd___set_row__(arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble___mul_n__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  RubyEigen::MatrixXd *arg2 = 0 ;
  RubyEigen::MatrixXd *arg3 = 0 ;
  RubyEigen::MatrixXd *arg4 = 0 ;
  RubyEigen::MatrixXd *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","__mul_n__", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd &","__mul_n__", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXd &","__mul_n__", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::MatrixXd * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_RubyEigen__MatrixXd,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd &","__mul_n__", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXd &","__mul_n__", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< RubyEigen::MatrixXd * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_RubyEigen__MatrixXd,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd &","__mul_n__", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXd &","__mul_n__", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< RubyEigen::MatrixXd * >(argp4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_RubyEigen__MatrixXd,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd &","__mul_n__", 5, argv[3] )); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXd &","__mul_n__", 5, argv[3])); 
  }
  arg5 = reinterpret_cast< RubyEigen::MatrixXd * >(argp5);
  {
    try {
      result = RubyEigen_MatrixXd___mul_n__(arg1,*arg2,*arg3,*arg4,*arg5);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::MatrixDouble.to_s

  call-seq:
    to_s -> std::string

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_MatrixDouble_to_s(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = RubyEigen_MatrixXd_to_s(arg1);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::MatrixDouble.[]

  call-seq:
    [](i, j) -> double

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_MatrixDouble___getitem__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","__getitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (double)RubyEigen_MatrixXd___getitem__(arg1,arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::MatrixDouble.[]=

  call-seq:
    []=(i, j, c)

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_MatrixDouble___setitem__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","__setitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","__setitem__", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      RubyEigen_MatrixXd___setitem__(arg1,arg2,arg3,arg4);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_triu(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","triu", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = RubyEigen_MatrixXd_triu(arg1);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_tril(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","tril", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = RubyEigen_MatrixXd_tril(arg1);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_fullPivLu(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::FullPivLU< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","fullPivLu", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = RubyEigen_MatrixXd_fullPivLu(arg1);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::FullPivLU< RubyEigen::MatrixXd >(static_cast< const RubyEigen::FullPivLU< RubyEigen::MatrixXd >& >(result))), SWIGTYPE_p_RubyEigen__FullPivLUT_RubyEigen__MatrixXd_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_fullPivHouseholderQR(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","fullPivHouseholderQR", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = RubyEigen_MatrixXd_fullPivHouseholderQR(arg1);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXd >(static_cast< const RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXd >& >(result))), SWIGTYPE_p_RubyEigen__FullPivHouseholderQRT_RubyEigen__MatrixXd_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDouble_svd(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXd *arg1 = (RubyEigen::MatrixXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::JacobiSVD< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd *","svd", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXd * >(argp1);
  {
    try {
      result = RubyEigen_MatrixXd_svd(arg1);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::JacobiSVD< RubyEigen::MatrixXd >(static_cast< const RubyEigen::JacobiSVD< RubyEigen::MatrixXd >& >(result))), SWIGTYPE_p_RubyEigen__JacobiSVDT_RubyEigen__MatrixXd_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassMatrixComplex;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_MatrixComplex_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_MatrixComplex_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_RubyEigen__MatrixXcd);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_MatrixComplex(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (RubyEigen::MatrixXcd *)new RubyEigen::MatrixXcd();
      DATA_PTR(self) = result;
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_RubyEigen_MatrixXcd(void *self) {
    RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_MatrixComplex_imag(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","imag", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      result = (arg1)->imag();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_real(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","real", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      result = (arg1)->real();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_hasNaN(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","hasNaN", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      result = (bool)(arg1)->hasNaN();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_setRandom(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","setRandom", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      (arg1)->setRandom();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_setConstant(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  std::complex< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","setConstant", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::complex< double >","setConstant", 2, argv[0] ));
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  {
    try {
      (arg1)->setConstant(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_setIdentity(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","setIdentity", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      (arg1)->setIdentity();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_setOnes(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","setOnes", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      (arg1)->setOnes();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_setZero(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","setZero", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      (arg1)->setZero();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_cwiseSqrt(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::MatrixXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","cwiseSqrt", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      result = (arg1)->cwiseSqrt();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXcd(static_cast< const RubyEigen::MatrixXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXcd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_cwiseInverse(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::MatrixXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","cwiseInverse", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      result = (arg1)->cwiseInverse();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXcd(static_cast< const RubyEigen::MatrixXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXcd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_cwiseProduct(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  RubyEigen::MatrixXcd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  RubyEigen::MatrixXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","cwiseProduct", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixXcd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd &","cwiseProduct", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXcd &","cwiseProduct", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp2);
  {
    try {
      result = (arg1)->cwiseProduct(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXcd(static_cast< const RubyEigen::MatrixXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXcd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_cwiseQuotient(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  RubyEigen::MatrixXcd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  RubyEigen::MatrixXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","cwiseQuotient", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixXcd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd &","cwiseQuotient", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXcd &","cwiseQuotient", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp2);
  {
    try {
      result = (arg1)->cwiseQuotient(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXcd(static_cast< const RubyEigen::MatrixXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXcd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_cwiseEqual__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  RubyEigen::MatrixXcd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  RubyEigen::MatrixBool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","cwiseEqual", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixXcd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd &","cwiseEqual", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXcd &","cwiseEqual", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp2);
  {
    try {
      result = (arg1)->cwiseEqual(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixBool(static_cast< const RubyEigen::MatrixBool& >(result))), SWIGTYPE_p_MatrixT_bool_Dynamic_Dynamic_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_cwiseEqual__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  std::complex< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  RubyEigen::MatrixBool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","cwiseEqual", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::complex< double >","cwiseEqual", 2, argv[0] ));
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  {
    try {
      result = (arg1)->cwiseEqual(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixBool(static_cast< const RubyEigen::MatrixBool& >(result))), SWIGTYPE_p_MatrixT_bool_Dynamic_Dynamic_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MatrixComplex_cwiseEqual(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXcd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__MatrixXcd, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MatrixComplex_cwiseEqual__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXcd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatrixComplex_cwiseEqual__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MatrixComplex.cwiseEqual", 
    "    RubyEigen::MatrixBool MatrixComplex.cwiseEqual(RubyEigen::MatrixXcd &m)\n"
    "    RubyEigen::MatrixBool MatrixComplex.cwiseEqual(std::complex< double >)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_cwiseNotEqual(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  RubyEigen::MatrixXcd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  RubyEigen::MatrixBool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","cwiseNotEqual", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixXcd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd &","cwiseNotEqual", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXcd &","cwiseNotEqual", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp2);
  {
    try {
      result = (arg1)->cwiseNotEqual(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixBool(static_cast< const RubyEigen::MatrixBool& >(result))), SWIGTYPE_p_MatrixT_bool_Dynamic_Dynamic_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::MatrixComplex.+

  call-seq:
    +(m) -> MatrixComplex

Add operator.
*/
SWIGINTERN VALUE
_wrap_MatrixComplex___add__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  RubyEigen::MatrixXcd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  RubyEigen::MatrixXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixXcd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd const &","operator +", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXcd const &","operator +", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp2);
  {
    try {
      result = (arg1)->operator +((RubyEigen::MatrixXcd const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXcd(static_cast< const RubyEigen::MatrixXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXcd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::MatrixComplex.-

  call-seq:
    -(m) -> MatrixComplex

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_MatrixComplex___sub__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  RubyEigen::MatrixXcd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  RubyEigen::MatrixXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixXcd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXcd const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp2);
  {
    try {
      result = (arg1)->operator -((RubyEigen::MatrixXcd const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXcd(static_cast< const RubyEigen::MatrixXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXcd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::MatrixComplex.-@

  call-seq:
    -@ -> MatrixComplex

Negation operator.
*/
SWIGINTERN VALUE
_wrap_MatrixComplex___neg__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::MatrixXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      result = (arg1)->operator -();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXcd(static_cast< const RubyEigen::MatrixXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXcd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex___mul____SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  RubyEigen::MatrixXcd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  RubyEigen::MatrixXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixXcd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd const &","operator *", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXcd const &","operator *", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp2);
  {
    try {
      result = (arg1)->operator *((RubyEigen::MatrixXcd const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXcd(static_cast< const RubyEigen::MatrixXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXcd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex___mul____SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  RubyEigen::VectorXcd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  RubyEigen::VectorXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd const &","operator *", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::VectorXcd const &","operator *", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::VectorXcd * >(argp2);
  {
    try {
      result = (arg1)->operator *((RubyEigen::VectorXcd const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXcd(static_cast< const RubyEigen::VectorXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex___mul____SWIG_2(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  std::complex< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  RubyEigen::MatrixXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::complex< double >","operator *", 2, argv[0] ));
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  {
    try {
      result = (arg1)->operator *(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXcd(static_cast< const RubyEigen::MatrixXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXcd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MatrixComplex___mul__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXcd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__MatrixXcd, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MatrixComplex___mul____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXcd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MatrixComplex___mul____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXcd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatrixComplex___mul____SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MatrixComplex.__mul__", 
    "    RubyEigen::MatrixXcd MatrixComplex.__mul__(RubyEigen::MatrixXcd const &m)\n"
    "    RubyEigen::MatrixXcd MatrixComplex.__mul__(RubyEigen::VectorXcd const &m)\n"
    "    RubyEigen::MatrixXcd MatrixComplex.__mul__(std::complex< double > d)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex___div__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  std::complex< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  RubyEigen::MatrixXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","operator /", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::complex< double >","operator /", 2, argv[0] ));
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  {
    try {
      result = (arg1)->operator /(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXcd(static_cast< const RubyEigen::MatrixXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXcd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::MatrixComplex.==

  call-seq:
    ==(m) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_MatrixComplex___eq__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  RubyEigen::MatrixXcd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixXcd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXcd &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator ==(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_isApprox__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  RubyEigen::MatrixXcd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","isApprox", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixXcd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd &","isApprox", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXcd &","isApprox", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp2);
  {
    try {
      result = (bool)(arg1)->isApprox(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_isApprox__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  RubyEigen::MatrixXcd *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","isApprox", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixXcd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd &","isApprox", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXcd &","isApprox", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","isApprox", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (bool)(arg1)->isApprox(*arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MatrixComplex_isApprox(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXcd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__MatrixXcd, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MatrixComplex_isApprox__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXcd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__MatrixXcd, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MatrixComplex_isApprox__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MatrixComplex.isApprox", 
    "    bool MatrixComplex.isApprox(RubyEigen::MatrixXcd &m)\n"
    "    bool MatrixComplex.isApprox(RubyEigen::MatrixXcd &m, double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_isApproxToConstant(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  std::complex< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","isApproxToConstant", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::complex< double >","isApproxToConstant", 2, argv[0] ));
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  {
    try {
      result = (bool)(arg1)->isApproxToConstant(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_isConstant(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  std::complex< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","isConstant", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::complex< double >","isConstant", 2, argv[0] ));
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  {
    try {
      result = (bool)(arg1)->isConstant(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_isMuchSmallerThan__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","isMuchSmallerThan", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","isMuchSmallerThan", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)(arg1)->isMuchSmallerThan(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_isMuchSmallerThan__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","isMuchSmallerThan", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","isMuchSmallerThan", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","isMuchSmallerThan", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (bool)(arg1)->isMuchSmallerThan(arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_isMuchSmallerThan__SWIG_2(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  RubyEigen::MatrixXcd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","isMuchSmallerThan", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixXcd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd &","isMuchSmallerThan", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXcd &","isMuchSmallerThan", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp2);
  {
    try {
      result = (bool)(arg1)->isMuchSmallerThan(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_isMuchSmallerThan__SWIG_3(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  RubyEigen::MatrixXcd *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","isMuchSmallerThan", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixXcd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd &","isMuchSmallerThan", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXcd &","isMuchSmallerThan", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","isMuchSmallerThan", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (bool)(arg1)->isMuchSmallerThan(*arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MatrixComplex_isMuchSmallerThan(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXcd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__MatrixXcd, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MatrixComplex_isMuchSmallerThan__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXcd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatrixComplex_isMuchSmallerThan__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXcd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__MatrixXcd, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MatrixComplex_isMuchSmallerThan__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXcd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MatrixComplex_isMuchSmallerThan__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MatrixComplex.isMuchSmallerThan", 
    "    bool MatrixComplex.isMuchSmallerThan(double)\n"
    "    bool MatrixComplex.isMuchSmallerThan(double, double)\n"
    "    bool MatrixComplex.isMuchSmallerThan(RubyEigen::MatrixXcd &m)\n"
    "    bool MatrixComplex.isMuchSmallerThan(RubyEigen::MatrixXcd &m, double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_isOnes__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","isOnes", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      result = (bool)(arg1)->isOnes();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_isOnes__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","isOnes", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","isOnes", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)(arg1)->isOnes(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MatrixComplex_isOnes(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXcd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MatrixComplex_isOnes__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXcd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatrixComplex_isOnes__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MatrixComplex.isOnes", 
    "    bool MatrixComplex.isOnes()\n"
    "    bool MatrixComplex.isOnes(double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_isZero__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","isZero", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      result = (bool)(arg1)->isZero();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_isZero__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","isZero", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","isZero", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)(arg1)->isZero(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MatrixComplex_isZero(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXcd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MatrixComplex_isZero__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXcd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatrixComplex_isZero__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MatrixComplex.isZero", 
    "    bool MatrixComplex.isZero()\n"
    "    bool MatrixComplex.isZero(double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_adjoint(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::MatrixXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","adjoint", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      result = (arg1)->adjoint();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXcd(static_cast< const RubyEigen::MatrixXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXcd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_col(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  RubyEigen::VectorXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","col", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","col", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->col(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXcd(static_cast< const RubyEigen::VectorXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_row(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  RubyEigen::VectorXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","row", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","row", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->row(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXcd(static_cast< const RubyEigen::VectorXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_cols(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","cols", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      result = (int)(arg1)->cols();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_rows(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","rows", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      result = (int)(arg1)->rows();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_diagonal__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::VectorXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","diagonal", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      result = (arg1)->diagonal();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXcd(static_cast< const RubyEigen::VectorXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_diagonal__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  RubyEigen::MatrixXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","diagonal", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","diagonal", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->diagonal(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXcd(static_cast< const RubyEigen::MatrixXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXcd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MatrixComplex_diagonal(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXcd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MatrixComplex_diagonal__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXcd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatrixComplex_diagonal__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MatrixComplex.diagonal", 
    "    RubyEigen::MatrixXcd MatrixComplex.diagonal()\n"
    "    RubyEigen::MatrixXcd MatrixComplex.diagonal(int)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_inverse(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::MatrixXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","inverse", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      result = (arg1)->inverse();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXcd(static_cast< const RubyEigen::MatrixXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXcd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_determinant(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","determinant", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      result = (arg1)->determinant();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_norm(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","norm", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      result = (double)(arg1)->norm();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_operatorNorm(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","operatorNorm", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      result = (double)(arg1)->operatorNorm();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_sum(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","sum", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      result = (arg1)->sum();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_prod(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","prod", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      result = (arg1)->prod();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_normalize(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","normalize", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      (arg1)->normalize();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_transpose(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::MatrixXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","transpose", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      result = (arg1)->transpose();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXcd(static_cast< const RubyEigen::MatrixXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXcd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_conjugate(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::MatrixXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","conjugate", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      result = (arg1)->conjugate();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXcd(static_cast< const RubyEigen::MatrixXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXcd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_reverse(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::MatrixXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","reverse", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      result = (arg1)->reverse();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXcd(static_cast< const RubyEigen::MatrixXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXcd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_replicate(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  RubyEigen::MatrixXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","replicate", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","replicate", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","replicate", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (arg1)->replicate(arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXcd(static_cast< const RubyEigen::MatrixXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXcd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_eigenvalues(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::VectorXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","eigenvalues", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      result = (arg1)->eigenvalues();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXcd(static_cast< const RubyEigen::VectorXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_isDiagonal(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","isDiagonal", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      result = (bool)(arg1)->isDiagonal();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_isIdentity(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","isIdentity", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      result = (bool)(arg1)->isIdentity();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_isLowerTriangular__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","isLowerTriangular", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      result = (bool)(arg1)->isLowerTriangular();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_isLowerTriangular__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","isLowerTriangular", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","isLowerTriangular", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)(arg1)->isLowerTriangular(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MatrixComplex_isLowerTriangular(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXcd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MatrixComplex_isLowerTriangular__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXcd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatrixComplex_isLowerTriangular__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MatrixComplex.isLowerTriangular", 
    "    bool MatrixComplex.isLowerTriangular()\n"
    "    bool MatrixComplex.isLowerTriangular(double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_isUpperTriangular__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","isUpperTriangular", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      result = (bool)(arg1)->isUpperTriangular();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_isUpperTriangular__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","isUpperTriangular", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","isUpperTriangular", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)(arg1)->isUpperTriangular(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MatrixComplex_isUpperTriangular(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXcd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MatrixComplex_isUpperTriangular__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixXcd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatrixComplex_isUpperTriangular__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MatrixComplex.isUpperTriangular", 
    "    bool MatrixComplex.isUpperTriangular()\n"
    "    bool MatrixComplex.isUpperTriangular(double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_middleCols(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  RubyEigen::MatrixXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","middleCols", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","middleCols", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","middleCols", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (arg1)->middleCols(arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXcd(static_cast< const RubyEigen::MatrixXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXcd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_middleRows(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  RubyEigen::MatrixXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","middleRows", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","middleRows", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","middleRows", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (arg1)->middleRows(arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXcd(static_cast< const RubyEigen::MatrixXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXcd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_lu(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::PartialPivLU< RubyEigen::MatrixXcd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","lu", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      result = (arg1)->lu();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::PartialPivLU< RubyEigen::MatrixXcd >(static_cast< const RubyEigen::PartialPivLU< RubyEigen::MatrixXcd >& >(result))), SWIGTYPE_p_RubyEigen__PartialPivLUT_RubyEigen__MatrixXcd_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_ldlt(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::LDLT< RubyEigen::MatrixXcd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","ldlt", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      result = (arg1)->ldlt();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::LDLT< RubyEigen::MatrixXcd >(static_cast< const RubyEigen::LDLT< RubyEigen::MatrixXcd >& >(result))), SWIGTYPE_p_RubyEigen__LDLTT_RubyEigen__MatrixXcd_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_llt(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::LLT< RubyEigen::MatrixXcd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","llt", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      result = (arg1)->llt();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::LLT< RubyEigen::MatrixXcd >(static_cast< const RubyEigen::LLT< RubyEigen::MatrixXcd >& >(result))), SWIGTYPE_p_RubyEigen__LLTT_RubyEigen__MatrixXcd_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex___set_col__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  int arg2 ;
  std::vector< std::complex< double >,std::allocator< std::complex< double > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","__set_col__", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","__set_col__", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< std::complex< double >,std::allocator< std::complex< double > > > const &","__set_col__", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::complex< double >,std::allocator< std::complex< double > > > const &","__set_col__", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< std::complex< double >,std::allocator< std::complex< double > > > * >(argp3);
  {
    try {
      RubyEigen_MatrixXcd___set_col__(arg1,arg2,(std::vector< std::complex< double >,std::allocator< std::complex< double > > > const &)*arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex___set_row__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  int arg2 ;
  std::vector< std::complex< double >,std::allocator< std::complex< double > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","__set_row__", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","__set_row__", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< std::complex< double >,std::allocator< std::complex< double > > > const &","__set_row__", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::complex< double >,std::allocator< std::complex< double > > > const &","__set_row__", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< std::complex< double >,std::allocator< std::complex< double > > > * >(argp3);
  {
    try {
      RubyEigen_MatrixXcd___set_row__(arg1,arg2,(std::vector< std::complex< double >,std::allocator< std::complex< double > > > const &)*arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex___mul_n__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  RubyEigen::MatrixXcd *arg2 = 0 ;
  RubyEigen::MatrixXcd *arg3 = 0 ;
  RubyEigen::MatrixXcd *arg4 = 0 ;
  RubyEigen::MatrixXcd *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  RubyEigen::MatrixXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","__mul_n__", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixXcd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd &","__mul_n__", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXcd &","__mul_n__", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_RubyEigen__MatrixXcd,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd &","__mul_n__", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXcd &","__mul_n__", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_RubyEigen__MatrixXcd,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd &","__mul_n__", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXcd &","__mul_n__", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_RubyEigen__MatrixXcd,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd &","__mul_n__", 5, argv[3] )); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXcd &","__mul_n__", 5, argv[3])); 
  }
  arg5 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp5);
  {
    try {
      result = RubyEigen_MatrixXcd___mul_n__(arg1,*arg2,*arg3,*arg4,*arg5);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXcd(static_cast< const RubyEigen::MatrixXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXcd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::MatrixComplex.to_s

  call-seq:
    to_s -> std::string

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_MatrixComplex_to_s(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      result = RubyEigen_MatrixXcd_to_s(arg1);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::MatrixComplex.[]

  call-seq:
    [](i, j) -> std::complex< double >

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_MatrixComplex___getitem__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  std::complex< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","__getitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = RubyEigen_MatrixXcd___getitem__(arg1,arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::MatrixComplex.[]=

  call-seq:
    []=(i, j, c)

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_MatrixComplex___setitem__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  int arg2 ;
  int arg3 ;
  std::complex< double > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  std::complex< double > val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","__setitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "std::complex< double >","__setitem__", 4, argv[2] ));
  } 
  arg4 = static_cast< std::complex< double > >(val4);
  {
    try {
      RubyEigen_MatrixXcd___setitem__(arg1,arg2,arg3,arg4);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_triu(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::MatrixXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","triu", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      result = RubyEigen_MatrixXcd_triu(arg1);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXcd(static_cast< const RubyEigen::MatrixXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXcd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_tril(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::MatrixXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","tril", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      result = RubyEigen_MatrixXcd_tril(arg1);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXcd(static_cast< const RubyEigen::MatrixXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXcd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_fullPivLu(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::FullPivLU< RubyEigen::MatrixXcd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","fullPivLu", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      result = RubyEigen_MatrixXcd_fullPivLu(arg1);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::FullPivLU< RubyEigen::MatrixXcd >(static_cast< const RubyEigen::FullPivLU< RubyEigen::MatrixXcd >& >(result))), SWIGTYPE_p_RubyEigen__FullPivLUT_RubyEigen__MatrixXcd_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_fullPivHouseholderQR(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXcd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","fullPivHouseholderQR", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      result = RubyEigen_MatrixXcd_fullPivHouseholderQR(arg1);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXcd >(static_cast< const RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXcd >& >(result))), SWIGTYPE_p_RubyEigen__FullPivHouseholderQRT_RubyEigen__MatrixXcd_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplex_svd(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixXcd *arg1 = (RubyEigen::MatrixXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::JacobiSVD< RubyEigen::MatrixXcd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixXcd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd *","svd", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp1);
  {
    try {
      result = RubyEigen_MatrixXcd_svd(arg1);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::JacobiSVD< RubyEigen::MatrixXcd >(static_cast< const RubyEigen::JacobiSVD< RubyEigen::MatrixXcd >& >(result))), SWIGTYPE_p_RubyEigen__JacobiSVDT_RubyEigen__MatrixXcd_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassVectorDouble;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_VectorDouble_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_VectorDouble_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_VectorDouble(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  RubyEigen::VectorXd *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","VectorXd", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (RubyEigen::VectorXd *)new RubyEigen::VectorXd(arg1);
      DATA_PTR(self) = result;
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_RubyEigen_VectorXd(void *self) {
    RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_VectorDouble_real(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::VectorXd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","real", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  {
    try {
      result = (arg1)->real();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXd(static_cast< const RubyEigen::VectorXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDouble_hasNaN(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","hasNaN", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  {
    try {
      result = (bool)(arg1)->hasNaN();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDouble_setRandom(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","setRandom", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  {
    try {
      (arg1)->setRandom();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDouble_setConstant(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","setConstant", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setConstant", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setConstant(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDouble_setIdentity(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","setIdentity", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  {
    try {
      (arg1)->setIdentity();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDouble_setOnes(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","setOnes", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  {
    try {
      (arg1)->setOnes();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDouble_setZero(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","setZero", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  {
    try {
      (arg1)->setZero();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDouble_cwiseSqrt(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::VectorXd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","cwiseSqrt", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  {
    try {
      result = (arg1)->cwiseSqrt();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXd(static_cast< const RubyEigen::VectorXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDouble_cwiseInverse(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::VectorXd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","cwiseInverse", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  {
    try {
      result = (arg1)->cwiseInverse();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXd(static_cast< const RubyEigen::VectorXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDouble_cwiseProduct(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  RubyEigen::VectorXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  RubyEigen::VectorXd result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","cwiseProduct", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::VectorXd &","cwiseProduct", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::VectorXd &","cwiseProduct", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::VectorXd * >(argp2);
  {
    try {
      result = (arg1)->cwiseProduct(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXd(static_cast< const RubyEigen::VectorXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDouble_cwiseQuotient(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  RubyEigen::VectorXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  RubyEigen::VectorXd result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","cwiseQuotient", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::VectorXd &","cwiseQuotient", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::VectorXd &","cwiseQuotient", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::VectorXd * >(argp2);
  {
    try {
      result = (arg1)->cwiseQuotient(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXd(static_cast< const RubyEigen::VectorXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDouble_cwiseEqual__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  RubyEigen::VectorXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  RubyEigen::MatrixBool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","cwiseEqual", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::VectorXd &","cwiseEqual", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::VectorXd &","cwiseEqual", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::VectorXd * >(argp2);
  {
    try {
      result = (arg1)->cwiseEqual(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixBool(static_cast< const RubyEigen::MatrixBool& >(result))), SWIGTYPE_p_MatrixT_bool_Dynamic_Dynamic_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDouble_cwiseEqual__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  RubyEigen::MatrixBool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","cwiseEqual", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","cwiseEqual", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (arg1)->cwiseEqual(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixBool(static_cast< const RubyEigen::MatrixBool& >(result))), SWIGTYPE_p_MatrixT_bool_Dynamic_Dynamic_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorDouble_cwiseEqual(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VectorDouble_cwiseEqual__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorDouble_cwiseEqual__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "VectorDouble.cwiseEqual", 
    "    RubyEigen::MatrixBool VectorDouble.cwiseEqual(RubyEigen::VectorXd &m)\n"
    "    RubyEigen::MatrixBool VectorDouble.cwiseEqual(double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDouble_cwiseNotEqual(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  RubyEigen::VectorXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  RubyEigen::MatrixBool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","cwiseNotEqual", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::VectorXd &","cwiseNotEqual", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::VectorXd &","cwiseNotEqual", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::VectorXd * >(argp2);
  {
    try {
      result = (arg1)->cwiseNotEqual(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixBool(static_cast< const RubyEigen::MatrixBool& >(result))), SWIGTYPE_p_MatrixT_bool_Dynamic_Dynamic_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::VectorDouble.+

  call-seq:
    +(m) -> RubyEigen::VectorXd

Add operator.
*/
SWIGINTERN VALUE
_wrap_VectorDouble___add__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  RubyEigen::VectorXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  RubyEigen::VectorXd result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::VectorXd const &","operator +", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::VectorXd const &","operator +", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::VectorXd * >(argp2);
  {
    try {
      result = (arg1)->operator +((RubyEigen::VectorXd const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXd(static_cast< const RubyEigen::VectorXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::VectorDouble.-

  call-seq:
    -(m) -> RubyEigen::VectorXd

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_VectorDouble___sub__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  RubyEigen::VectorXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  RubyEigen::VectorXd result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::VectorXd const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::VectorXd const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::VectorXd * >(argp2);
  {
    try {
      result = (arg1)->operator -((RubyEigen::VectorXd const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXd(static_cast< const RubyEigen::VectorXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::VectorDouble.-@

  call-seq:
    -@ -> RubyEigen::VectorXd

Negation operator.
*/
SWIGINTERN VALUE
_wrap_VectorDouble___neg__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::VectorXd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  {
    try {
      result = (arg1)->operator -();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXd(static_cast< const RubyEigen::VectorXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDouble___mul____SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  RubyEigen::VectorXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  RubyEigen::VectorXd result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::VectorXd const &","operator *", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::VectorXd const &","operator *", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::VectorXd * >(argp2);
  {
    try {
      result = (arg1)->operator *((RubyEigen::VectorXd const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXd(static_cast< const RubyEigen::VectorXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDouble___mul____SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  RubyEigen::MatrixXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd const &","operator *", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXd const &","operator *", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::MatrixXd * >(argp2);
  {
    try {
      result = (arg1)->operator *((RubyEigen::MatrixXd const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDouble___mul____SWIG_2(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  RubyEigen::VectorXd result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator *", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (arg1)->operator *(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXd(static_cast< const RubyEigen::VectorXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorDouble___mul__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VectorDouble___mul____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__MatrixXd, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VectorDouble___mul____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorDouble___mul____SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "VectorDouble.__mul__", 
    "    RubyEigen::VectorXd VectorDouble.__mul__(RubyEigen::VectorXd const &m)\n"
    "    RubyEigen::VectorXd VectorDouble.__mul__(RubyEigen::MatrixXd const &m)\n"
    "    RubyEigen::VectorXd VectorDouble.__mul__(double d)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDouble___div__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  RubyEigen::VectorXd result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","operator /", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator /", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (arg1)->operator /(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXd(static_cast< const RubyEigen::VectorXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::VectorDouble.==

  call-seq:
    ==(m) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_VectorDouble___eq__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  RubyEigen::VectorXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::VectorXd &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::VectorXd &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::VectorXd * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator ==(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDouble_isApprox__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  RubyEigen::VectorXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","isApprox", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::VectorXd &","isApprox", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::VectorXd &","isApprox", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::VectorXd * >(argp2);
  {
    try {
      result = (bool)(arg1)->isApprox(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDouble_isApprox__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  RubyEigen::VectorXd *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","isApprox", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::VectorXd &","isApprox", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::VectorXd &","isApprox", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::VectorXd * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","isApprox", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (bool)(arg1)->isApprox(*arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorDouble_isApprox(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VectorDouble_isApprox__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorDouble_isApprox__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "VectorDouble.isApprox", 
    "    bool VectorDouble.isApprox(RubyEigen::VectorXd &m)\n"
    "    bool VectorDouble.isApprox(RubyEigen::VectorXd &m, double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDouble_isApproxToConstant(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","isApproxToConstant", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","isApproxToConstant", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)(arg1)->isApproxToConstant(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDouble_isConstant(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","isConstant", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","isConstant", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)(arg1)->isConstant(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDouble_isMuchSmallerThan__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","isMuchSmallerThan", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","isMuchSmallerThan", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)(arg1)->isMuchSmallerThan(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDouble_isMuchSmallerThan__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","isMuchSmallerThan", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","isMuchSmallerThan", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","isMuchSmallerThan", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (bool)(arg1)->isMuchSmallerThan(arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDouble_isMuchSmallerThan__SWIG_2(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  RubyEigen::VectorXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","isMuchSmallerThan", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::VectorXd &","isMuchSmallerThan", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::VectorXd &","isMuchSmallerThan", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::VectorXd * >(argp2);
  {
    try {
      result = (bool)(arg1)->isMuchSmallerThan(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDouble_isMuchSmallerThan__SWIG_3(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  RubyEigen::VectorXd *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","isMuchSmallerThan", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::VectorXd &","isMuchSmallerThan", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::VectorXd &","isMuchSmallerThan", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::VectorXd * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","isMuchSmallerThan", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (bool)(arg1)->isMuchSmallerThan(*arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorDouble_isMuchSmallerThan(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VectorDouble_isMuchSmallerThan__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorDouble_isMuchSmallerThan__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorDouble_isMuchSmallerThan__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorDouble_isMuchSmallerThan__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "VectorDouble.isMuchSmallerThan", 
    "    bool VectorDouble.isMuchSmallerThan(double)\n"
    "    bool VectorDouble.isMuchSmallerThan(double, double)\n"
    "    bool VectorDouble.isMuchSmallerThan(RubyEigen::VectorXd &m)\n"
    "    bool VectorDouble.isMuchSmallerThan(RubyEigen::VectorXd &m, double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDouble_isOnes__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","isOnes", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  {
    try {
      result = (bool)(arg1)->isOnes();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDouble_isOnes__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","isOnes", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","isOnes", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)(arg1)->isOnes(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorDouble_isOnes(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VectorDouble_isOnes__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorDouble_isOnes__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "VectorDouble.isOnes", 
    "    bool VectorDouble.isOnes()\n"
    "    bool VectorDouble.isOnes(double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDouble_isZero__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","isZero", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  {
    try {
      result = (bool)(arg1)->isZero();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDouble_isZero__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","isZero", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","isZero", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)(arg1)->isZero(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorDouble_isZero(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VectorDouble_isZero__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorDouble_isZero__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "VectorDouble.isZero", 
    "    bool VectorDouble.isZero()\n"
    "    bool VectorDouble.isZero(double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDouble_adjoint(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::VectorXd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","adjoint", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  {
    try {
      result = (arg1)->adjoint();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXd(static_cast< const RubyEigen::VectorXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDouble_isOrthogonal__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  RubyEigen::VectorXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","isOrthogonal", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::VectorXd &","isOrthogonal", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::VectorXd &","isOrthogonal", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::VectorXd * >(argp2);
  {
    try {
      result = (bool)(arg1)->isOrthogonal(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDouble_isOrthogonal__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  RubyEigen::VectorXd *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","isOrthogonal", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::VectorXd &","isOrthogonal", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::VectorXd &","isOrthogonal", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::VectorXd * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","isOrthogonal", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (bool)(arg1)->isOrthogonal(*arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorDouble_isOrthogonal(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VectorDouble_isOrthogonal__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorDouble_isOrthogonal__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "VectorDouble.isOrthogonal", 
    "    bool VectorDouble.isOrthogonal(RubyEigen::VectorXd &v)\n"
    "    bool VectorDouble.isOrthogonal(RubyEigen::VectorXd &v, double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDouble_squaredNorm(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","squaredNorm", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  {
    try {
      result = (double)(arg1)->squaredNorm();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDouble_stableNorm(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","stableNorm", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  {
    try {
      result = (double)(arg1)->stableNorm();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDouble_segment(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  RubyEigen::VectorXd result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","segment", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","segment", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","segment", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (arg1)->segment(arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXd(static_cast< const RubyEigen::VectorXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::VectorDouble.[]

  call-seq:
    [](i) -> double

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_VectorDouble___getitem__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)RubyEigen_VectorXd___getitem__(arg1,arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::VectorDouble.[]=

  call-seq:
    []=(i, c)

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_VectorDouble___setitem__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","__setitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      RubyEigen_VectorXd___setitem__(arg1,arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::VectorDouble.to_s

  call-seq:
    to_s -> std::string

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_VectorDouble_to_s(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXd *arg1 = (RubyEigen::VectorXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXd *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXd * >(argp1);
  {
    try {
      result = RubyEigen_VectorXd_to_s(arg1);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassVectorComplex;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_VectorComplex_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_VectorComplex_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_VectorComplex(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  RubyEigen::VectorXcd *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","VectorXcd", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (RubyEigen::VectorXcd *)new RubyEigen::VectorXcd(arg1);
      DATA_PTR(self) = result;
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_RubyEigen_VectorXcd(void *self) {
    RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_VectorComplex_imag(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::VectorXd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","imag", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  {
    try {
      result = (arg1)->imag();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXd(static_cast< const RubyEigen::VectorXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorComplex_real(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::VectorXd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","real", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  {
    try {
      result = (arg1)->real();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXd(static_cast< const RubyEigen::VectorXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorComplex_hasNaN(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","hasNaN", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  {
    try {
      result = (bool)(arg1)->hasNaN();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorComplex_setRandom(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","setRandom", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  {
    try {
      (arg1)->setRandom();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorComplex_setConstant(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  std::complex< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","setConstant", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::complex< double >","setConstant", 2, argv[0] ));
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  {
    try {
      (arg1)->setConstant(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorComplex_setIdentity(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","setIdentity", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  {
    try {
      (arg1)->setIdentity();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorComplex_setOnes(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","setOnes", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  {
    try {
      (arg1)->setOnes();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorComplex_setZero(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","setZero", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  {
    try {
      (arg1)->setZero();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorComplex_cwiseSqrt(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::VectorXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","cwiseSqrt", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  {
    try {
      result = (arg1)->cwiseSqrt();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXcd(static_cast< const RubyEigen::VectorXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorComplex_cwiseInverse(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::VectorXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","cwiseInverse", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  {
    try {
      result = (arg1)->cwiseInverse();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXcd(static_cast< const RubyEigen::VectorXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorComplex_cwiseProduct(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  RubyEigen::VectorXcd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  RubyEigen::VectorXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","cwiseProduct", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd &","cwiseProduct", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::VectorXcd &","cwiseProduct", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::VectorXcd * >(argp2);
  {
    try {
      result = (arg1)->cwiseProduct(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXcd(static_cast< const RubyEigen::VectorXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorComplex_cwiseQuotient(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  RubyEigen::VectorXcd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  RubyEigen::VectorXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","cwiseQuotient", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd &","cwiseQuotient", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::VectorXcd &","cwiseQuotient", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::VectorXcd * >(argp2);
  {
    try {
      result = (arg1)->cwiseQuotient(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXcd(static_cast< const RubyEigen::VectorXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorComplex_cwiseEqual__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  RubyEigen::VectorXcd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  RubyEigen::MatrixBool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","cwiseEqual", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd &","cwiseEqual", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::VectorXcd &","cwiseEqual", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::VectorXcd * >(argp2);
  {
    try {
      result = (arg1)->cwiseEqual(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixBool(static_cast< const RubyEigen::MatrixBool& >(result))), SWIGTYPE_p_MatrixT_bool_Dynamic_Dynamic_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorComplex_cwiseEqual__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  std::complex< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  RubyEigen::MatrixBool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","cwiseEqual", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::complex< double >","cwiseEqual", 2, argv[0] ));
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  {
    try {
      result = (arg1)->cwiseEqual(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixBool(static_cast< const RubyEigen::MatrixBool& >(result))), SWIGTYPE_p_MatrixT_bool_Dynamic_Dynamic_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorComplex_cwiseEqual(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VectorComplex_cwiseEqual__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorComplex_cwiseEqual__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "VectorComplex.cwiseEqual", 
    "    RubyEigen::MatrixBool VectorComplex.cwiseEqual(RubyEigen::VectorXcd &m)\n"
    "    RubyEigen::MatrixBool VectorComplex.cwiseEqual(std::complex< double >)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorComplex_cwiseNotEqual(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  RubyEigen::VectorXcd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  RubyEigen::MatrixBool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","cwiseNotEqual", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd &","cwiseNotEqual", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::VectorXcd &","cwiseNotEqual", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::VectorXcd * >(argp2);
  {
    try {
      result = (arg1)->cwiseNotEqual(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixBool(static_cast< const RubyEigen::MatrixBool& >(result))), SWIGTYPE_p_MatrixT_bool_Dynamic_Dynamic_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::VectorComplex.+

  call-seq:
    +(m) -> RubyEigen::VectorXcd

Add operator.
*/
SWIGINTERN VALUE
_wrap_VectorComplex___add__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  RubyEigen::VectorXcd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  RubyEigen::VectorXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd const &","operator +", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::VectorXcd const &","operator +", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::VectorXcd * >(argp2);
  {
    try {
      result = (arg1)->operator +((RubyEigen::VectorXcd const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXcd(static_cast< const RubyEigen::VectorXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::VectorComplex.-

  call-seq:
    -(m) -> RubyEigen::VectorXcd

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_VectorComplex___sub__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  RubyEigen::VectorXcd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  RubyEigen::VectorXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::VectorXcd const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::VectorXcd * >(argp2);
  {
    try {
      result = (arg1)->operator -((RubyEigen::VectorXcd const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXcd(static_cast< const RubyEigen::VectorXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::VectorComplex.-@

  call-seq:
    -@ -> RubyEigen::VectorXcd

Negation operator.
*/
SWIGINTERN VALUE
_wrap_VectorComplex___neg__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::VectorXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  {
    try {
      result = (arg1)->operator -();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXcd(static_cast< const RubyEigen::VectorXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorComplex___mul____SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  RubyEigen::VectorXcd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  RubyEigen::VectorXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd const &","operator *", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::VectorXcd const &","operator *", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::VectorXcd * >(argp2);
  {
    try {
      result = (arg1)->operator *((RubyEigen::VectorXcd const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXcd(static_cast< const RubyEigen::VectorXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorComplex___mul____SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  RubyEigen::MatrixXcd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  RubyEigen::MatrixXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixXcd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd const &","operator *", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXcd const &","operator *", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp2);
  {
    try {
      result = (arg1)->operator *((RubyEigen::MatrixXcd const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXcd(static_cast< const RubyEigen::MatrixXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXcd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorComplex___mul____SWIG_2(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  std::complex< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  RubyEigen::VectorXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::complex< double >","operator *", 2, argv[0] ));
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  {
    try {
      result = (arg1)->operator *(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXcd(static_cast< const RubyEigen::VectorXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorComplex___mul__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VectorComplex___mul____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__MatrixXcd, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VectorComplex___mul____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorComplex___mul____SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "VectorComplex.__mul__", 
    "    RubyEigen::VectorXcd VectorComplex.__mul__(RubyEigen::VectorXcd const &m)\n"
    "    RubyEigen::VectorXcd VectorComplex.__mul__(RubyEigen::MatrixXcd const &m)\n"
    "    RubyEigen::VectorXcd VectorComplex.__mul__(std::complex< double > d)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorComplex___div__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  std::complex< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  RubyEigen::VectorXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","operator /", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::complex< double >","operator /", 2, argv[0] ));
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  {
    try {
      result = (arg1)->operator /(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXcd(static_cast< const RubyEigen::VectorXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::VectorComplex.==

  call-seq:
    ==(m) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_VectorComplex___eq__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  RubyEigen::VectorXcd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::VectorXcd &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::VectorXcd * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator ==(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorComplex_isApprox__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  RubyEigen::VectorXcd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","isApprox", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd &","isApprox", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::VectorXcd &","isApprox", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::VectorXcd * >(argp2);
  {
    try {
      result = (bool)(arg1)->isApprox(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorComplex_isApprox__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  RubyEigen::VectorXcd *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","isApprox", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd &","isApprox", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::VectorXcd &","isApprox", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::VectorXcd * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","isApprox", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (bool)(arg1)->isApprox(*arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorComplex_isApprox(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VectorComplex_isApprox__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorComplex_isApprox__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "VectorComplex.isApprox", 
    "    bool VectorComplex.isApprox(RubyEigen::VectorXcd &m)\n"
    "    bool VectorComplex.isApprox(RubyEigen::VectorXcd &m, double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorComplex_isApproxToConstant(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  std::complex< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","isApproxToConstant", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::complex< double >","isApproxToConstant", 2, argv[0] ));
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  {
    try {
      result = (bool)(arg1)->isApproxToConstant(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorComplex_isConstant(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  std::complex< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","isConstant", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::complex< double >","isConstant", 2, argv[0] ));
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  {
    try {
      result = (bool)(arg1)->isConstant(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorComplex_isMuchSmallerThan__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","isMuchSmallerThan", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","isMuchSmallerThan", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)(arg1)->isMuchSmallerThan(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorComplex_isMuchSmallerThan__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","isMuchSmallerThan", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","isMuchSmallerThan", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","isMuchSmallerThan", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (bool)(arg1)->isMuchSmallerThan(arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorComplex_isMuchSmallerThan__SWIG_2(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  RubyEigen::VectorXcd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","isMuchSmallerThan", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd &","isMuchSmallerThan", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::VectorXcd &","isMuchSmallerThan", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::VectorXcd * >(argp2);
  {
    try {
      result = (bool)(arg1)->isMuchSmallerThan(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorComplex_isMuchSmallerThan__SWIG_3(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  RubyEigen::VectorXcd *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","isMuchSmallerThan", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd &","isMuchSmallerThan", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::VectorXcd &","isMuchSmallerThan", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::VectorXcd * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","isMuchSmallerThan", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (bool)(arg1)->isMuchSmallerThan(*arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorComplex_isMuchSmallerThan(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VectorComplex_isMuchSmallerThan__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorComplex_isMuchSmallerThan__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorComplex_isMuchSmallerThan__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorComplex_isMuchSmallerThan__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "VectorComplex.isMuchSmallerThan", 
    "    bool VectorComplex.isMuchSmallerThan(double)\n"
    "    bool VectorComplex.isMuchSmallerThan(double, double)\n"
    "    bool VectorComplex.isMuchSmallerThan(RubyEigen::VectorXcd &m)\n"
    "    bool VectorComplex.isMuchSmallerThan(RubyEigen::VectorXcd &m, double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorComplex_isOnes__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","isOnes", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  {
    try {
      result = (bool)(arg1)->isOnes();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorComplex_isOnes__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","isOnes", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","isOnes", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)(arg1)->isOnes(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorComplex_isOnes(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VectorComplex_isOnes__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorComplex_isOnes__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "VectorComplex.isOnes", 
    "    bool VectorComplex.isOnes()\n"
    "    bool VectorComplex.isOnes(double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorComplex_isZero__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","isZero", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  {
    try {
      result = (bool)(arg1)->isZero();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorComplex_isZero__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","isZero", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","isZero", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)(arg1)->isZero(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorComplex_isZero(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VectorComplex_isZero__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorComplex_isZero__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "VectorComplex.isZero", 
    "    bool VectorComplex.isZero()\n"
    "    bool VectorComplex.isZero(double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorComplex_adjoint(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::VectorXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","adjoint", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  {
    try {
      result = (arg1)->adjoint();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXcd(static_cast< const RubyEigen::VectorXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorComplex_isOrthogonal__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  RubyEigen::VectorXcd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","isOrthogonal", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd &","isOrthogonal", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::VectorXcd &","isOrthogonal", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::VectorXcd * >(argp2);
  {
    try {
      result = (bool)(arg1)->isOrthogonal(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorComplex_isOrthogonal__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  RubyEigen::VectorXcd *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","isOrthogonal", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd &","isOrthogonal", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::VectorXcd &","isOrthogonal", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::VectorXcd * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","isOrthogonal", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (bool)(arg1)->isOrthogonal(*arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorComplex_isOrthogonal(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VectorComplex_isOrthogonal__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorComplex_isOrthogonal__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "VectorComplex.isOrthogonal", 
    "    bool VectorComplex.isOrthogonal(RubyEigen::VectorXcd &v)\n"
    "    bool VectorComplex.isOrthogonal(RubyEigen::VectorXcd &v, double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorComplex_squaredNorm(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","squaredNorm", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  {
    try {
      result = (double)(arg1)->squaredNorm();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorComplex_stableNorm(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","stableNorm", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  {
    try {
      result = (double)(arg1)->stableNorm();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorComplex_segment(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  RubyEigen::VectorXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","segment", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","segment", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","segment", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (arg1)->segment(arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXcd(static_cast< const RubyEigen::VectorXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::VectorComplex.[]

  call-seq:
    [](i) -> std::complex< double >

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_VectorComplex___getitem__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::complex< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = RubyEigen_VectorXcd___getitem__(arg1,arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::VectorComplex.[]=

  call-seq:
    []=(i, c)

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_VectorComplex___setitem__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  int arg2 ;
  std::complex< double > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::complex< double > val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::complex< double >","__setitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::complex< double > >(val3);
  {
    try {
      RubyEigen_VectorXcd___setitem__(arg1,arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::VectorComplex.to_s

  call-seq:
    to_s -> std::string

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_VectorComplex_to_s(int argc, VALUE *argv, VALUE self) {
  RubyEigen::VectorXcd *arg1 = (RubyEigen::VectorXcd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::VectorXcd *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::VectorXcd * >(argp1);
  {
    try {
      result = RubyEigen_VectorXcd_to_s(arg1);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassMatrixBool;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_MatrixBool_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_MatrixBool_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_MatrixT_bool_Dynamic_Dynamic_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_MatrixBool(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  RubyEigen::MatrixBool *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","MatrixBool", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","MatrixBool", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (RubyEigen::MatrixBool *)new RubyEigen::MatrixBool(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_RubyEigen_MatrixBool(void *self) {
    RubyEigen::MatrixBool *arg1 = (RubyEigen::MatrixBool *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_MatrixBool_all(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixBool *arg1 = (RubyEigen::MatrixBool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MatrixT_bool_Dynamic_Dynamic_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixBool *","all", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixBool * >(argp1);
  {
    try {
      result = (bool)(arg1)->all();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixBool_any(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixBool *arg1 = (RubyEigen::MatrixBool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MatrixT_bool_Dynamic_Dynamic_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixBool *","any", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixBool * >(argp1);
  {
    try {
      result = (bool)(arg1)->any();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixBool_count(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixBool *arg1 = (RubyEigen::MatrixBool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MatrixT_bool_Dynamic_Dynamic_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixBool *","count", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixBool * >(argp1);
  {
    try {
      result = (bool)(arg1)->count();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::MatrixBool.select

  call-seq:
    select(a, b) -> MatrixDouble

Iterate thru each element in the MatrixBool and select those that match a condition.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_MatrixBool_select(int argc, VALUE *argv, VALUE self) {
  RubyEigen::MatrixBool *arg1 = (RubyEigen::MatrixBool *) 0 ;
  RubyEigen::MatrixXd *arg2 = 0 ;
  RubyEigen::MatrixXd *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MatrixT_bool_Dynamic_Dynamic_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::MatrixBool *","select", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::MatrixBool * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd const &","select", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXd const &","select", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::MatrixXd * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_RubyEigen__MatrixXd,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd const &","select", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXd const &","select", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< RubyEigen::MatrixXd * >(argp3);
  {
    try {
      result = RubyEigen_MatrixBool_select(arg1,(RubyEigen::MatrixXd const &)*arg2,(RubyEigen::MatrixXd const &)*arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassFullPivLUDouble;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_FullPivLUDouble_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_FullPivLUDouble_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_RubyEigen__FullPivLUT_RubyEigen__MatrixXd_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_FullPivLUDouble(int argc, VALUE *argv, VALUE self) {
  RubyEigen::FullPivLU< RubyEigen::MatrixXd > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (RubyEigen::FullPivLU< RubyEigen::MatrixXd > *)new RubyEigen::FullPivLU< RubyEigen::MatrixXd >();
      DATA_PTR(self) = result;
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_RubyEigen_FullPivLU_Sl_RubyEigen_MatrixXd_Sg_(void *self) {
    RubyEigen::FullPivLU< RubyEigen::MatrixXd > *arg1 = (RubyEigen::FullPivLU< RubyEigen::MatrixXd > *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_FullPivLUDouble_permutationP(int argc, VALUE *argv, VALUE self) {
  RubyEigen::FullPivLU< RubyEigen::MatrixXd > *arg1 = (RubyEigen::FullPivLU< RubyEigen::MatrixXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__FullPivLUT_RubyEigen__MatrixXd_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::FullPivLU< RubyEigen::MatrixXd > *","permutationP", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::FullPivLU< RubyEigen::MatrixXd > * >(argp1);
  {
    try {
      result = (arg1)->permutationP();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FullPivLUDouble_permutationQ(int argc, VALUE *argv, VALUE self) {
  RubyEigen::FullPivLU< RubyEigen::MatrixXd > *arg1 = (RubyEigen::FullPivLU< RubyEigen::MatrixXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__FullPivLUT_RubyEigen__MatrixXd_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::FullPivLU< RubyEigen::MatrixXd > *","permutationQ", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::FullPivLU< RubyEigen::MatrixXd > * >(argp1);
  {
    try {
      result = (arg1)->permutationQ();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FullPivLUDouble_solve(int argc, VALUE *argv, VALUE self) {
  RubyEigen::FullPivLU< RubyEigen::MatrixXd > *arg1 = (RubyEigen::FullPivLU< RubyEigen::MatrixXd > *) 0 ;
  RubyEigen::MatrixXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__FullPivLUT_RubyEigen__MatrixXd_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::FullPivLU< RubyEigen::MatrixXd > *","solve", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::FullPivLU< RubyEigen::MatrixXd > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd &","solve", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXd &","solve", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::MatrixXd * >(argp2);
  {
    try {
      result = (arg1)->solve(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FullPivLUDouble_u(int argc, VALUE *argv, VALUE self) {
  RubyEigen::FullPivLU< RubyEigen::MatrixXd > *arg1 = (RubyEigen::FullPivLU< RubyEigen::MatrixXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__FullPivLUT_RubyEigen__MatrixXd_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::FullPivLU< RubyEigen::MatrixXd > *","u", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::FullPivLU< RubyEigen::MatrixXd > * >(argp1);
  {
    try {
      result = RubyEigen_FullPivLU_Sl_RubyEigen_MatrixXd_Sg__u(arg1);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FullPivLUDouble_l(int argc, VALUE *argv, VALUE self) {
  RubyEigen::FullPivLU< RubyEigen::MatrixXd > *arg1 = (RubyEigen::FullPivLU< RubyEigen::MatrixXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__FullPivLUT_RubyEigen__MatrixXd_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::FullPivLU< RubyEigen::MatrixXd > *","l", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::FullPivLU< RubyEigen::MatrixXd > * >(argp1);
  {
    try {
      result = RubyEigen_FullPivLU_Sl_RubyEigen_MatrixXd_Sg__l(arg1);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassFullPivLUComplex;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_FullPivLUComplex_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_FullPivLUComplex_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_RubyEigen__FullPivLUT_RubyEigen__MatrixXcd_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_FullPivLUComplex(int argc, VALUE *argv, VALUE self) {
  RubyEigen::FullPivLU< RubyEigen::MatrixXcd > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (RubyEigen::FullPivLU< RubyEigen::MatrixXcd > *)new RubyEigen::FullPivLU< RubyEigen::MatrixXcd >();
      DATA_PTR(self) = result;
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_RubyEigen_FullPivLU_Sl_RubyEigen_MatrixXcd_Sg_(void *self) {
    RubyEigen::FullPivLU< RubyEigen::MatrixXcd > *arg1 = (RubyEigen::FullPivLU< RubyEigen::MatrixXcd > *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_FullPivLUComplex_permutationP(int argc, VALUE *argv, VALUE self) {
  RubyEigen::FullPivLU< RubyEigen::MatrixXcd > *arg1 = (RubyEigen::FullPivLU< RubyEigen::MatrixXcd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::MatrixXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__FullPivLUT_RubyEigen__MatrixXcd_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::FullPivLU< RubyEigen::MatrixXcd > *","permutationP", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::FullPivLU< RubyEigen::MatrixXcd > * >(argp1);
  {
    try {
      result = (arg1)->permutationP();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXcd(static_cast< const RubyEigen::MatrixXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXcd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FullPivLUComplex_permutationQ(int argc, VALUE *argv, VALUE self) {
  RubyEigen::FullPivLU< RubyEigen::MatrixXcd > *arg1 = (RubyEigen::FullPivLU< RubyEigen::MatrixXcd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::MatrixXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__FullPivLUT_RubyEigen__MatrixXcd_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::FullPivLU< RubyEigen::MatrixXcd > *","permutationQ", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::FullPivLU< RubyEigen::MatrixXcd > * >(argp1);
  {
    try {
      result = (arg1)->permutationQ();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXcd(static_cast< const RubyEigen::MatrixXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXcd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FullPivLUComplex_solve(int argc, VALUE *argv, VALUE self) {
  RubyEigen::FullPivLU< RubyEigen::MatrixXcd > *arg1 = (RubyEigen::FullPivLU< RubyEigen::MatrixXcd > *) 0 ;
  RubyEigen::MatrixXcd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  RubyEigen::MatrixXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__FullPivLUT_RubyEigen__MatrixXcd_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::FullPivLU< RubyEigen::MatrixXcd > *","solve", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::FullPivLU< RubyEigen::MatrixXcd > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixXcd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::MatrixXcd &","solve", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXcd &","solve", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::MatrixXcd * >(argp2);
  {
    try {
      result = (arg1)->solve(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXcd(static_cast< const RubyEigen::MatrixXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXcd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FullPivLUComplex_u(int argc, VALUE *argv, VALUE self) {
  RubyEigen::FullPivLU< RubyEigen::MatrixXcd > *arg1 = (RubyEigen::FullPivLU< RubyEigen::MatrixXcd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::MatrixXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__FullPivLUT_RubyEigen__MatrixXcd_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::FullPivLU< RubyEigen::MatrixXcd > *","u", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::FullPivLU< RubyEigen::MatrixXcd > * >(argp1);
  {
    try {
      result = RubyEigen_FullPivLU_Sl_RubyEigen_MatrixXcd_Sg__u(arg1);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXcd(static_cast< const RubyEigen::MatrixXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXcd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FullPivLUComplex_l(int argc, VALUE *argv, VALUE self) {
  RubyEigen::FullPivLU< RubyEigen::MatrixXcd > *arg1 = (RubyEigen::FullPivLU< RubyEigen::MatrixXcd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::MatrixXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__FullPivLUT_RubyEigen__MatrixXcd_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::FullPivLU< RubyEigen::MatrixXcd > *","l", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::FullPivLU< RubyEigen::MatrixXcd > * >(argp1);
  {
    try {
      result = RubyEigen_FullPivLU_Sl_RubyEigen_MatrixXcd_Sg__l(arg1);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXcd(static_cast< const RubyEigen::MatrixXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXcd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassPartialPivLUDouble;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_PartialPivLUDouble_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_PartialPivLUDouble_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_RubyEigen__PartialPivLUT_RubyEigen__MatrixXd_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_PartialPivLUDouble(int argc, VALUE *argv, VALUE self) {
  RubyEigen::PartialPivLU< RubyEigen::MatrixXd > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (RubyEigen::PartialPivLU< RubyEigen::MatrixXd > *)new RubyEigen::PartialPivLU< RubyEigen::MatrixXd >();
      DATA_PTR(self) = result;
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_RubyEigen_PartialPivLU_Sl_RubyEigen_MatrixXd_Sg_(void *self) {
    RubyEigen::PartialPivLU< RubyEigen::MatrixXd > *arg1 = (RubyEigen::PartialPivLU< RubyEigen::MatrixXd > *)self;
    delete arg1;
}

static swig_class SwigClassPartialPivLUComplex;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_PartialPivLUComplex_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_PartialPivLUComplex_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_RubyEigen__PartialPivLUT_RubyEigen__MatrixXcd_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_PartialPivLUComplex(int argc, VALUE *argv, VALUE self) {
  RubyEigen::PartialPivLU< RubyEigen::MatrixXcd > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (RubyEigen::PartialPivLU< RubyEigen::MatrixXcd > *)new RubyEigen::PartialPivLU< RubyEigen::MatrixXcd >();
      DATA_PTR(self) = result;
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_RubyEigen_PartialPivLU_Sl_RubyEigen_MatrixXcd_Sg_(void *self) {
    RubyEigen::PartialPivLU< RubyEigen::MatrixXcd > *arg1 = (RubyEigen::PartialPivLU< RubyEigen::MatrixXcd > *)self;
    delete arg1;
}

static swig_class SwigClassFullPivHouseholderQRDouble;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_FullPivHouseholderQRDouble_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_FullPivHouseholderQRDouble_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_RubyEigen__FullPivHouseholderQRT_RubyEigen__MatrixXd_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_FullPivHouseholderQRDouble(int argc, VALUE *argv, VALUE self) {
  RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXd > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXd > *)new RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXd >();
      DATA_PTR(self) = result;
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_RubyEigen_FullPivHouseholderQR_Sl_RubyEigen_MatrixXd_Sg_(void *self) {
    RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXd > *arg1 = (RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXd > *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_FullPivHouseholderQRDouble_colsPermutation(int argc, VALUE *argv, VALUE self) {
  RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXd > *arg1 = (RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__FullPivHouseholderQRT_RubyEigen__MatrixXd_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXd > *","colsPermutation", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXd > * >(argp1);
  {
    try {
      result = (arg1)->colsPermutation();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FullPivHouseholderQRDouble_matrixQ(int argc, VALUE *argv, VALUE self) {
  RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXd > *arg1 = (RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__FullPivHouseholderQRT_RubyEigen__MatrixXd_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXd > *","matrixQ", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXd > * >(argp1);
  {
    try {
      result = (arg1)->matrixQ();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FullPivHouseholderQRDouble_r(int argc, VALUE *argv, VALUE self) {
  RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXd > *arg1 = (RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__FullPivHouseholderQRT_RubyEigen__MatrixXd_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXd > *","r", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXd > * >(argp1);
  {
    try {
      result = RubyEigen_FullPivHouseholderQR_Sl_RubyEigen_MatrixXd_Sg__r(arg1);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassFullPivHouseholderQRComplex;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_FullPivHouseholderQRComplex_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_FullPivHouseholderQRComplex_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_RubyEigen__FullPivHouseholderQRT_RubyEigen__MatrixXcd_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_FullPivHouseholderQRComplex(int argc, VALUE *argv, VALUE self) {
  RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXcd > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXcd > *)new RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXcd >();
      DATA_PTR(self) = result;
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_RubyEigen_FullPivHouseholderQR_Sl_RubyEigen_MatrixXcd_Sg_(void *self) {
    RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXcd > *arg1 = (RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXcd > *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_FullPivHouseholderQRComplex_colsPermutation(int argc, VALUE *argv, VALUE self) {
  RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXcd > *arg1 = (RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXcd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::MatrixXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__FullPivHouseholderQRT_RubyEigen__MatrixXcd_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXcd > *","colsPermutation", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXcd > * >(argp1);
  {
    try {
      result = (arg1)->colsPermutation();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXcd(static_cast< const RubyEigen::MatrixXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXcd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FullPivHouseholderQRComplex_matrixQ(int argc, VALUE *argv, VALUE self) {
  RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXcd > *arg1 = (RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXcd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::MatrixXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__FullPivHouseholderQRT_RubyEigen__MatrixXcd_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXcd > *","matrixQ", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXcd > * >(argp1);
  {
    try {
      result = (arg1)->matrixQ();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXcd(static_cast< const RubyEigen::MatrixXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXcd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FullPivHouseholderQRComplex_r(int argc, VALUE *argv, VALUE self) {
  RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXcd > *arg1 = (RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXcd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::MatrixXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__FullPivHouseholderQRT_RubyEigen__MatrixXcd_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXcd > *","r", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXcd > * >(argp1);
  {
    try {
      result = RubyEigen_FullPivHouseholderQR_Sl_RubyEigen_MatrixXcd_Sg__r(arg1);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXcd(static_cast< const RubyEigen::MatrixXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXcd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassJacobiSVDDouble;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_JacobiSVDDouble_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_JacobiSVDDouble_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_RubyEigen__JacobiSVDT_RubyEigen__MatrixXd_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_JacobiSVDDouble(int argc, VALUE *argv, VALUE self) {
  RubyEigen::JacobiSVD< RubyEigen::MatrixXd > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (RubyEigen::JacobiSVD< RubyEigen::MatrixXd > *)new RubyEigen::JacobiSVD< RubyEigen::MatrixXd >();
      DATA_PTR(self) = result;
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_RubyEigen_JacobiSVD_Sl_RubyEigen_MatrixXd_Sg_(void *self) {
    RubyEigen::JacobiSVD< RubyEigen::MatrixXd > *arg1 = (RubyEigen::JacobiSVD< RubyEigen::MatrixXd > *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_JacobiSVDDouble_matrixU(int argc, VALUE *argv, VALUE self) {
  RubyEigen::JacobiSVD< RubyEigen::MatrixXd > *arg1 = (RubyEigen::JacobiSVD< RubyEigen::MatrixXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__JacobiSVDT_RubyEigen__MatrixXd_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::JacobiSVD< RubyEigen::MatrixXd > *","matrixU", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::JacobiSVD< RubyEigen::MatrixXd > * >(argp1);
  {
    try {
      result = (arg1)->matrixU();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_JacobiSVDDouble_matrixV(int argc, VALUE *argv, VALUE self) {
  RubyEigen::JacobiSVD< RubyEigen::MatrixXd > *arg1 = (RubyEigen::JacobiSVD< RubyEigen::MatrixXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__JacobiSVDT_RubyEigen__MatrixXd_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::JacobiSVD< RubyEigen::MatrixXd > *","matrixV", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::JacobiSVD< RubyEigen::MatrixXd > * >(argp1);
  {
    try {
      result = (arg1)->matrixV();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_JacobiSVDDouble_singularValues(int argc, VALUE *argv, VALUE self) {
  RubyEigen::JacobiSVD< RubyEigen::MatrixXd > *arg1 = (RubyEigen::JacobiSVD< RubyEigen::MatrixXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::VectorXd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__JacobiSVDT_RubyEigen__MatrixXd_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::JacobiSVD< RubyEigen::MatrixXd > *","singularValues", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::JacobiSVD< RubyEigen::MatrixXd > * >(argp1);
  {
    try {
      result = (arg1)->singularValues();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXd(static_cast< const RubyEigen::VectorXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_JacobiSVDDouble_solve(int argc, VALUE *argv, VALUE self) {
  RubyEigen::JacobiSVD< RubyEigen::MatrixXd > *arg1 = (RubyEigen::JacobiSVD< RubyEigen::MatrixXd > *) 0 ;
  RubyEigen::VectorXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__JacobiSVDT_RubyEigen__MatrixXd_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::JacobiSVD< RubyEigen::MatrixXd > *","solve", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::JacobiSVD< RubyEigen::MatrixXd > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::VectorXd &","solve", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::VectorXd &","solve", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::VectorXd * >(argp2);
  {
    try {
      result = (arg1)->solve(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassJacobiSVDComplex;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_JacobiSVDComplex_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_JacobiSVDComplex_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_RubyEigen__JacobiSVDT_RubyEigen__MatrixXcd_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_JacobiSVDComplex(int argc, VALUE *argv, VALUE self) {
  RubyEigen::JacobiSVD< RubyEigen::MatrixXcd > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (RubyEigen::JacobiSVD< RubyEigen::MatrixXcd > *)new RubyEigen::JacobiSVD< RubyEigen::MatrixXcd >();
      DATA_PTR(self) = result;
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_RubyEigen_JacobiSVD_Sl_RubyEigen_MatrixXcd_Sg_(void *self) {
    RubyEigen::JacobiSVD< RubyEigen::MatrixXcd > *arg1 = (RubyEigen::JacobiSVD< RubyEigen::MatrixXcd > *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_JacobiSVDComplex_matrixU(int argc, VALUE *argv, VALUE self) {
  RubyEigen::JacobiSVD< RubyEigen::MatrixXcd > *arg1 = (RubyEigen::JacobiSVD< RubyEigen::MatrixXcd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::MatrixXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__JacobiSVDT_RubyEigen__MatrixXcd_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::JacobiSVD< RubyEigen::MatrixXcd > *","matrixU", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::JacobiSVD< RubyEigen::MatrixXcd > * >(argp1);
  {
    try {
      result = (arg1)->matrixU();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXcd(static_cast< const RubyEigen::MatrixXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXcd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_JacobiSVDComplex_matrixV(int argc, VALUE *argv, VALUE self) {
  RubyEigen::JacobiSVD< RubyEigen::MatrixXcd > *arg1 = (RubyEigen::JacobiSVD< RubyEigen::MatrixXcd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::MatrixXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__JacobiSVDT_RubyEigen__MatrixXcd_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::JacobiSVD< RubyEigen::MatrixXcd > *","matrixV", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::JacobiSVD< RubyEigen::MatrixXcd > * >(argp1);
  {
    try {
      result = (arg1)->matrixV();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXcd(static_cast< const RubyEigen::MatrixXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXcd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_JacobiSVDComplex_singularValues(int argc, VALUE *argv, VALUE self) {
  RubyEigen::JacobiSVD< RubyEigen::MatrixXcd > *arg1 = (RubyEigen::JacobiSVD< RubyEigen::MatrixXcd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::VectorXd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__JacobiSVDT_RubyEigen__MatrixXcd_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::JacobiSVD< RubyEigen::MatrixXcd > *","singularValues", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::JacobiSVD< RubyEigen::MatrixXcd > * >(argp1);
  {
    try {
      result = (arg1)->singularValues();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VectorXd(static_cast< const RubyEigen::VectorXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_JacobiSVDComplex_solve(int argc, VALUE *argv, VALUE self) {
  RubyEigen::JacobiSVD< RubyEigen::MatrixXcd > *arg1 = (RubyEigen::JacobiSVD< RubyEigen::MatrixXcd > *) 0 ;
  RubyEigen::VectorXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  RubyEigen::MatrixXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__JacobiSVDT_RubyEigen__MatrixXcd_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::JacobiSVD< RubyEigen::MatrixXcd > *","solve", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::JacobiSVD< RubyEigen::MatrixXcd > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::VectorXd &","solve", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::VectorXd &","solve", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::VectorXd * >(argp2);
  {
    try {
      result = (arg1)->solve(*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXcd(static_cast< const RubyEigen::MatrixXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXcd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassLDLTDouble;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_LDLTDouble_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_LDLTDouble_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_RubyEigen__LDLTT_RubyEigen__MatrixXd_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_LDLTDouble(int argc, VALUE *argv, VALUE self) {
  RubyEigen::LDLT< RubyEigen::MatrixXd > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (RubyEigen::LDLT< RubyEigen::MatrixXd > *)new RubyEigen::LDLT< RubyEigen::MatrixXd >();
      DATA_PTR(self) = result;
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_RubyEigen_LDLT_Sl_RubyEigen_MatrixXd_Sg_(void *self) {
    RubyEigen::LDLT< RubyEigen::MatrixXd > *arg1 = (RubyEigen::LDLT< RubyEigen::MatrixXd > *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_LDLTDouble_matrixL(int argc, VALUE *argv, VALUE self) {
  RubyEigen::LDLT< RubyEigen::MatrixXd > *arg1 = (RubyEigen::LDLT< RubyEigen::MatrixXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__LDLTT_RubyEigen__MatrixXd_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::LDLT< RubyEigen::MatrixXd > *","matrixL", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::LDLT< RubyEigen::MatrixXd > * >(argp1);
  {
    try {
      result = (arg1)->matrixL();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LDLTDouble_vectorD(int argc, VALUE *argv, VALUE self) {
  RubyEigen::LDLT< RubyEigen::MatrixXd > *arg1 = (RubyEigen::LDLT< RubyEigen::MatrixXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::Matrix< RubyEigen::MatrixXd::Scalar,RubyEigen::Dynamic,1 > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__LDLTT_RubyEigen__MatrixXd_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::LDLT< RubyEigen::MatrixXd > *","vectorD", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::LDLT< RubyEigen::MatrixXd > * >(argp1);
  {
    try {
      result = (arg1)->vectorD();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::Matrix< RubyEigen::MatrixXd::Scalar,RubyEigen::Dynamic,1 >(static_cast< const RubyEigen::Matrix< RubyEigen::MatrixXd::Scalar,RubyEigen::Dynamic,1 >& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassLDLTComplex;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_LDLTComplex_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_LDLTComplex_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_RubyEigen__LDLTT_RubyEigen__MatrixXcd_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_LDLTComplex(int argc, VALUE *argv, VALUE self) {
  RubyEigen::LDLT< RubyEigen::MatrixXcd > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (RubyEigen::LDLT< RubyEigen::MatrixXcd > *)new RubyEigen::LDLT< RubyEigen::MatrixXcd >();
      DATA_PTR(self) = result;
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_RubyEigen_LDLT_Sl_RubyEigen_MatrixXcd_Sg_(void *self) {
    RubyEigen::LDLT< RubyEigen::MatrixXcd > *arg1 = (RubyEigen::LDLT< RubyEigen::MatrixXcd > *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_LDLTComplex_matrixL(int argc, VALUE *argv, VALUE self) {
  RubyEigen::LDLT< RubyEigen::MatrixXcd > *arg1 = (RubyEigen::LDLT< RubyEigen::MatrixXcd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::MatrixXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__LDLTT_RubyEigen__MatrixXcd_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::LDLT< RubyEigen::MatrixXcd > *","matrixL", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::LDLT< RubyEigen::MatrixXcd > * >(argp1);
  {
    try {
      result = (arg1)->matrixL();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXcd(static_cast< const RubyEigen::MatrixXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXcd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LDLTComplex_vectorD(int argc, VALUE *argv, VALUE self) {
  RubyEigen::LDLT< RubyEigen::MatrixXcd > *arg1 = (RubyEigen::LDLT< RubyEigen::MatrixXcd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::Matrix< RubyEigen::MatrixXcd::Scalar,RubyEigen::Dynamic,1 > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__LDLTT_RubyEigen__MatrixXcd_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::LDLT< RubyEigen::MatrixXcd > *","vectorD", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::LDLT< RubyEigen::MatrixXcd > * >(argp1);
  {
    try {
      result = (arg1)->vectorD();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::Matrix< RubyEigen::MatrixXcd::Scalar,RubyEigen::Dynamic,1 >(static_cast< const RubyEigen::Matrix< RubyEigen::MatrixXcd::Scalar,RubyEigen::Dynamic,1 >& >(result))), SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassLLTDouble;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_LLTDouble_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_LLTDouble_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_RubyEigen__LLTT_RubyEigen__MatrixXd_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_LLTDouble(int argc, VALUE *argv, VALUE self) {
  RubyEigen::LLT< RubyEigen::MatrixXd > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (RubyEigen::LLT< RubyEigen::MatrixXd > *)new RubyEigen::LLT< RubyEigen::MatrixXd >();
      DATA_PTR(self) = result;
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_RubyEigen_LLT_Sl_RubyEigen_MatrixXd_Sg_(void *self) {
    RubyEigen::LLT< RubyEigen::MatrixXd > *arg1 = (RubyEigen::LLT< RubyEigen::MatrixXd > *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_LLTDouble_matrixL(int argc, VALUE *argv, VALUE self) {
  RubyEigen::LLT< RubyEigen::MatrixXd > *arg1 = (RubyEigen::LLT< RubyEigen::MatrixXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__LLTT_RubyEigen__MatrixXd_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::LLT< RubyEigen::MatrixXd > *","matrixL", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::LLT< RubyEigen::MatrixXd > * >(argp1);
  {
    try {
      result = (arg1)->matrixL();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassLLTComplex;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_LLTComplex_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_LLTComplex_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_RubyEigen__LLTT_RubyEigen__MatrixXcd_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_LLTComplex(int argc, VALUE *argv, VALUE self) {
  RubyEigen::LLT< RubyEigen::MatrixXcd > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (RubyEigen::LLT< RubyEigen::MatrixXcd > *)new RubyEigen::LLT< RubyEigen::MatrixXcd >();
      DATA_PTR(self) = result;
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_RubyEigen_LLT_Sl_RubyEigen_MatrixXcd_Sg_(void *self) {
    RubyEigen::LLT< RubyEigen::MatrixXcd > *arg1 = (RubyEigen::LLT< RubyEigen::MatrixXcd > *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_LLTComplex_matrixL(int argc, VALUE *argv, VALUE self) {
  RubyEigen::LLT< RubyEigen::MatrixXcd > *arg1 = (RubyEigen::LLT< RubyEigen::MatrixXcd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RubyEigen::MatrixXcd result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__LLTT_RubyEigen__MatrixXcd_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::LLT< RubyEigen::MatrixXcd > *","matrixL", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::LLT< RubyEigen::MatrixXcd > * >(argp1);
  {
    try {
      result = (arg1)->matrixL();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXcd(static_cast< const RubyEigen::MatrixXcd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXcd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassMatrixDoubleCWise;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_MatrixDoubleCWise_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_MatrixDoubleCWise_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_RubyEigen__ArrayXXd);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_MatrixDoubleCWise(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  RubyEigen::ArrayXXd *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","ArrayXXd", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","ArrayXXd", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (RubyEigen::ArrayXXd *)new RubyEigen::ArrayXXd(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_RubyEigen_ArrayXXd(void *self) {
    RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_MatrixDoubleCWise_setOnes(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","setOnes", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  {
    try {
      (arg1)->setOnes();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise_setRandom(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","setRandom", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  {
    try {
      (arg1)->setRandom();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise_setZero(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","setZero", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  {
    try {
      (arg1)->setZero();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise_abs(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","abs", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  {
    try {
      result = (arg1)->abs();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXXd(static_cast< const RubyEigen::ArrayXXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise_abs2(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","abs2", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  {
    try {
      result = (arg1)->abs2();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXXd(static_cast< const RubyEigen::ArrayXXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise_square(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","square", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  {
    try {
      result = (arg1)->square();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXXd(static_cast< const RubyEigen::ArrayXXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise_cube(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","cube", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  {
    try {
      result = (arg1)->cube();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXXd(static_cast< const RubyEigen::ArrayXXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise_sin(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","sin", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  {
    try {
      result = (arg1)->sin();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXXd(static_cast< const RubyEigen::ArrayXXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise_cos(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","cos", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  {
    try {
      result = (arg1)->cos();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXXd(static_cast< const RubyEigen::ArrayXXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise_tan(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","tan", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  {
    try {
      result = (arg1)->tan();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXXd(static_cast< const RubyEigen::ArrayXXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise_asin(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","asin", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  {
    try {
      result = (arg1)->asin();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXXd(static_cast< const RubyEigen::ArrayXXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise_acos(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","acos", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  {
    try {
      result = (arg1)->acos();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXXd(static_cast< const RubyEigen::ArrayXXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise_log(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","log", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  {
    try {
      result = (arg1)->log();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXXd(static_cast< const RubyEigen::ArrayXXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise_exp(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","exp", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  {
    try {
      result = (arg1)->exp();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXXd(static_cast< const RubyEigen::ArrayXXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise_sqrt(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","sqrt", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  {
    try {
      result = (arg1)->sqrt();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXXd(static_cast< const RubyEigen::ArrayXXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise_pow(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","pow", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","pow", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (arg1)->pow(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXXd(static_cast< const RubyEigen::ArrayXXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::MatrixDoubleCWise.==

  call-seq:
    ==(arg2) -> RubyEigen::ArrayBool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_MatrixDoubleCWise___eq__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  RubyEigen::ArrayXXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  RubyEigen::ArrayBool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__ArrayXXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::ArrayXXd const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp2);
  {
    try {
      result = (arg1)->operator ==((RubyEigen::ArrayXXd const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayBool(static_cast< const RubyEigen::ArrayBool& >(result))), SWIGTYPE_p_ArrayT_bool_Dynamic_Dynamic_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise_max__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  RubyEigen::ArrayXXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","max", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__ArrayXXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd const &","max", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::ArrayXXd const &","max", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp2);
  {
    try {
      result = (arg1)->max((RubyEigen::ArrayXXd const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXXd(static_cast< const RubyEigen::ArrayXXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise_max__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","max", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","max", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (arg1)->max(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXXd(static_cast< const RubyEigen::ArrayXXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MatrixDoubleCWise_max(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__ArrayXXd, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MatrixDoubleCWise_max__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatrixDoubleCWise_max__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MatrixDoubleCWise.max", 
    "    RubyEigen::ArrayXXd MatrixDoubleCWise.max(RubyEigen::ArrayXXd const &)\n"
    "    RubyEigen::ArrayXXd MatrixDoubleCWise.max(double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise_min__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  RubyEigen::ArrayXXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","min", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__ArrayXXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd const &","min", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::ArrayXXd const &","min", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp2);
  {
    try {
      result = (arg1)->min((RubyEigen::ArrayXXd const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXXd(static_cast< const RubyEigen::ArrayXXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise_min__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","min", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","min", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (arg1)->min(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXXd(static_cast< const RubyEigen::ArrayXXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MatrixDoubleCWise_min(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__ArrayXXd, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MatrixDoubleCWise_min__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatrixDoubleCWise_min__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MatrixDoubleCWise.min", 
    "    RubyEigen::ArrayXXd MatrixDoubleCWise.min(RubyEigen::ArrayXXd const &)\n"
    "    RubyEigen::ArrayXXd MatrixDoubleCWise.min(double)\n");
  
  return Qnil;
}



/*
  Document-method: Eigen::MatrixDoubleCWise.+

  call-seq:
    +(arg2) -> MatrixDoubleCWise

Add operator.
*/
SWIGINTERN VALUE
_wrap_MatrixDoubleCWise___add__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  RubyEigen::ArrayXXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__ArrayXXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd const &","operator +", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::ArrayXXd const &","operator +", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp2);
  {
    try {
      result = (arg1)->operator +((RubyEigen::ArrayXXd const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXXd(static_cast< const RubyEigen::ArrayXXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::MatrixDoubleCWise.-

  call-seq:
    -(arg2) -> MatrixDoubleCWise

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_MatrixDoubleCWise___sub__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  RubyEigen::ArrayXXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__ArrayXXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::ArrayXXd const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp2);
  {
    try {
      result = (arg1)->operator -((RubyEigen::ArrayXXd const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXXd(static_cast< const RubyEigen::ArrayXXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise___mul____SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  RubyEigen::ArrayXXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__ArrayXXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd const &","operator *", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::ArrayXXd const &","operator *", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp2);
  {
    try {
      result = (arg1)->operator *((RubyEigen::ArrayXXd const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXXd(static_cast< const RubyEigen::ArrayXXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise___mul____SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator *", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (arg1)->operator *(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXXd(static_cast< const RubyEigen::ArrayXXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MatrixDoubleCWise___mul__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__ArrayXXd, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MatrixDoubleCWise___mul____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatrixDoubleCWise___mul____SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MatrixDoubleCWise.__mul__", 
    "    RubyEigen::ArrayXXd MatrixDoubleCWise.__mul__(RubyEigen::ArrayXXd const &)\n"
    "    RubyEigen::ArrayXXd MatrixDoubleCWise.__mul__(double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise___div____SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  RubyEigen::ArrayXXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","operator /", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__ArrayXXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd const &","operator /", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::ArrayXXd const &","operator /", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp2);
  {
    try {
      result = (arg1)->operator /((RubyEigen::ArrayXXd const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXXd(static_cast< const RubyEigen::ArrayXXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise___div____SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","operator /", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator /", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (arg1)->operator /(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXXd(static_cast< const RubyEigen::ArrayXXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MatrixDoubleCWise___div__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__ArrayXXd, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MatrixDoubleCWise___div____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatrixDoubleCWise___div____SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MatrixDoubleCWise.__div__", 
    "    RubyEigen::ArrayXXd MatrixDoubleCWise.__div__(RubyEigen::ArrayXXd const &)\n"
    "    RubyEigen::ArrayXXd MatrixDoubleCWise.__div__(double)\n");
  
  return Qnil;
}



/*
  Document-method: Eigen::MatrixDoubleCWise.-@

  call-seq:
    -@ -> MatrixDoubleCWise

Negation operator.
*/
SWIGINTERN VALUE
_wrap_MatrixDoubleCWise___neg__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  {
    try {
      result = (arg1)->operator -();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXXd(static_cast< const RubyEigen::ArrayXXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise_isApprox__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  RubyEigen::ArrayXXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","isApprox", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__ArrayXXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd const &","isApprox", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::ArrayXXd const &","isApprox", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp2);
  {
    try {
      result = (bool)(arg1)->isApprox((RubyEigen::ArrayXXd const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise_isApprox__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  RubyEigen::ArrayXXd *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","isApprox", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__ArrayXXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd const &","isApprox", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::ArrayXXd const &","isApprox", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","isApprox", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (bool)(arg1)->isApprox((RubyEigen::ArrayXXd const &)*arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MatrixDoubleCWise_isApprox(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__ArrayXXd, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MatrixDoubleCWise_isApprox__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__ArrayXXd, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MatrixDoubleCWise_isApprox__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MatrixDoubleCWise.isApprox", 
    "    bool MatrixDoubleCWise.isApprox(RubyEigen::ArrayXXd const &)\n"
    "    bool MatrixDoubleCWise.isApprox(RubyEigen::ArrayXXd const &, double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise_isApproxToConstant__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","isApproxToConstant", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","isApproxToConstant", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)(arg1)->isApproxToConstant(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise_isApproxToConstant__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","isApproxToConstant", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","isApproxToConstant", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","isApproxToConstant", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (bool)(arg1)->isApproxToConstant(arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MatrixDoubleCWise_isApproxToConstant(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatrixDoubleCWise_isApproxToConstant__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MatrixDoubleCWise_isApproxToConstant__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MatrixDoubleCWise.isApproxToConstant", 
    "    bool MatrixDoubleCWise.isApproxToConstant(double)\n"
    "    bool MatrixDoubleCWise.isApproxToConstant(double, double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise_isMuchSmallerThan__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","isMuchSmallerThan", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","isMuchSmallerThan", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)(arg1)->isMuchSmallerThan(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise_isMuchSmallerThan__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","isMuchSmallerThan", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","isMuchSmallerThan", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","isMuchSmallerThan", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (bool)(arg1)->isMuchSmallerThan(arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise_isMuchSmallerThan__SWIG_2(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  RubyEigen::ArrayXXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","isMuchSmallerThan", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__ArrayXXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd const &","isMuchSmallerThan", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::ArrayXXd const &","isMuchSmallerThan", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp2);
  {
    try {
      result = (bool)(arg1)->isMuchSmallerThan((RubyEigen::ArrayXXd const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise_isMuchSmallerThan__SWIG_3(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  RubyEigen::ArrayXXd *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","isMuchSmallerThan", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__ArrayXXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd const &","isMuchSmallerThan", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::ArrayXXd const &","isMuchSmallerThan", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","isMuchSmallerThan", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (bool)(arg1)->isMuchSmallerThan((RubyEigen::ArrayXXd const &)*arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MatrixDoubleCWise_isMuchSmallerThan(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__ArrayXXd, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MatrixDoubleCWise_isMuchSmallerThan__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatrixDoubleCWise_isMuchSmallerThan__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__ArrayXXd, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MatrixDoubleCWise_isMuchSmallerThan__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MatrixDoubleCWise_isMuchSmallerThan__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MatrixDoubleCWise.isMuchSmallerThan", 
    "    bool MatrixDoubleCWise.isMuchSmallerThan(double)\n"
    "    bool MatrixDoubleCWise.isMuchSmallerThan(double, double)\n"
    "    bool MatrixDoubleCWise.isMuchSmallerThan(RubyEigen::ArrayXXd const &)\n"
    "    bool MatrixDoubleCWise.isMuchSmallerThan(RubyEigen::ArrayXXd const &, double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise_isOnes__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","isOnes", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  {
    try {
      result = (bool)(arg1)->isOnes();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise_isOnes__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","isOnes", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","isOnes", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)(arg1)->isOnes(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MatrixDoubleCWise_isOnes(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MatrixDoubleCWise_isOnes__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatrixDoubleCWise_isOnes__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MatrixDoubleCWise.isOnes", 
    "    bool MatrixDoubleCWise.isOnes()\n"
    "    bool MatrixDoubleCWise.isOnes(double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise_isZero__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","isZero", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  {
    try {
      result = (bool)(arg1)->isZero();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise_isZero__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","isZero", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","isZero", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)(arg1)->isZero(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MatrixDoubleCWise_isZero(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MatrixDoubleCWise_isZero__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatrixDoubleCWise_isZero__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MatrixDoubleCWise.isZero", 
    "    bool MatrixDoubleCWise.isZero()\n"
    "    bool MatrixDoubleCWise.isZero(double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise_hasNaN(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","hasNaN", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  {
    try {
      result = (bool)(arg1)->hasNaN();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise_maxCoeff(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","maxCoeff", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  {
    try {
      result = (double)(arg1)->maxCoeff();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixDoubleCWise_minCoeff(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","minCoeff", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  {
    try {
      result = (double)(arg1)->minCoeff();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::MatrixDoubleCWise.[]

  call-seq:
    [](i, j) -> double

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_MatrixDoubleCWise___getitem__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","__getitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (double)RubyEigen_ArrayXXd___getitem__(arg1,arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::MatrixDoubleCWise.[]=

  call-seq:
    []=(i, j, c)

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_MatrixDoubleCWise___setitem__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXXd *arg1 = (RubyEigen::ArrayXXd *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXXd *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXXd * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","__setitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","__setitem__", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      RubyEigen_ArrayXXd___setitem__(arg1,arg2,arg3,arg4);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


static swig_class SwigClassVectorDoubleCWise;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_VectorDoubleCWise_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_VectorDoubleCWise_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_RubyEigen__ArrayXd);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_VectorDoubleCWise(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  RubyEigen::ArrayXd *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","ArrayXd", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (RubyEigen::ArrayXd *)new RubyEigen::ArrayXd(arg1);
      DATA_PTR(self) = result;
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_RubyEigen_ArrayXd(void *self) {
    RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_VectorDoubleCWise_setOnes(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","setOnes", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  {
    try {
      (arg1)->setOnes();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise_setRandom(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","setRandom", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  {
    try {
      (arg1)->setRandom();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise_setZero(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","setZero", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  {
    try {
      (arg1)->setZero();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise_abs(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","abs", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  {
    try {
      result = (arg1)->abs();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXd(static_cast< const RubyEigen::ArrayXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise_abs2(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","abs2", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  {
    try {
      result = (arg1)->abs2();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXd(static_cast< const RubyEigen::ArrayXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise_square(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","square", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  {
    try {
      result = (arg1)->square();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXd(static_cast< const RubyEigen::ArrayXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise_cube(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","cube", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  {
    try {
      result = (arg1)->cube();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXd(static_cast< const RubyEigen::ArrayXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise_sin(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","sin", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  {
    try {
      result = (arg1)->sin();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXd(static_cast< const RubyEigen::ArrayXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise_cos(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","cos", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  {
    try {
      result = (arg1)->cos();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXd(static_cast< const RubyEigen::ArrayXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise_tan(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","tan", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  {
    try {
      result = (arg1)->tan();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXd(static_cast< const RubyEigen::ArrayXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise_asin(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","asin", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  {
    try {
      result = (arg1)->asin();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXd(static_cast< const RubyEigen::ArrayXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise_acos(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","acos", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  {
    try {
      result = (arg1)->acos();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXd(static_cast< const RubyEigen::ArrayXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise_log(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","log", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  {
    try {
      result = (arg1)->log();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXd(static_cast< const RubyEigen::ArrayXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise_exp(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","exp", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  {
    try {
      result = (arg1)->exp();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXd(static_cast< const RubyEigen::ArrayXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise_sqrt(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","sqrt", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  {
    try {
      result = (arg1)->sqrt();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXd(static_cast< const RubyEigen::ArrayXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise_pow(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","pow", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","pow", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (arg1)->pow(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXd(static_cast< const RubyEigen::ArrayXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::VectorDoubleCWise.==

  call-seq:
    ==(arg2) -> RubyEigen::VecBoolCWise

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_VectorDoubleCWise___eq__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  RubyEigen::ArrayXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  RubyEigen::VecBoolCWise result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__ArrayXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::ArrayXd const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::ArrayXd * >(argp2);
  {
    try {
      result = (arg1)->operator ==((RubyEigen::ArrayXd const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::VecBoolCWise(static_cast< const RubyEigen::VecBoolCWise& >(result))), SWIGTYPE_p_ArrayT_bool_Dynamic_1_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise_max__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  RubyEigen::ArrayXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","max", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__ArrayXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd const &","max", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::ArrayXd const &","max", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::ArrayXd * >(argp2);
  {
    try {
      result = (arg1)->max((RubyEigen::ArrayXd const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXd(static_cast< const RubyEigen::ArrayXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise_max__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","max", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","max", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (arg1)->max(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXd(static_cast< const RubyEigen::ArrayXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorDoubleCWise_max(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__ArrayXd, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VectorDoubleCWise_max__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorDoubleCWise_max__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "VectorDoubleCWise.max", 
    "    RubyEigen::ArrayXd VectorDoubleCWise.max(RubyEigen::ArrayXd const &)\n"
    "    RubyEigen::ArrayXd VectorDoubleCWise.max(double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise_min__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  RubyEigen::ArrayXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","min", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__ArrayXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd const &","min", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::ArrayXd const &","min", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::ArrayXd * >(argp2);
  {
    try {
      result = (arg1)->min((RubyEigen::ArrayXd const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXd(static_cast< const RubyEigen::ArrayXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise_min__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","min", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","min", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (arg1)->min(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXd(static_cast< const RubyEigen::ArrayXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorDoubleCWise_min(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__ArrayXd, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VectorDoubleCWise_min__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorDoubleCWise_min__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "VectorDoubleCWise.min", 
    "    RubyEigen::ArrayXd VectorDoubleCWise.min(RubyEigen::ArrayXd const &)\n"
    "    RubyEigen::ArrayXd VectorDoubleCWise.min(double)\n");
  
  return Qnil;
}



/*
  Document-method: Eigen::VectorDoubleCWise.+

  call-seq:
    +(arg2) -> VectorDoubleCWise

Add operator.
*/
SWIGINTERN VALUE
_wrap_VectorDoubleCWise___add__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  RubyEigen::ArrayXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__ArrayXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd const &","operator +", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::ArrayXd const &","operator +", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::ArrayXd * >(argp2);
  {
    try {
      result = (arg1)->operator +((RubyEigen::ArrayXd const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXd(static_cast< const RubyEigen::ArrayXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::VectorDoubleCWise.-

  call-seq:
    -(arg2) -> VectorDoubleCWise

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_VectorDoubleCWise___sub__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  RubyEigen::ArrayXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__ArrayXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::ArrayXd const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::ArrayXd * >(argp2);
  {
    try {
      result = (arg1)->operator -((RubyEigen::ArrayXd const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXd(static_cast< const RubyEigen::ArrayXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise___mul____SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  RubyEigen::ArrayXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__ArrayXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd const &","operator *", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::ArrayXd const &","operator *", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::ArrayXd * >(argp2);
  {
    try {
      result = (arg1)->operator *((RubyEigen::ArrayXd const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXd(static_cast< const RubyEigen::ArrayXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise___mul____SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator *", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (arg1)->operator *(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXd(static_cast< const RubyEigen::ArrayXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorDoubleCWise___mul__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__ArrayXd, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VectorDoubleCWise___mul____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorDoubleCWise___mul____SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "VectorDoubleCWise.__mul__", 
    "    RubyEigen::ArrayXd VectorDoubleCWise.__mul__(RubyEigen::ArrayXd const &)\n"
    "    RubyEigen::ArrayXd VectorDoubleCWise.__mul__(double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise___div____SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  RubyEigen::ArrayXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","operator /", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__ArrayXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd const &","operator /", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::ArrayXd const &","operator /", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::ArrayXd * >(argp2);
  {
    try {
      result = (arg1)->operator /((RubyEigen::ArrayXd const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXd(static_cast< const RubyEigen::ArrayXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise___div____SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","operator /", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator /", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (arg1)->operator /(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXd(static_cast< const RubyEigen::ArrayXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorDoubleCWise___div__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__ArrayXd, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VectorDoubleCWise___div____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorDoubleCWise___div____SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "VectorDoubleCWise.__div__", 
    "    RubyEigen::ArrayXd VectorDoubleCWise.__div__(RubyEigen::ArrayXd const &)\n"
    "    RubyEigen::ArrayXd VectorDoubleCWise.__div__(double)\n");
  
  return Qnil;
}



/*
  Document-method: Eigen::VectorDoubleCWise.-@

  call-seq:
    -@ -> VectorDoubleCWise

Negation operator.
*/
SWIGINTERN VALUE
_wrap_VectorDoubleCWise___neg__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< RubyEigen::ArrayXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  {
    try {
      result = (arg1)->operator -();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayXd(static_cast< const RubyEigen::ArrayXd& >(result))), SWIGTYPE_p_RubyEigen__ArrayXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise_isApprox__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  RubyEigen::ArrayXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","isApprox", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__ArrayXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd const &","isApprox", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::ArrayXd const &","isApprox", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::ArrayXd * >(argp2);
  {
    try {
      result = (bool)(arg1)->isApprox((RubyEigen::ArrayXd const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise_isApprox__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  RubyEigen::ArrayXd *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","isApprox", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__ArrayXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd const &","isApprox", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::ArrayXd const &","isApprox", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::ArrayXd * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","isApprox", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (bool)(arg1)->isApprox((RubyEigen::ArrayXd const &)*arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorDoubleCWise_isApprox(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__ArrayXd, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VectorDoubleCWise_isApprox__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__ArrayXd, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorDoubleCWise_isApprox__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "VectorDoubleCWise.isApprox", 
    "    bool VectorDoubleCWise.isApprox(RubyEigen::ArrayXd const &)\n"
    "    bool VectorDoubleCWise.isApprox(RubyEigen::ArrayXd const &, double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise_isApproxToConstant__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","isApproxToConstant", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","isApproxToConstant", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)(arg1)->isApproxToConstant(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise_isApproxToConstant__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","isApproxToConstant", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","isApproxToConstant", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","isApproxToConstant", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (bool)(arg1)->isApproxToConstant(arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorDoubleCWise_isApproxToConstant(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorDoubleCWise_isApproxToConstant__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorDoubleCWise_isApproxToConstant__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "VectorDoubleCWise.isApproxToConstant", 
    "    bool VectorDoubleCWise.isApproxToConstant(double)\n"
    "    bool VectorDoubleCWise.isApproxToConstant(double, double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise_isMuchSmallerThan__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","isMuchSmallerThan", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","isMuchSmallerThan", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)(arg1)->isMuchSmallerThan(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise_isMuchSmallerThan__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","isMuchSmallerThan", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","isMuchSmallerThan", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","isMuchSmallerThan", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (bool)(arg1)->isMuchSmallerThan(arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise_isMuchSmallerThan__SWIG_2(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  RubyEigen::ArrayXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","isMuchSmallerThan", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__ArrayXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd const &","isMuchSmallerThan", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::ArrayXd const &","isMuchSmallerThan", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::ArrayXd * >(argp2);
  {
    try {
      result = (bool)(arg1)->isMuchSmallerThan((RubyEigen::ArrayXd const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise_isMuchSmallerThan__SWIG_3(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  RubyEigen::ArrayXd *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","isMuchSmallerThan", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__ArrayXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd const &","isMuchSmallerThan", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::ArrayXd const &","isMuchSmallerThan", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::ArrayXd * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","isMuchSmallerThan", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (bool)(arg1)->isMuchSmallerThan((RubyEigen::ArrayXd const &)*arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorDoubleCWise_isMuchSmallerThan(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__ArrayXd, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VectorDoubleCWise_isMuchSmallerThan__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorDoubleCWise_isMuchSmallerThan__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RubyEigen__ArrayXd, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorDoubleCWise_isMuchSmallerThan__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorDoubleCWise_isMuchSmallerThan__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "VectorDoubleCWise.isMuchSmallerThan", 
    "    bool VectorDoubleCWise.isMuchSmallerThan(double)\n"
    "    bool VectorDoubleCWise.isMuchSmallerThan(double, double)\n"
    "    bool VectorDoubleCWise.isMuchSmallerThan(RubyEigen::ArrayXd const &)\n"
    "    bool VectorDoubleCWise.isMuchSmallerThan(RubyEigen::ArrayXd const &, double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise_isOnes__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","isOnes", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  {
    try {
      result = (bool)(arg1)->isOnes();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise_isOnes__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","isOnes", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","isOnes", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)(arg1)->isOnes(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorDoubleCWise_isOnes(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VectorDoubleCWise_isOnes__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorDoubleCWise_isOnes__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "VectorDoubleCWise.isOnes", 
    "    bool VectorDoubleCWise.isOnes()\n"
    "    bool VectorDoubleCWise.isOnes(double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise_isZero__SWIG_0(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","isZero", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  {
    try {
      result = (bool)(arg1)->isZero();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise_isZero__SWIG_1(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","isZero", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","isZero", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)(arg1)->isZero(arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VectorDoubleCWise_isZero(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VectorDoubleCWise_isZero__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RubyEigen__ArrayXd, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorDoubleCWise_isZero__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "VectorDoubleCWise.isZero", 
    "    bool VectorDoubleCWise.isZero()\n"
    "    bool VectorDoubleCWise.isZero(double)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise_hasNaN(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","hasNaN", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  {
    try {
      result = (bool)(arg1)->hasNaN();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise_maxCoeff(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","maxCoeff", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  {
    try {
      result = (double)(arg1)->maxCoeff();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorDoubleCWise_minCoeff(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","minCoeff", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  {
    try {
      result = (double)(arg1)->minCoeff();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::VectorDoubleCWise.[]

  call-seq:
    [](i) -> double

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_VectorDoubleCWise___getitem__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)RubyEigen_ArrayXd___getitem__(arg1,arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::VectorDoubleCWise.[]=

  call-seq:
    []=(i, c)

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_VectorDoubleCWise___setitem__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayXd *arg1 = (RubyEigen::ArrayXd *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RubyEigen__ArrayXd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayXd *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayXd * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","__setitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      RubyEigen_ArrayXd___setitem__(arg1,arg2,arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


static swig_class SwigClassArrayBool;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ArrayBool_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ArrayBool_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_ArrayT_bool_Dynamic_Dynamic_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_ArrayBool(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  RubyEigen::ArrayBool *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","ArrayBool", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","ArrayBool", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (RubyEigen::ArrayBool *)new RubyEigen::ArrayBool(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_RubyEigen_ArrayBool(void *self) {
    RubyEigen::ArrayBool *arg1 = (RubyEigen::ArrayBool *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_ArrayBool_all(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayBool *arg1 = (RubyEigen::ArrayBool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ArrayT_bool_Dynamic_Dynamic_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayBool *","all", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayBool * >(argp1);
  {
    try {
      result = (bool)(arg1)->all();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ArrayBool_any(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayBool *arg1 = (RubyEigen::ArrayBool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ArrayT_bool_Dynamic_Dynamic_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayBool *","any", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayBool * >(argp1);
  {
    try {
      result = (bool)(arg1)->any();
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::ArrayBool.+

  call-seq:
    +(arg2) -> RubyEigen::ArrayBool

Add operator.
*/
SWIGINTERN VALUE
_wrap_ArrayBool___add__(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayBool *arg1 = (RubyEigen::ArrayBool *) 0 ;
  RubyEigen::ArrayBool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  RubyEigen::ArrayBool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ArrayT_bool_Dynamic_Dynamic_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayBool *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayBool * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_ArrayT_bool_Dynamic_Dynamic_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::ArrayBool const &","operator +", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::ArrayBool const &","operator +", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::ArrayBool * >(argp2);
  {
    try {
      result = (arg1)->operator +((RubyEigen::ArrayBool const &)*arg2);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::ArrayBool(static_cast< const RubyEigen::ArrayBool& >(result))), SWIGTYPE_p_ArrayT_bool_Dynamic_Dynamic_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Eigen::ArrayBool.select

  call-seq:
    select(a, b) -> MatrixDouble

Iterate thru each element in the ArrayBool and select those that match a condition.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_ArrayBool_select(int argc, VALUE *argv, VALUE self) {
  RubyEigen::ArrayBool *arg1 = (RubyEigen::ArrayBool *) 0 ;
  RubyEigen::MatrixXd *arg2 = 0 ;
  RubyEigen::MatrixXd *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  SwigValueWrapper< RubyEigen::MatrixXd > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ArrayT_bool_Dynamic_Dynamic_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "RubyEigen::ArrayBool *","select", 1, self )); 
  }
  arg1 = reinterpret_cast< RubyEigen::ArrayBool * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_RubyEigen__MatrixXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd &","select", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXd &","select", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< RubyEigen::MatrixXd * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_RubyEigen__MatrixXd,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "RubyEigen::MatrixXd &","select", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "RubyEigen::MatrixXd &","select", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< RubyEigen::MatrixXd * >(argp3);
  {
    try {
      result = RubyEigen_ArrayBool_select(arg1,*arg2,*arg3);
    }
    catch (const RubyEigen::EigenRuntimeError &e) {
      /* this rb_raise is called inside SWIG functions. That's ok. */
      rb_raise(rb_eEigenRuntimeError, "%s", e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new RubyEigen::MatrixXd(static_cast< const RubyEigen::MatrixXd& >(result))), SWIGTYPE_p_RubyEigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_swig__IteratorTo_p_swig__ConstIterator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((swig::ConstIterator *)  ((swig::Iterator *) x));
}
static swig_type_info _swigt__p_ArrayT_bool_Dynamic_1_t = {"_p_ArrayT_bool_Dynamic_1_t", "Array< bool,Dynamic,1 > *|RubyEigen::VecBoolCWise *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ArrayT_bool_Dynamic_Dynamic_t = {"_p_ArrayT_bool_Dynamic_Dynamic_t", "RubyEigen::ArrayBool *|Array< bool,Dynamic,Dynamic > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__ArrayXXd = {"_p_Eigen__ArrayXXd", "Eigen::ArrayXXd *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatrixT_bool_Dynamic_1_t = {"_p_MatrixT_bool_Dynamic_1_t", "Matrix< bool,Dynamic,1 > *|RubyEigen::VectorBool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatrixT_bool_Dynamic_Dynamic_t = {"_p_MatrixT_bool_Dynamic_Dynamic_t", "RubyEigen::MatrixBool *|Matrix< bool,Dynamic,Dynamic > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RubyEigen__ArrayXXd = {"_p_RubyEigen__ArrayXXd", "RubyEigen::ArrayXXd *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RubyEigen__ArrayXd = {"_p_RubyEigen__ArrayXd", "RubyEigen::ArrayXd *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RubyEigen__FullPivHouseholderQRT_RubyEigen__MatrixXcd_t = {"_p_RubyEigen__FullPivHouseholderQRT_RubyEigen__MatrixXcd_t", "RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXcd > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RubyEigen__FullPivHouseholderQRT_RubyEigen__MatrixXd_t = {"_p_RubyEigen__FullPivHouseholderQRT_RubyEigen__MatrixXd_t", "RubyEigen::FullPivHouseholderQR< RubyEigen::MatrixXd > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RubyEigen__FullPivLUT_RubyEigen__MatrixXcd_t = {"_p_RubyEigen__FullPivLUT_RubyEigen__MatrixXcd_t", "RubyEigen::FullPivLU< RubyEigen::MatrixXcd > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RubyEigen__FullPivLUT_RubyEigen__MatrixXd_t = {"_p_RubyEigen__FullPivLUT_RubyEigen__MatrixXd_t", "RubyEigen::FullPivLU< RubyEigen::MatrixXd > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RubyEigen__JacobiSVDT_RubyEigen__MatrixXcd_t = {"_p_RubyEigen__JacobiSVDT_RubyEigen__MatrixXcd_t", "RubyEigen::JacobiSVD< RubyEigen::MatrixXcd > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RubyEigen__JacobiSVDT_RubyEigen__MatrixXd_t = {"_p_RubyEigen__JacobiSVDT_RubyEigen__MatrixXd_t", "RubyEigen::JacobiSVD< RubyEigen::MatrixXd > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RubyEigen__LDLTT_RubyEigen__MatrixXcd_t = {"_p_RubyEigen__LDLTT_RubyEigen__MatrixXcd_t", "RubyEigen::LDLT< RubyEigen::MatrixXcd > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RubyEigen__LDLTT_RubyEigen__MatrixXd_t = {"_p_RubyEigen__LDLTT_RubyEigen__MatrixXd_t", "RubyEigen::LDLT< RubyEigen::MatrixXd > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RubyEigen__LLTT_RubyEigen__MatrixXcd_t = {"_p_RubyEigen__LLTT_RubyEigen__MatrixXcd_t", "RubyEigen::LLT< RubyEigen::MatrixXcd > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RubyEigen__LLTT_RubyEigen__MatrixXd_t = {"_p_RubyEigen__LLTT_RubyEigen__MatrixXd_t", "RubyEigen::LLT< RubyEigen::MatrixXd > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t = {"_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t", "RubyEigen::Matrix< RubyEigen::MatrixXcd::Scalar,RubyEigen::Dynamic,1 > *|RubyEigen::VectorXcd *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t = {"_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t", "RubyEigen::VectorXd *|RubyEigen::Matrix< RubyEigen::MatrixXd::Scalar,RubyEigen::Dynamic,1 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RubyEigen__MatrixXcd = {"_p_RubyEigen__MatrixXcd", "RubyEigen::MatrixXcd *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RubyEigen__MatrixXd = {"_p_RubyEigen__MatrixXd", "RubyEigen::MatrixXd *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RubyEigen__PartialPivLUT_RubyEigen__MatrixXcd_t = {"_p_RubyEigen__PartialPivLUT_RubyEigen__MatrixXcd_t", "RubyEigen::PartialPivLU< RubyEigen::MatrixXcd > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RubyEigen__PartialPivLUT_RubyEigen__MatrixXd_t = {"_p_RubyEigen__PartialPivLUT_RubyEigen__MatrixXd_t", "RubyEigen::PartialPivLU< RubyEigen::MatrixXd > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **|VALUE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_double_t = {"_p_std__allocatorT_double_t", "std::vector< double >::allocator_type *|std::allocator< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *|std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t = {"_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t", "std::vector< std::complex< double >,std::allocator< std::complex< double > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__ConstIterator = {"_p_swig__ConstIterator", "swig::ConstIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__GC_VALUE = {"_p_swig__GC_VALUE", "swig::GC_VALUE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__Iterator = {"_p_swig__Iterator", "swig::Iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "VALUE|void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_ArrayT_bool_Dynamic_1_t,
  &_swigt__p_ArrayT_bool_Dynamic_Dynamic_t,
  &_swigt__p_Eigen__ArrayXXd,
  &_swigt__p_MatrixT_bool_Dynamic_1_t,
  &_swigt__p_MatrixT_bool_Dynamic_Dynamic_t,
  &_swigt__p_RubyEigen__ArrayXXd,
  &_swigt__p_RubyEigen__ArrayXd,
  &_swigt__p_RubyEigen__FullPivHouseholderQRT_RubyEigen__MatrixXcd_t,
  &_swigt__p_RubyEigen__FullPivHouseholderQRT_RubyEigen__MatrixXd_t,
  &_swigt__p_RubyEigen__FullPivLUT_RubyEigen__MatrixXcd_t,
  &_swigt__p_RubyEigen__FullPivLUT_RubyEigen__MatrixXd_t,
  &_swigt__p_RubyEigen__JacobiSVDT_RubyEigen__MatrixXcd_t,
  &_swigt__p_RubyEigen__JacobiSVDT_RubyEigen__MatrixXd_t,
  &_swigt__p_RubyEigen__LDLTT_RubyEigen__MatrixXcd_t,
  &_swigt__p_RubyEigen__LDLTT_RubyEigen__MatrixXd_t,
  &_swigt__p_RubyEigen__LLTT_RubyEigen__MatrixXcd_t,
  &_swigt__p_RubyEigen__LLTT_RubyEigen__MatrixXd_t,
  &_swigt__p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t,
  &_swigt__p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t,
  &_swigt__p_RubyEigen__MatrixXcd,
  &_swigt__p_RubyEigen__MatrixXd,
  &_swigt__p_RubyEigen__PartialPivLUT_RubyEigen__MatrixXcd_t,
  &_swigt__p_RubyEigen__PartialPivLUT_RubyEigen__MatrixXd_t,
  &_swigt__p_allocator_type,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_p_void,
  &_swigt__p_size_type,
  &_swigt__p_std__allocatorT_double_t,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,
  &_swigt__p_swig__ConstIterator,
  &_swigt__p_swig__GC_VALUE,
  &_swigt__p_swig__Iterator,
  &_swigt__p_value_type,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_ArrayT_bool_Dynamic_1_t[] = {  {&_swigt__p_ArrayT_bool_Dynamic_1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_bool_Dynamic_Dynamic_t[] = {  {&_swigt__p_ArrayT_bool_Dynamic_Dynamic_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__ArrayXXd[] = {  {&_swigt__p_Eigen__ArrayXXd, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixT_bool_Dynamic_1_t[] = {  {&_swigt__p_MatrixT_bool_Dynamic_1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixT_bool_Dynamic_Dynamic_t[] = {  {&_swigt__p_MatrixT_bool_Dynamic_Dynamic_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RubyEigen__ArrayXXd[] = {  {&_swigt__p_RubyEigen__ArrayXXd, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RubyEigen__ArrayXd[] = {  {&_swigt__p_RubyEigen__ArrayXd, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RubyEigen__FullPivHouseholderQRT_RubyEigen__MatrixXcd_t[] = {  {&_swigt__p_RubyEigen__FullPivHouseholderQRT_RubyEigen__MatrixXcd_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RubyEigen__FullPivHouseholderQRT_RubyEigen__MatrixXd_t[] = {  {&_swigt__p_RubyEigen__FullPivHouseholderQRT_RubyEigen__MatrixXd_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RubyEigen__FullPivLUT_RubyEigen__MatrixXcd_t[] = {  {&_swigt__p_RubyEigen__FullPivLUT_RubyEigen__MatrixXcd_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RubyEigen__FullPivLUT_RubyEigen__MatrixXd_t[] = {  {&_swigt__p_RubyEigen__FullPivLUT_RubyEigen__MatrixXd_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RubyEigen__JacobiSVDT_RubyEigen__MatrixXcd_t[] = {  {&_swigt__p_RubyEigen__JacobiSVDT_RubyEigen__MatrixXcd_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RubyEigen__JacobiSVDT_RubyEigen__MatrixXd_t[] = {  {&_swigt__p_RubyEigen__JacobiSVDT_RubyEigen__MatrixXd_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RubyEigen__LDLTT_RubyEigen__MatrixXcd_t[] = {  {&_swigt__p_RubyEigen__LDLTT_RubyEigen__MatrixXcd_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RubyEigen__LDLTT_RubyEigen__MatrixXd_t[] = {  {&_swigt__p_RubyEigen__LDLTT_RubyEigen__MatrixXd_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RubyEigen__LLTT_RubyEigen__MatrixXcd_t[] = {  {&_swigt__p_RubyEigen__LLTT_RubyEigen__MatrixXcd_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RubyEigen__LLTT_RubyEigen__MatrixXd_t[] = {  {&_swigt__p_RubyEigen__LLTT_RubyEigen__MatrixXd_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t[] = {  {&_swigt__p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t[] = {  {&_swigt__p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RubyEigen__MatrixXcd[] = {  {&_swigt__p_RubyEigen__MatrixXcd, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RubyEigen__MatrixXd[] = {  {&_swigt__p_RubyEigen__MatrixXd, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RubyEigen__PartialPivLUT_RubyEigen__MatrixXcd_t[] = {  {&_swigt__p_RubyEigen__PartialPivLUT_RubyEigen__MatrixXcd_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RubyEigen__PartialPivLUT_RubyEigen__MatrixXd_t[] = {  {&_swigt__p_RubyEigen__PartialPivLUT_RubyEigen__MatrixXd_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_double_t[] = {  {&_swigt__p_std__allocatorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t[] = {  {&_swigt__p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__ConstIterator[] = {  {&_swigt__p_swig__ConstIterator, 0, 0, 0},  {&_swigt__p_swig__Iterator, _p_swig__IteratorTo_p_swig__ConstIterator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__GC_VALUE[] = {  {&_swigt__p_swig__GC_VALUE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__Iterator[] = {  {&_swigt__p_swig__Iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_ArrayT_bool_Dynamic_1_t,
  _swigc__p_ArrayT_bool_Dynamic_Dynamic_t,
  _swigc__p_Eigen__ArrayXXd,
  _swigc__p_MatrixT_bool_Dynamic_1_t,
  _swigc__p_MatrixT_bool_Dynamic_Dynamic_t,
  _swigc__p_RubyEigen__ArrayXXd,
  _swigc__p_RubyEigen__ArrayXd,
  _swigc__p_RubyEigen__FullPivHouseholderQRT_RubyEigen__MatrixXcd_t,
  _swigc__p_RubyEigen__FullPivHouseholderQRT_RubyEigen__MatrixXd_t,
  _swigc__p_RubyEigen__FullPivLUT_RubyEigen__MatrixXcd_t,
  _swigc__p_RubyEigen__FullPivLUT_RubyEigen__MatrixXd_t,
  _swigc__p_RubyEigen__JacobiSVDT_RubyEigen__MatrixXcd_t,
  _swigc__p_RubyEigen__JacobiSVDT_RubyEigen__MatrixXd_t,
  _swigc__p_RubyEigen__LDLTT_RubyEigen__MatrixXcd_t,
  _swigc__p_RubyEigen__LDLTT_RubyEigen__MatrixXd_t,
  _swigc__p_RubyEigen__LLTT_RubyEigen__MatrixXcd_t,
  _swigc__p_RubyEigen__LLTT_RubyEigen__MatrixXd_t,
  _swigc__p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t,
  _swigc__p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t,
  _swigc__p_RubyEigen__MatrixXcd,
  _swigc__p_RubyEigen__MatrixXd,
  _swigc__p_RubyEigen__PartialPivLUT_RubyEigen__MatrixXcd_t,
  _swigc__p_RubyEigen__PartialPivLUT_RubyEigen__MatrixXd_t,
  _swigc__p_allocator_type,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_p_void,
  _swigc__p_size_type,
  _swigc__p_std__allocatorT_double_t,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,
  _swigc__p_swig__ConstIterator,
  _swigc__p_swig__GC_VALUE,
  _swigc__p_swig__Iterator,
  _swigc__p_value_type,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif

/*

*/
#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void Init_eigen(void) {
  size_t i;
  
  SWIG_InitRuntime();
  mEigen = rb_define_module("Eigen");
  
  SWIG_InitializeModule(0);
  for (i = 0; i < swig_module.size; i++) {
    SWIG_define_class(swig_module.types[i]);
  }
  
  SWIG_RubyInitializeTrackings();
  
  rb_eEigenRuntimeError = rb_define_class_under(mEigen, "EigenRuntimeError", rb_eStandardError);
  
  
  SwigClassGC_VALUE.klass = rb_define_class_under(mEigen, "GC_VALUE", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_swig__GC_VALUE, (void *) &SwigClassGC_VALUE);
  rb_undef_alloc_func(SwigClassGC_VALUE.klass);
  rb_define_method(SwigClassGC_VALUE.klass, "inspect", VALUEFUNC(_wrap_GC_VALUE_inspect), -1);
  rb_define_method(SwigClassGC_VALUE.klass, "to_s", VALUEFUNC(_wrap_GC_VALUE_to_s), -1);
  SwigClassGC_VALUE.mark = 0;
  SwigClassGC_VALUE.trackObjects = 0;
  
  swig::SwigGCReferences::initialize();
  
  
  SwigClassConstIterator.klass = rb_define_class_under(mEigen, "ConstIterator", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_swig__ConstIterator, (void *) &SwigClassConstIterator);
  rb_undef_alloc_func(SwigClassConstIterator.klass);
  rb_define_method(SwigClassConstIterator.klass, "value", VALUEFUNC(_wrap_ConstIterator_value), -1);
  rb_define_method(SwigClassConstIterator.klass, "dup", VALUEFUNC(_wrap_ConstIterator_dup), -1);
  rb_define_method(SwigClassConstIterator.klass, "inspect", VALUEFUNC(_wrap_ConstIterator_inspect), -1);
  rb_define_method(SwigClassConstIterator.klass, "to_s", VALUEFUNC(_wrap_ConstIterator_to_s), -1);
  rb_define_method(SwigClassConstIterator.klass, "next", VALUEFUNC(_wrap_ConstIterator_next), -1);
  rb_define_method(SwigClassConstIterator.klass, "previous", VALUEFUNC(_wrap_ConstIterator_previous), -1);
  rb_define_method(SwigClassConstIterator.klass, "==", VALUEFUNC(_wrap_ConstIterator___eq__), -1);
  rb_define_method(SwigClassConstIterator.klass, "+", VALUEFUNC(_wrap_ConstIterator___add__), -1);
  rb_define_method(SwigClassConstIterator.klass, "-", VALUEFUNC(_wrap_ConstIterator___sub__), -1);
  SwigClassConstIterator.mark = 0;
  SwigClassConstIterator.destroy = (void (*)(void *)) free_swig_ConstIterator;
  SwigClassConstIterator.trackObjects = 0;
  
  SwigClassIterator.klass = rb_define_class_under(mEigen, "Iterator", ((swig_class *) SWIGTYPE_p_swig__ConstIterator->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_swig__Iterator, (void *) &SwigClassIterator);
  rb_undef_alloc_func(SwigClassIterator.klass);
  rb_define_method(SwigClassIterator.klass, "value=", VALUEFUNC(_wrap_Iterator_valuee___), -1);
  rb_define_method(SwigClassIterator.klass, "dup", VALUEFUNC(_wrap_Iterator_dup), -1);
  rb_define_method(SwigClassIterator.klass, "next", VALUEFUNC(_wrap_Iterator_next), -1);
  rb_define_method(SwigClassIterator.klass, "previous", VALUEFUNC(_wrap_Iterator_previous), -1);
  rb_define_method(SwigClassIterator.klass, "inspect", VALUEFUNC(_wrap_Iterator_inspect), -1);
  rb_define_method(SwigClassIterator.klass, "to_s", VALUEFUNC(_wrap_Iterator_to_s), -1);
  rb_define_method(SwigClassIterator.klass, "==", VALUEFUNC(_wrap_Iterator___eq__), -1);
  rb_define_method(SwigClassIterator.klass, "+", VALUEFUNC(_wrap_Iterator___add__), -1);
  rb_define_method(SwigClassIterator.klass, "-", VALUEFUNC(_wrap_Iterator___sub__), -1);
  SwigClassIterator.mark = 0;
  SwigClassIterator.destroy = (void (*)(void *)) free_swig_Iterator;
  SwigClassIterator.trackObjects = 0;
  
#if !defined(T_COMPLEX)
  rb_require("complex");
#endif
  
  
  SwigClassStdVectorDouble__.klass = rb_define_class_under(mEigen, "StdVectorDouble__", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, (void *) &SwigClassStdVectorDouble__);
  rb_include_module(SwigClassStdVectorDouble__.klass, rb_eval_string("Enumerable"));
  rb_define_alloc_func(SwigClassStdVectorDouble__.klass, _wrap_StdVectorDouble___allocate);
  rb_define_method(SwigClassStdVectorDouble__.klass, "initialize", VALUEFUNC(_wrap_new_StdVectorDouble__), -1);
  rb_define_method(SwigClassStdVectorDouble__.klass, "dup", VALUEFUNC(_wrap_StdVectorDouble___dup), -1);
  rb_define_method(SwigClassStdVectorDouble__.klass, "inspect", VALUEFUNC(_wrap_StdVectorDouble___inspect), -1);
  rb_define_method(SwigClassStdVectorDouble__.klass, "to_a", VALUEFUNC(_wrap_StdVectorDouble___to_a), -1);
  rb_define_method(SwigClassStdVectorDouble__.klass, "to_s", VALUEFUNC(_wrap_StdVectorDouble___to_s), -1);
  rb_define_method(SwigClassStdVectorDouble__.klass, "slice", VALUEFUNC(_wrap_StdVectorDouble___slice), -1);
  rb_define_method(SwigClassStdVectorDouble__.klass, "each", VALUEFUNC(_wrap_StdVectorDouble___each), -1);
  rb_define_method(SwigClassStdVectorDouble__.klass, "__delete2__", VALUEFUNC(_wrap_StdVectorDouble_____delete2__), -1);
  rb_define_method(SwigClassStdVectorDouble__.klass, "select", VALUEFUNC(_wrap_StdVectorDouble___select), -1);
  rb_define_method(SwigClassStdVectorDouble__.klass, "delete_at", VALUEFUNC(_wrap_StdVectorDouble___delete_at), -1);
  rb_define_method(SwigClassStdVectorDouble__.klass, "at", VALUEFUNC(_wrap_StdVectorDouble___at), -1);
  rb_define_method(SwigClassStdVectorDouble__.klass, "[]", VALUEFUNC(_wrap_StdVectorDouble_____getitem__), -1);
  rb_define_method(SwigClassStdVectorDouble__.klass, "[]=", VALUEFUNC(_wrap_StdVectorDouble_____setitem__), -1);
  rb_define_method(SwigClassStdVectorDouble__.klass, "reject!", VALUEFUNC(_wrap_StdVectorDouble___rejectN___), -1);
  rb_define_alias(SwigClassStdVectorDouble__.klass, "delete_if", "reject!");
  rb_define_method(SwigClassStdVectorDouble__.klass, "pop", VALUEFUNC(_wrap_StdVectorDouble___pop), -1);
  rb_define_method(SwigClassStdVectorDouble__.klass, "push", VALUEFUNC(_wrap_StdVectorDouble___push), -1);
  rb_define_alias(SwigClassStdVectorDouble__.klass, "<<", "push");
  rb_define_method(SwigClassStdVectorDouble__.klass, "reject", VALUEFUNC(_wrap_StdVectorDouble___reject), -1);
  rb_define_method(SwigClassStdVectorDouble__.klass, "shift", VALUEFUNC(_wrap_StdVectorDouble___shift), -1);
  rb_define_method(SwigClassStdVectorDouble__.klass, "unshift", VALUEFUNC(_wrap_StdVectorDouble___unshift), -1);
  rb_define_method(SwigClassStdVectorDouble__.klass, "empty?", VALUEFUNC(_wrap_StdVectorDouble___emptyq___), -1);
  rb_define_method(SwigClassStdVectorDouble__.klass, "size", VALUEFUNC(_wrap_StdVectorDouble___size), -1);
  rb_define_method(SwigClassStdVectorDouble__.klass, "swap", VALUEFUNC(_wrap_StdVectorDouble___swap), -1);
  rb_define_method(SwigClassStdVectorDouble__.klass, "begin", VALUEFUNC(_wrap_StdVectorDouble___begin), -1);
  rb_define_method(SwigClassStdVectorDouble__.klass, "end", VALUEFUNC(_wrap_StdVectorDouble___end), -1);
  rb_define_method(SwigClassStdVectorDouble__.klass, "rbegin", VALUEFUNC(_wrap_StdVectorDouble___rbegin), -1);
  rb_define_method(SwigClassStdVectorDouble__.klass, "rend", VALUEFUNC(_wrap_StdVectorDouble___rend), -1);
  rb_define_method(SwigClassStdVectorDouble__.klass, "clear", VALUEFUNC(_wrap_StdVectorDouble___clear), -1);
  rb_define_method(SwigClassStdVectorDouble__.klass, "get_allocator", VALUEFUNC(_wrap_StdVectorDouble___get_allocator), -1);
  rb_define_method(SwigClassStdVectorDouble__.klass, "erase", VALUEFUNC(_wrap_StdVectorDouble___erase), -1);
  rb_define_method(SwigClassStdVectorDouble__.klass, "front", VALUEFUNC(_wrap_StdVectorDouble___front), -1);
  rb_define_method(SwigClassStdVectorDouble__.klass, "back", VALUEFUNC(_wrap_StdVectorDouble___back), -1);
  rb_define_method(SwigClassStdVectorDouble__.klass, "assign", VALUEFUNC(_wrap_StdVectorDouble___assign), -1);
  rb_define_method(SwigClassStdVectorDouble__.klass, "resize", VALUEFUNC(_wrap_StdVectorDouble___resize), -1);
  rb_define_method(SwigClassStdVectorDouble__.klass, "insert", VALUEFUNC(_wrap_StdVectorDouble___insert), -1);
  rb_define_method(SwigClassStdVectorDouble__.klass, "reserve", VALUEFUNC(_wrap_StdVectorDouble___reserve), -1);
  rb_define_method(SwigClassStdVectorDouble__.klass, "capacity", VALUEFUNC(_wrap_StdVectorDouble___capacity), -1);
  rb_define_method(SwigClassStdVectorDouble__.klass, "map_bang", VALUEFUNC(_wrap_StdVectorDouble___map_bang), -1);
  rb_define_method(SwigClassStdVectorDouble__.klass, "__delete__", VALUEFUNC(_wrap_StdVectorDouble_____delete__), -1);
  SwigClassStdVectorDouble__.mark = 0;
  SwigClassStdVectorDouble__.destroy = (void (*)(void *)) free_std_vector_Sl_double_Sg_;
  SwigClassStdVectorDouble__.trackObjects = 0;
  
  SwigClassMatrixDouble.klass = rb_define_class_under(mEigen, "MatrixDouble", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_RubyEigen__MatrixXd, (void *) &SwigClassMatrixDouble);
  rb_define_alloc_func(SwigClassMatrixDouble.klass, _wrap_MatrixDouble_allocate);
  rb_define_method(SwigClassMatrixDouble.klass, "initialize", VALUEFUNC(_wrap_new_MatrixDouble), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "cwiseAbs", VALUEFUNC(_wrap_MatrixDouble_cwiseAbs), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "cwiseAbs2", VALUEFUNC(_wrap_MatrixDouble_cwiseAbs2), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "cwiseMax", VALUEFUNC(_wrap_MatrixDouble_cwiseMax), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "cwiseMin", VALUEFUNC(_wrap_MatrixDouble_cwiseMin), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "maxCoeff", VALUEFUNC(_wrap_MatrixDouble_maxCoeff), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "minCoeff", VALUEFUNC(_wrap_MatrixDouble_minCoeff), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "array", VALUEFUNC(_wrap_MatrixDouble_array), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "real", VALUEFUNC(_wrap_MatrixDouble_real), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "hasNaN", VALUEFUNC(_wrap_MatrixDouble_hasNaN), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "setRandom", VALUEFUNC(_wrap_MatrixDouble_setRandom), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "setConstant", VALUEFUNC(_wrap_MatrixDouble_setConstant), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "setIdentity", VALUEFUNC(_wrap_MatrixDouble_setIdentity), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "setOnes", VALUEFUNC(_wrap_MatrixDouble_setOnes), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "setZero", VALUEFUNC(_wrap_MatrixDouble_setZero), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "cwiseSqrt", VALUEFUNC(_wrap_MatrixDouble_cwiseSqrt), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "cwiseInverse", VALUEFUNC(_wrap_MatrixDouble_cwiseInverse), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "cwiseProduct", VALUEFUNC(_wrap_MatrixDouble_cwiseProduct), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "cwiseQuotient", VALUEFUNC(_wrap_MatrixDouble_cwiseQuotient), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "cwiseEqual", VALUEFUNC(_wrap_MatrixDouble_cwiseEqual), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "cwiseNotEqual", VALUEFUNC(_wrap_MatrixDouble_cwiseNotEqual), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "+", VALUEFUNC(_wrap_MatrixDouble___add__), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "-", VALUEFUNC(_wrap_MatrixDouble___sub__), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "-@", VALUEFUNC(_wrap_MatrixDouble___neg__), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "*", VALUEFUNC(_wrap_MatrixDouble___mul__), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "/", VALUEFUNC(_wrap_MatrixDouble___div__), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "==", VALUEFUNC(_wrap_MatrixDouble___eq__), -1);
  rb_define_alias(SwigClassMatrixDouble.klass, "__eq__", "==");
  rb_define_method(SwigClassMatrixDouble.klass, "isApprox", VALUEFUNC(_wrap_MatrixDouble_isApprox), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "isApproxToConstant", VALUEFUNC(_wrap_MatrixDouble_isApproxToConstant), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "isConstant", VALUEFUNC(_wrap_MatrixDouble_isConstant), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "isMuchSmallerThan", VALUEFUNC(_wrap_MatrixDouble_isMuchSmallerThan), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "isOnes", VALUEFUNC(_wrap_MatrixDouble_isOnes), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "isZero", VALUEFUNC(_wrap_MatrixDouble_isZero), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "adjoint", VALUEFUNC(_wrap_MatrixDouble_adjoint), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "col", VALUEFUNC(_wrap_MatrixDouble_col), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "row", VALUEFUNC(_wrap_MatrixDouble_row), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "cols", VALUEFUNC(_wrap_MatrixDouble_cols), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "rows", VALUEFUNC(_wrap_MatrixDouble_rows), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "diagonal", VALUEFUNC(_wrap_MatrixDouble_diagonal), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "inverse", VALUEFUNC(_wrap_MatrixDouble_inverse), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "determinant", VALUEFUNC(_wrap_MatrixDouble_determinant), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "norm", VALUEFUNC(_wrap_MatrixDouble_norm), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "operatorNorm", VALUEFUNC(_wrap_MatrixDouble_operatorNorm), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "sum", VALUEFUNC(_wrap_MatrixDouble_sum), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "prod", VALUEFUNC(_wrap_MatrixDouble_prod), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "normalize", VALUEFUNC(_wrap_MatrixDouble_normalize), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "transpose", VALUEFUNC(_wrap_MatrixDouble_transpose), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "conjugate", VALUEFUNC(_wrap_MatrixDouble_conjugate), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "reverse", VALUEFUNC(_wrap_MatrixDouble_reverse), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "replicate", VALUEFUNC(_wrap_MatrixDouble_replicate), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "eigenvalues", VALUEFUNC(_wrap_MatrixDouble_eigenvalues), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "isDiagonal", VALUEFUNC(_wrap_MatrixDouble_isDiagonal), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "isIdentity", VALUEFUNC(_wrap_MatrixDouble_isIdentity), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "isLowerTriangular", VALUEFUNC(_wrap_MatrixDouble_isLowerTriangular), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "isUpperTriangular", VALUEFUNC(_wrap_MatrixDouble_isUpperTriangular), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "middleCols", VALUEFUNC(_wrap_MatrixDouble_middleCols), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "middleRows", VALUEFUNC(_wrap_MatrixDouble_middleRows), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "lu", VALUEFUNC(_wrap_MatrixDouble_lu), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "ldlt", VALUEFUNC(_wrap_MatrixDouble_ldlt), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "llt", VALUEFUNC(_wrap_MatrixDouble_llt), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "__set_col__", VALUEFUNC(_wrap_MatrixDouble___set_col__), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "__set_row__", VALUEFUNC(_wrap_MatrixDouble___set_row__), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "__mul_n__", VALUEFUNC(_wrap_MatrixDouble___mul_n__), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "to_s", VALUEFUNC(_wrap_MatrixDouble_to_s), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "[]", VALUEFUNC(_wrap_MatrixDouble___getitem__), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "[]=", VALUEFUNC(_wrap_MatrixDouble___setitem__), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "triu", VALUEFUNC(_wrap_MatrixDouble_triu), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "tril", VALUEFUNC(_wrap_MatrixDouble_tril), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "fullPivLu", VALUEFUNC(_wrap_MatrixDouble_fullPivLu), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "fullPivHouseholderQR", VALUEFUNC(_wrap_MatrixDouble_fullPivHouseholderQR), -1);
  rb_define_method(SwigClassMatrixDouble.klass, "svd", VALUEFUNC(_wrap_MatrixDouble_svd), -1);
  SwigClassMatrixDouble.mark = 0;
  SwigClassMatrixDouble.destroy = (void (*)(void *)) free_RubyEigen_MatrixXd;
  SwigClassMatrixDouble.trackObjects = 0;
  
  SwigClassMatrixComplex.klass = rb_define_class_under(mEigen, "MatrixComplex", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_RubyEigen__MatrixXcd, (void *) &SwigClassMatrixComplex);
  rb_define_alloc_func(SwigClassMatrixComplex.klass, _wrap_MatrixComplex_allocate);
  rb_define_method(SwigClassMatrixComplex.klass, "initialize", VALUEFUNC(_wrap_new_MatrixComplex), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "imag", VALUEFUNC(_wrap_MatrixComplex_imag), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "real", VALUEFUNC(_wrap_MatrixComplex_real), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "hasNaN", VALUEFUNC(_wrap_MatrixComplex_hasNaN), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "setRandom", VALUEFUNC(_wrap_MatrixComplex_setRandom), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "setConstant", VALUEFUNC(_wrap_MatrixComplex_setConstant), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "setIdentity", VALUEFUNC(_wrap_MatrixComplex_setIdentity), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "setOnes", VALUEFUNC(_wrap_MatrixComplex_setOnes), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "setZero", VALUEFUNC(_wrap_MatrixComplex_setZero), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "cwiseSqrt", VALUEFUNC(_wrap_MatrixComplex_cwiseSqrt), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "cwiseInverse", VALUEFUNC(_wrap_MatrixComplex_cwiseInverse), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "cwiseProduct", VALUEFUNC(_wrap_MatrixComplex_cwiseProduct), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "cwiseQuotient", VALUEFUNC(_wrap_MatrixComplex_cwiseQuotient), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "cwiseEqual", VALUEFUNC(_wrap_MatrixComplex_cwiseEqual), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "cwiseNotEqual", VALUEFUNC(_wrap_MatrixComplex_cwiseNotEqual), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "+", VALUEFUNC(_wrap_MatrixComplex___add__), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "-", VALUEFUNC(_wrap_MatrixComplex___sub__), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "-@", VALUEFUNC(_wrap_MatrixComplex___neg__), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "*", VALUEFUNC(_wrap_MatrixComplex___mul__), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "/", VALUEFUNC(_wrap_MatrixComplex___div__), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "==", VALUEFUNC(_wrap_MatrixComplex___eq__), -1);
  rb_define_alias(SwigClassMatrixComplex.klass, "__eq__", "==");
  rb_define_method(SwigClassMatrixComplex.klass, "isApprox", VALUEFUNC(_wrap_MatrixComplex_isApprox), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "isApproxToConstant", VALUEFUNC(_wrap_MatrixComplex_isApproxToConstant), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "isConstant", VALUEFUNC(_wrap_MatrixComplex_isConstant), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "isMuchSmallerThan", VALUEFUNC(_wrap_MatrixComplex_isMuchSmallerThan), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "isOnes", VALUEFUNC(_wrap_MatrixComplex_isOnes), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "isZero", VALUEFUNC(_wrap_MatrixComplex_isZero), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "adjoint", VALUEFUNC(_wrap_MatrixComplex_adjoint), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "col", VALUEFUNC(_wrap_MatrixComplex_col), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "row", VALUEFUNC(_wrap_MatrixComplex_row), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "cols", VALUEFUNC(_wrap_MatrixComplex_cols), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "rows", VALUEFUNC(_wrap_MatrixComplex_rows), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "diagonal", VALUEFUNC(_wrap_MatrixComplex_diagonal), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "inverse", VALUEFUNC(_wrap_MatrixComplex_inverse), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "determinant", VALUEFUNC(_wrap_MatrixComplex_determinant), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "norm", VALUEFUNC(_wrap_MatrixComplex_norm), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "operatorNorm", VALUEFUNC(_wrap_MatrixComplex_operatorNorm), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "sum", VALUEFUNC(_wrap_MatrixComplex_sum), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "prod", VALUEFUNC(_wrap_MatrixComplex_prod), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "normalize", VALUEFUNC(_wrap_MatrixComplex_normalize), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "transpose", VALUEFUNC(_wrap_MatrixComplex_transpose), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "conjugate", VALUEFUNC(_wrap_MatrixComplex_conjugate), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "reverse", VALUEFUNC(_wrap_MatrixComplex_reverse), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "replicate", VALUEFUNC(_wrap_MatrixComplex_replicate), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "eigenvalues", VALUEFUNC(_wrap_MatrixComplex_eigenvalues), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "isDiagonal", VALUEFUNC(_wrap_MatrixComplex_isDiagonal), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "isIdentity", VALUEFUNC(_wrap_MatrixComplex_isIdentity), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "isLowerTriangular", VALUEFUNC(_wrap_MatrixComplex_isLowerTriangular), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "isUpperTriangular", VALUEFUNC(_wrap_MatrixComplex_isUpperTriangular), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "middleCols", VALUEFUNC(_wrap_MatrixComplex_middleCols), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "middleRows", VALUEFUNC(_wrap_MatrixComplex_middleRows), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "lu", VALUEFUNC(_wrap_MatrixComplex_lu), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "ldlt", VALUEFUNC(_wrap_MatrixComplex_ldlt), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "llt", VALUEFUNC(_wrap_MatrixComplex_llt), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "__set_col__", VALUEFUNC(_wrap_MatrixComplex___set_col__), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "__set_row__", VALUEFUNC(_wrap_MatrixComplex___set_row__), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "__mul_n__", VALUEFUNC(_wrap_MatrixComplex___mul_n__), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "to_s", VALUEFUNC(_wrap_MatrixComplex_to_s), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "[]", VALUEFUNC(_wrap_MatrixComplex___getitem__), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "[]=", VALUEFUNC(_wrap_MatrixComplex___setitem__), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "triu", VALUEFUNC(_wrap_MatrixComplex_triu), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "tril", VALUEFUNC(_wrap_MatrixComplex_tril), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "fullPivLu", VALUEFUNC(_wrap_MatrixComplex_fullPivLu), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "fullPivHouseholderQR", VALUEFUNC(_wrap_MatrixComplex_fullPivHouseholderQR), -1);
  rb_define_method(SwigClassMatrixComplex.klass, "svd", VALUEFUNC(_wrap_MatrixComplex_svd), -1);
  SwigClassMatrixComplex.mark = 0;
  SwigClassMatrixComplex.destroy = (void (*)(void *)) free_RubyEigen_MatrixXcd;
  SwigClassMatrixComplex.trackObjects = 0;
  
  SwigClassVectorDouble.klass = rb_define_class_under(mEigen, "VectorDouble", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXd__Scalar_RubyEigen__Dynamic_1_t, (void *) &SwigClassVectorDouble);
  rb_define_alloc_func(SwigClassVectorDouble.klass, _wrap_VectorDouble_allocate);
  rb_define_method(SwigClassVectorDouble.klass, "initialize", VALUEFUNC(_wrap_new_VectorDouble), -1);
  rb_define_method(SwigClassVectorDouble.klass, "real", VALUEFUNC(_wrap_VectorDouble_real), -1);
  rb_define_method(SwigClassVectorDouble.klass, "hasNaN", VALUEFUNC(_wrap_VectorDouble_hasNaN), -1);
  rb_define_method(SwigClassVectorDouble.klass, "setRandom", VALUEFUNC(_wrap_VectorDouble_setRandom), -1);
  rb_define_method(SwigClassVectorDouble.klass, "setConstant", VALUEFUNC(_wrap_VectorDouble_setConstant), -1);
  rb_define_method(SwigClassVectorDouble.klass, "setIdentity", VALUEFUNC(_wrap_VectorDouble_setIdentity), -1);
  rb_define_method(SwigClassVectorDouble.klass, "setOnes", VALUEFUNC(_wrap_VectorDouble_setOnes), -1);
  rb_define_method(SwigClassVectorDouble.klass, "setZero", VALUEFUNC(_wrap_VectorDouble_setZero), -1);
  rb_define_method(SwigClassVectorDouble.klass, "cwiseSqrt", VALUEFUNC(_wrap_VectorDouble_cwiseSqrt), -1);
  rb_define_method(SwigClassVectorDouble.klass, "cwiseInverse", VALUEFUNC(_wrap_VectorDouble_cwiseInverse), -1);
  rb_define_method(SwigClassVectorDouble.klass, "cwiseProduct", VALUEFUNC(_wrap_VectorDouble_cwiseProduct), -1);
  rb_define_method(SwigClassVectorDouble.klass, "cwiseQuotient", VALUEFUNC(_wrap_VectorDouble_cwiseQuotient), -1);
  rb_define_method(SwigClassVectorDouble.klass, "cwiseEqual", VALUEFUNC(_wrap_VectorDouble_cwiseEqual), -1);
  rb_define_method(SwigClassVectorDouble.klass, "cwiseNotEqual", VALUEFUNC(_wrap_VectorDouble_cwiseNotEqual), -1);
  rb_define_method(SwigClassVectorDouble.klass, "+", VALUEFUNC(_wrap_VectorDouble___add__), -1);
  rb_define_method(SwigClassVectorDouble.klass, "-", VALUEFUNC(_wrap_VectorDouble___sub__), -1);
  rb_define_method(SwigClassVectorDouble.klass, "-@", VALUEFUNC(_wrap_VectorDouble___neg__), -1);
  rb_define_method(SwigClassVectorDouble.klass, "*", VALUEFUNC(_wrap_VectorDouble___mul__), -1);
  rb_define_method(SwigClassVectorDouble.klass, "/", VALUEFUNC(_wrap_VectorDouble___div__), -1);
  rb_define_method(SwigClassVectorDouble.klass, "==", VALUEFUNC(_wrap_VectorDouble___eq__), -1);
  rb_define_method(SwigClassVectorDouble.klass, "isApprox", VALUEFUNC(_wrap_VectorDouble_isApprox), -1);
  rb_define_method(SwigClassVectorDouble.klass, "isApproxToConstant", VALUEFUNC(_wrap_VectorDouble_isApproxToConstant), -1);
  rb_define_method(SwigClassVectorDouble.klass, "isConstant", VALUEFUNC(_wrap_VectorDouble_isConstant), -1);
  rb_define_method(SwigClassVectorDouble.klass, "isMuchSmallerThan", VALUEFUNC(_wrap_VectorDouble_isMuchSmallerThan), -1);
  rb_define_method(SwigClassVectorDouble.klass, "isOnes", VALUEFUNC(_wrap_VectorDouble_isOnes), -1);
  rb_define_method(SwigClassVectorDouble.klass, "isZero", VALUEFUNC(_wrap_VectorDouble_isZero), -1);
  rb_define_method(SwigClassVectorDouble.klass, "adjoint", VALUEFUNC(_wrap_VectorDouble_adjoint), -1);
  rb_define_method(SwigClassVectorDouble.klass, "isOrthogonal", VALUEFUNC(_wrap_VectorDouble_isOrthogonal), -1);
  rb_define_method(SwigClassVectorDouble.klass, "squaredNorm", VALUEFUNC(_wrap_VectorDouble_squaredNorm), -1);
  rb_define_method(SwigClassVectorDouble.klass, "stableNorm", VALUEFUNC(_wrap_VectorDouble_stableNorm), -1);
  rb_define_method(SwigClassVectorDouble.klass, "segment", VALUEFUNC(_wrap_VectorDouble_segment), -1);
  rb_define_method(SwigClassVectorDouble.klass, "[]", VALUEFUNC(_wrap_VectorDouble___getitem__), -1);
  rb_define_method(SwigClassVectorDouble.klass, "[]=", VALUEFUNC(_wrap_VectorDouble___setitem__), -1);
  rb_define_method(SwigClassVectorDouble.klass, "to_s", VALUEFUNC(_wrap_VectorDouble_to_s), -1);
  SwigClassVectorDouble.mark = 0;
  SwigClassVectorDouble.destroy = (void (*)(void *)) free_RubyEigen_VectorXd;
  SwigClassVectorDouble.trackObjects = 0;
  
  SwigClassVectorComplex.klass = rb_define_class_under(mEigen, "VectorComplex", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_RubyEigen__MatrixT_RubyEigen__MatrixXcd__Scalar_RubyEigen__Dynamic_1_t, (void *) &SwigClassVectorComplex);
  rb_define_alloc_func(SwigClassVectorComplex.klass, _wrap_VectorComplex_allocate);
  rb_define_method(SwigClassVectorComplex.klass, "initialize", VALUEFUNC(_wrap_new_VectorComplex), -1);
  rb_define_method(SwigClassVectorComplex.klass, "imag", VALUEFUNC(_wrap_VectorComplex_imag), -1);
  rb_define_method(SwigClassVectorComplex.klass, "real", VALUEFUNC(_wrap_VectorComplex_real), -1);
  rb_define_method(SwigClassVectorComplex.klass, "hasNaN", VALUEFUNC(_wrap_VectorComplex_hasNaN), -1);
  rb_define_method(SwigClassVectorComplex.klass, "setRandom", VALUEFUNC(_wrap_VectorComplex_setRandom), -1);
  rb_define_method(SwigClassVectorComplex.klass, "setConstant", VALUEFUNC(_wrap_VectorComplex_setConstant), -1);
  rb_define_method(SwigClassVectorComplex.klass, "setIdentity", VALUEFUNC(_wrap_VectorComplex_setIdentity), -1);
  rb_define_method(SwigClassVectorComplex.klass, "setOnes", VALUEFUNC(_wrap_VectorComplex_setOnes), -1);
  rb_define_method(SwigClassVectorComplex.klass, "setZero", VALUEFUNC(_wrap_VectorComplex_setZero), -1);
  rb_define_method(SwigClassVectorComplex.klass, "cwiseSqrt", VALUEFUNC(_wrap_VectorComplex_cwiseSqrt), -1);
  rb_define_method(SwigClassVectorComplex.klass, "cwiseInverse", VALUEFUNC(_wrap_VectorComplex_cwiseInverse), -1);
  rb_define_method(SwigClassVectorComplex.klass, "cwiseProduct", VALUEFUNC(_wrap_VectorComplex_cwiseProduct), -1);
  rb_define_method(SwigClassVectorComplex.klass, "cwiseQuotient", VALUEFUNC(_wrap_VectorComplex_cwiseQuotient), -1);
  rb_define_method(SwigClassVectorComplex.klass, "cwiseEqual", VALUEFUNC(_wrap_VectorComplex_cwiseEqual), -1);
  rb_define_method(SwigClassVectorComplex.klass, "cwiseNotEqual", VALUEFUNC(_wrap_VectorComplex_cwiseNotEqual), -1);
  rb_define_method(SwigClassVectorComplex.klass, "+", VALUEFUNC(_wrap_VectorComplex___add__), -1);
  rb_define_method(SwigClassVectorComplex.klass, "-", VALUEFUNC(_wrap_VectorComplex___sub__), -1);
  rb_define_method(SwigClassVectorComplex.klass, "-@", VALUEFUNC(_wrap_VectorComplex___neg__), -1);
  rb_define_method(SwigClassVectorComplex.klass, "*", VALUEFUNC(_wrap_VectorComplex___mul__), -1);
  rb_define_method(SwigClassVectorComplex.klass, "/", VALUEFUNC(_wrap_VectorComplex___div__), -1);
  rb_define_method(SwigClassVectorComplex.klass, "==", VALUEFUNC(_wrap_VectorComplex___eq__), -1);
  rb_define_method(SwigClassVectorComplex.klass, "isApprox", VALUEFUNC(_wrap_VectorComplex_isApprox), -1);
  rb_define_method(SwigClassVectorComplex.klass, "isApproxToConstant", VALUEFUNC(_wrap_VectorComplex_isApproxToConstant), -1);
  rb_define_method(SwigClassVectorComplex.klass, "isConstant", VALUEFUNC(_wrap_VectorComplex_isConstant), -1);
  rb_define_method(SwigClassVectorComplex.klass, "isMuchSmallerThan", VALUEFUNC(_wrap_VectorComplex_isMuchSmallerThan), -1);
  rb_define_method(SwigClassVectorComplex.klass, "isOnes", VALUEFUNC(_wrap_VectorComplex_isOnes), -1);
  rb_define_method(SwigClassVectorComplex.klass, "isZero", VALUEFUNC(_wrap_VectorComplex_isZero), -1);
  rb_define_method(SwigClassVectorComplex.klass, "adjoint", VALUEFUNC(_wrap_VectorComplex_adjoint), -1);
  rb_define_method(SwigClassVectorComplex.klass, "isOrthogonal", VALUEFUNC(_wrap_VectorComplex_isOrthogonal), -1);
  rb_define_method(SwigClassVectorComplex.klass, "squaredNorm", VALUEFUNC(_wrap_VectorComplex_squaredNorm), -1);
  rb_define_method(SwigClassVectorComplex.klass, "stableNorm", VALUEFUNC(_wrap_VectorComplex_stableNorm), -1);
  rb_define_method(SwigClassVectorComplex.klass, "segment", VALUEFUNC(_wrap_VectorComplex_segment), -1);
  rb_define_method(SwigClassVectorComplex.klass, "[]", VALUEFUNC(_wrap_VectorComplex___getitem__), -1);
  rb_define_method(SwigClassVectorComplex.klass, "[]=", VALUEFUNC(_wrap_VectorComplex___setitem__), -1);
  rb_define_method(SwigClassVectorComplex.klass, "to_s", VALUEFUNC(_wrap_VectorComplex_to_s), -1);
  SwigClassVectorComplex.mark = 0;
  SwigClassVectorComplex.destroy = (void (*)(void *)) free_RubyEigen_VectorXcd;
  SwigClassVectorComplex.trackObjects = 0;
  
  SwigClassMatrixBool.klass = rb_define_class_under(mEigen, "MatrixBool", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_MatrixT_bool_Dynamic_Dynamic_t, (void *) &SwigClassMatrixBool);
  rb_define_alloc_func(SwigClassMatrixBool.klass, _wrap_MatrixBool_allocate);
  rb_define_method(SwigClassMatrixBool.klass, "initialize", VALUEFUNC(_wrap_new_MatrixBool), -1);
  rb_define_method(SwigClassMatrixBool.klass, "all", VALUEFUNC(_wrap_MatrixBool_all), -1);
  rb_define_method(SwigClassMatrixBool.klass, "any", VALUEFUNC(_wrap_MatrixBool_any), -1);
  rb_define_method(SwigClassMatrixBool.klass, "count", VALUEFUNC(_wrap_MatrixBool_count), -1);
  rb_define_method(SwigClassMatrixBool.klass, "select", VALUEFUNC(_wrap_MatrixBool_select), -1);
  SwigClassMatrixBool.mark = 0;
  SwigClassMatrixBool.destroy = (void (*)(void *)) free_RubyEigen_MatrixBool;
  SwigClassMatrixBool.trackObjects = 0;
  
  SwigClassFullPivLUDouble.klass = rb_define_class_under(mEigen, "FullPivLUDouble", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_RubyEigen__FullPivLUT_RubyEigen__MatrixXd_t, (void *) &SwigClassFullPivLUDouble);
  rb_define_alloc_func(SwigClassFullPivLUDouble.klass, _wrap_FullPivLUDouble_allocate);
  rb_define_method(SwigClassFullPivLUDouble.klass, "initialize", VALUEFUNC(_wrap_new_FullPivLUDouble), -1);
  rb_define_method(SwigClassFullPivLUDouble.klass, "permutationP", VALUEFUNC(_wrap_FullPivLUDouble_permutationP), -1);
  rb_define_alias(SwigClassFullPivLUDouble.klass, "p", "permutationP");
  rb_define_method(SwigClassFullPivLUDouble.klass, "permutationQ", VALUEFUNC(_wrap_FullPivLUDouble_permutationQ), -1);
  rb_define_alias(SwigClassFullPivLUDouble.klass, "q", "permutationQ");
  rb_define_method(SwigClassFullPivLUDouble.klass, "solve", VALUEFUNC(_wrap_FullPivLUDouble_solve), -1);
  rb_define_method(SwigClassFullPivLUDouble.klass, "u", VALUEFUNC(_wrap_FullPivLUDouble_u), -1);
  rb_define_method(SwigClassFullPivLUDouble.klass, "l", VALUEFUNC(_wrap_FullPivLUDouble_l), -1);
  SwigClassFullPivLUDouble.mark = 0;
  SwigClassFullPivLUDouble.destroy = (void (*)(void *)) free_RubyEigen_FullPivLU_Sl_RubyEigen_MatrixXd_Sg_;
  SwigClassFullPivLUDouble.trackObjects = 0;
  
  SwigClassFullPivLUComplex.klass = rb_define_class_under(mEigen, "FullPivLUComplex", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_RubyEigen__FullPivLUT_RubyEigen__MatrixXcd_t, (void *) &SwigClassFullPivLUComplex);
  rb_define_alloc_func(SwigClassFullPivLUComplex.klass, _wrap_FullPivLUComplex_allocate);
  rb_define_method(SwigClassFullPivLUComplex.klass, "initialize", VALUEFUNC(_wrap_new_FullPivLUComplex), -1);
  rb_define_method(SwigClassFullPivLUComplex.klass, "permutationP", VALUEFUNC(_wrap_FullPivLUComplex_permutationP), -1);
  rb_define_alias(SwigClassFullPivLUComplex.klass, "p", "permutationP");
  rb_define_method(SwigClassFullPivLUComplex.klass, "permutationQ", VALUEFUNC(_wrap_FullPivLUComplex_permutationQ), -1);
  rb_define_alias(SwigClassFullPivLUComplex.klass, "q", "permutationQ");
  rb_define_method(SwigClassFullPivLUComplex.klass, "solve", VALUEFUNC(_wrap_FullPivLUComplex_solve), -1);
  rb_define_method(SwigClassFullPivLUComplex.klass, "u", VALUEFUNC(_wrap_FullPivLUComplex_u), -1);
  rb_define_method(SwigClassFullPivLUComplex.klass, "l", VALUEFUNC(_wrap_FullPivLUComplex_l), -1);
  SwigClassFullPivLUComplex.mark = 0;
  SwigClassFullPivLUComplex.destroy = (void (*)(void *)) free_RubyEigen_FullPivLU_Sl_RubyEigen_MatrixXcd_Sg_;
  SwigClassFullPivLUComplex.trackObjects = 0;
  
  SwigClassPartialPivLUDouble.klass = rb_define_class_under(mEigen, "PartialPivLUDouble", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_RubyEigen__PartialPivLUT_RubyEigen__MatrixXd_t, (void *) &SwigClassPartialPivLUDouble);
  rb_define_alloc_func(SwigClassPartialPivLUDouble.klass, _wrap_PartialPivLUDouble_allocate);
  rb_define_method(SwigClassPartialPivLUDouble.klass, "initialize", VALUEFUNC(_wrap_new_PartialPivLUDouble), -1);
  SwigClassPartialPivLUDouble.mark = 0;
  SwigClassPartialPivLUDouble.destroy = (void (*)(void *)) free_RubyEigen_PartialPivLU_Sl_RubyEigen_MatrixXd_Sg_;
  SwigClassPartialPivLUDouble.trackObjects = 0;
  
  SwigClassPartialPivLUComplex.klass = rb_define_class_under(mEigen, "PartialPivLUComplex", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_RubyEigen__PartialPivLUT_RubyEigen__MatrixXcd_t, (void *) &SwigClassPartialPivLUComplex);
  rb_define_alloc_func(SwigClassPartialPivLUComplex.klass, _wrap_PartialPivLUComplex_allocate);
  rb_define_method(SwigClassPartialPivLUComplex.klass, "initialize", VALUEFUNC(_wrap_new_PartialPivLUComplex), -1);
  SwigClassPartialPivLUComplex.mark = 0;
  SwigClassPartialPivLUComplex.destroy = (void (*)(void *)) free_RubyEigen_PartialPivLU_Sl_RubyEigen_MatrixXcd_Sg_;
  SwigClassPartialPivLUComplex.trackObjects = 0;
  
  SwigClassFullPivHouseholderQRDouble.klass = rb_define_class_under(mEigen, "FullPivHouseholderQRDouble", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_RubyEigen__FullPivHouseholderQRT_RubyEigen__MatrixXd_t, (void *) &SwigClassFullPivHouseholderQRDouble);
  rb_define_alloc_func(SwigClassFullPivHouseholderQRDouble.klass, _wrap_FullPivHouseholderQRDouble_allocate);
  rb_define_method(SwigClassFullPivHouseholderQRDouble.klass, "initialize", VALUEFUNC(_wrap_new_FullPivHouseholderQRDouble), -1);
  rb_define_method(SwigClassFullPivHouseholderQRDouble.klass, "colsPermutation", VALUEFUNC(_wrap_FullPivHouseholderQRDouble_colsPermutation), -1);
  rb_define_alias(SwigClassFullPivHouseholderQRDouble.klass, "p", "colsPermutation");
  rb_define_method(SwigClassFullPivHouseholderQRDouble.klass, "matrixQ", VALUEFUNC(_wrap_FullPivHouseholderQRDouble_matrixQ), -1);
  rb_define_alias(SwigClassFullPivHouseholderQRDouble.klass, "q", "matrixQ");
  rb_define_method(SwigClassFullPivHouseholderQRDouble.klass, "r", VALUEFUNC(_wrap_FullPivHouseholderQRDouble_r), -1);
  SwigClassFullPivHouseholderQRDouble.mark = 0;
  SwigClassFullPivHouseholderQRDouble.destroy = (void (*)(void *)) free_RubyEigen_FullPivHouseholderQR_Sl_RubyEigen_MatrixXd_Sg_;
  SwigClassFullPivHouseholderQRDouble.trackObjects = 0;
  
  SwigClassFullPivHouseholderQRComplex.klass = rb_define_class_under(mEigen, "FullPivHouseholderQRComplex", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_RubyEigen__FullPivHouseholderQRT_RubyEigen__MatrixXcd_t, (void *) &SwigClassFullPivHouseholderQRComplex);
  rb_define_alloc_func(SwigClassFullPivHouseholderQRComplex.klass, _wrap_FullPivHouseholderQRComplex_allocate);
  rb_define_method(SwigClassFullPivHouseholderQRComplex.klass, "initialize", VALUEFUNC(_wrap_new_FullPivHouseholderQRComplex), -1);
  rb_define_method(SwigClassFullPivHouseholderQRComplex.klass, "colsPermutation", VALUEFUNC(_wrap_FullPivHouseholderQRComplex_colsPermutation), -1);
  rb_define_alias(SwigClassFullPivHouseholderQRComplex.klass, "p", "colsPermutation");
  rb_define_method(SwigClassFullPivHouseholderQRComplex.klass, "matrixQ", VALUEFUNC(_wrap_FullPivHouseholderQRComplex_matrixQ), -1);
  rb_define_alias(SwigClassFullPivHouseholderQRComplex.klass, "q", "matrixQ");
  rb_define_method(SwigClassFullPivHouseholderQRComplex.klass, "r", VALUEFUNC(_wrap_FullPivHouseholderQRComplex_r), -1);
  SwigClassFullPivHouseholderQRComplex.mark = 0;
  SwigClassFullPivHouseholderQRComplex.destroy = (void (*)(void *)) free_RubyEigen_FullPivHouseholderQR_Sl_RubyEigen_MatrixXcd_Sg_;
  SwigClassFullPivHouseholderQRComplex.trackObjects = 0;
  
  SwigClassJacobiSVDDouble.klass = rb_define_class_under(mEigen, "JacobiSVDDouble", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_RubyEigen__JacobiSVDT_RubyEigen__MatrixXd_t, (void *) &SwigClassJacobiSVDDouble);
  rb_define_alloc_func(SwigClassJacobiSVDDouble.klass, _wrap_JacobiSVDDouble_allocate);
  rb_define_method(SwigClassJacobiSVDDouble.klass, "initialize", VALUEFUNC(_wrap_new_JacobiSVDDouble), -1);
  rb_define_method(SwigClassJacobiSVDDouble.klass, "matrixU", VALUEFUNC(_wrap_JacobiSVDDouble_matrixU), -1);
  rb_define_method(SwigClassJacobiSVDDouble.klass, "matrixV", VALUEFUNC(_wrap_JacobiSVDDouble_matrixV), -1);
  rb_define_method(SwigClassJacobiSVDDouble.klass, "singularValues", VALUEFUNC(_wrap_JacobiSVDDouble_singularValues), -1);
  rb_define_method(SwigClassJacobiSVDDouble.klass, "solve", VALUEFUNC(_wrap_JacobiSVDDouble_solve), -1);
  SwigClassJacobiSVDDouble.mark = 0;
  SwigClassJacobiSVDDouble.destroy = (void (*)(void *)) free_RubyEigen_JacobiSVD_Sl_RubyEigen_MatrixXd_Sg_;
  SwigClassJacobiSVDDouble.trackObjects = 0;
  
  SwigClassJacobiSVDComplex.klass = rb_define_class_under(mEigen, "JacobiSVDComplex", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_RubyEigen__JacobiSVDT_RubyEigen__MatrixXcd_t, (void *) &SwigClassJacobiSVDComplex);
  rb_define_alloc_func(SwigClassJacobiSVDComplex.klass, _wrap_JacobiSVDComplex_allocate);
  rb_define_method(SwigClassJacobiSVDComplex.klass, "initialize", VALUEFUNC(_wrap_new_JacobiSVDComplex), -1);
  rb_define_method(SwigClassJacobiSVDComplex.klass, "matrixU", VALUEFUNC(_wrap_JacobiSVDComplex_matrixU), -1);
  rb_define_method(SwigClassJacobiSVDComplex.klass, "matrixV", VALUEFUNC(_wrap_JacobiSVDComplex_matrixV), -1);
  rb_define_method(SwigClassJacobiSVDComplex.klass, "singularValues", VALUEFUNC(_wrap_JacobiSVDComplex_singularValues), -1);
  rb_define_method(SwigClassJacobiSVDComplex.klass, "solve", VALUEFUNC(_wrap_JacobiSVDComplex_solve), -1);
  SwigClassJacobiSVDComplex.mark = 0;
  SwigClassJacobiSVDComplex.destroy = (void (*)(void *)) free_RubyEigen_JacobiSVD_Sl_RubyEigen_MatrixXcd_Sg_;
  SwigClassJacobiSVDComplex.trackObjects = 0;
  
  SwigClassLDLTDouble.klass = rb_define_class_under(mEigen, "LDLTDouble", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_RubyEigen__LDLTT_RubyEigen__MatrixXd_t, (void *) &SwigClassLDLTDouble);
  rb_define_alloc_func(SwigClassLDLTDouble.klass, _wrap_LDLTDouble_allocate);
  rb_define_method(SwigClassLDLTDouble.klass, "initialize", VALUEFUNC(_wrap_new_LDLTDouble), -1);
  rb_define_method(SwigClassLDLTDouble.klass, "matrixL", VALUEFUNC(_wrap_LDLTDouble_matrixL), -1);
  rb_define_method(SwigClassLDLTDouble.klass, "vectorD", VALUEFUNC(_wrap_LDLTDouble_vectorD), -1);
  SwigClassLDLTDouble.mark = 0;
  SwigClassLDLTDouble.destroy = (void (*)(void *)) free_RubyEigen_LDLT_Sl_RubyEigen_MatrixXd_Sg_;
  SwigClassLDLTDouble.trackObjects = 0;
  
  SwigClassLDLTComplex.klass = rb_define_class_under(mEigen, "LDLTComplex", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_RubyEigen__LDLTT_RubyEigen__MatrixXcd_t, (void *) &SwigClassLDLTComplex);
  rb_define_alloc_func(SwigClassLDLTComplex.klass, _wrap_LDLTComplex_allocate);
  rb_define_method(SwigClassLDLTComplex.klass, "initialize", VALUEFUNC(_wrap_new_LDLTComplex), -1);
  rb_define_method(SwigClassLDLTComplex.klass, "matrixL", VALUEFUNC(_wrap_LDLTComplex_matrixL), -1);
  rb_define_method(SwigClassLDLTComplex.klass, "vectorD", VALUEFUNC(_wrap_LDLTComplex_vectorD), -1);
  SwigClassLDLTComplex.mark = 0;
  SwigClassLDLTComplex.destroy = (void (*)(void *)) free_RubyEigen_LDLT_Sl_RubyEigen_MatrixXcd_Sg_;
  SwigClassLDLTComplex.trackObjects = 0;
  
  SwigClassLLTDouble.klass = rb_define_class_under(mEigen, "LLTDouble", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_RubyEigen__LLTT_RubyEigen__MatrixXd_t, (void *) &SwigClassLLTDouble);
  rb_define_alloc_func(SwigClassLLTDouble.klass, _wrap_LLTDouble_allocate);
  rb_define_method(SwigClassLLTDouble.klass, "initialize", VALUEFUNC(_wrap_new_LLTDouble), -1);
  rb_define_method(SwigClassLLTDouble.klass, "matrixL", VALUEFUNC(_wrap_LLTDouble_matrixL), -1);
  SwigClassLLTDouble.mark = 0;
  SwigClassLLTDouble.destroy = (void (*)(void *)) free_RubyEigen_LLT_Sl_RubyEigen_MatrixXd_Sg_;
  SwigClassLLTDouble.trackObjects = 0;
  
  SwigClassLLTComplex.klass = rb_define_class_under(mEigen, "LLTComplex", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_RubyEigen__LLTT_RubyEigen__MatrixXcd_t, (void *) &SwigClassLLTComplex);
  rb_define_alloc_func(SwigClassLLTComplex.klass, _wrap_LLTComplex_allocate);
  rb_define_method(SwigClassLLTComplex.klass, "initialize", VALUEFUNC(_wrap_new_LLTComplex), -1);
  rb_define_method(SwigClassLLTComplex.klass, "matrixL", VALUEFUNC(_wrap_LLTComplex_matrixL), -1);
  SwigClassLLTComplex.mark = 0;
  SwigClassLLTComplex.destroy = (void (*)(void *)) free_RubyEigen_LLT_Sl_RubyEigen_MatrixXcd_Sg_;
  SwigClassLLTComplex.trackObjects = 0;
  
  SwigClassMatrixDoubleCWise.klass = rb_define_class_under(mEigen, "MatrixDoubleCWise", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_RubyEigen__ArrayXXd, (void *) &SwigClassMatrixDoubleCWise);
  rb_define_alloc_func(SwigClassMatrixDoubleCWise.klass, _wrap_MatrixDoubleCWise_allocate);
  rb_define_method(SwigClassMatrixDoubleCWise.klass, "initialize", VALUEFUNC(_wrap_new_MatrixDoubleCWise), -1);
  rb_define_method(SwigClassMatrixDoubleCWise.klass, "setOnes", VALUEFUNC(_wrap_MatrixDoubleCWise_setOnes), -1);
  rb_define_method(SwigClassMatrixDoubleCWise.klass, "setRandom", VALUEFUNC(_wrap_MatrixDoubleCWise_setRandom), -1);
  rb_define_method(SwigClassMatrixDoubleCWise.klass, "setZero", VALUEFUNC(_wrap_MatrixDoubleCWise_setZero), -1);
  rb_define_method(SwigClassMatrixDoubleCWise.klass, "abs", VALUEFUNC(_wrap_MatrixDoubleCWise_abs), -1);
  rb_define_method(SwigClassMatrixDoubleCWise.klass, "abs2", VALUEFUNC(_wrap_MatrixDoubleCWise_abs2), -1);
  rb_define_method(SwigClassMatrixDoubleCWise.klass, "square", VALUEFUNC(_wrap_MatrixDoubleCWise_square), -1);
  rb_define_method(SwigClassMatrixDoubleCWise.klass, "cube", VALUEFUNC(_wrap_MatrixDoubleCWise_cube), -1);
  rb_define_method(SwigClassMatrixDoubleCWise.klass, "sin", VALUEFUNC(_wrap_MatrixDoubleCWise_sin), -1);
  rb_define_method(SwigClassMatrixDoubleCWise.klass, "cos", VALUEFUNC(_wrap_MatrixDoubleCWise_cos), -1);
  rb_define_method(SwigClassMatrixDoubleCWise.klass, "tan", VALUEFUNC(_wrap_MatrixDoubleCWise_tan), -1);
  rb_define_method(SwigClassMatrixDoubleCWise.klass, "asin", VALUEFUNC(_wrap_MatrixDoubleCWise_asin), -1);
  rb_define_method(SwigClassMatrixDoubleCWise.klass, "acos", VALUEFUNC(_wrap_MatrixDoubleCWise_acos), -1);
  rb_define_method(SwigClassMatrixDoubleCWise.klass, "log", VALUEFUNC(_wrap_MatrixDoubleCWise_log), -1);
  rb_define_method(SwigClassMatrixDoubleCWise.klass, "exp", VALUEFUNC(_wrap_MatrixDoubleCWise_exp), -1);
  rb_define_method(SwigClassMatrixDoubleCWise.klass, "sqrt", VALUEFUNC(_wrap_MatrixDoubleCWise_sqrt), -1);
  rb_define_method(SwigClassMatrixDoubleCWise.klass, "pow", VALUEFUNC(_wrap_MatrixDoubleCWise_pow), -1);
  rb_define_method(SwigClassMatrixDoubleCWise.klass, "==", VALUEFUNC(_wrap_MatrixDoubleCWise___eq__), -1);
  rb_define_method(SwigClassMatrixDoubleCWise.klass, "max", VALUEFUNC(_wrap_MatrixDoubleCWise_max), -1);
  rb_define_method(SwigClassMatrixDoubleCWise.klass, "min", VALUEFUNC(_wrap_MatrixDoubleCWise_min), -1);
  rb_define_method(SwigClassMatrixDoubleCWise.klass, "+", VALUEFUNC(_wrap_MatrixDoubleCWise___add__), -1);
  rb_define_method(SwigClassMatrixDoubleCWise.klass, "-", VALUEFUNC(_wrap_MatrixDoubleCWise___sub__), -1);
  rb_define_method(SwigClassMatrixDoubleCWise.klass, "*", VALUEFUNC(_wrap_MatrixDoubleCWise___mul__), -1);
  rb_define_method(SwigClassMatrixDoubleCWise.klass, "/", VALUEFUNC(_wrap_MatrixDoubleCWise___div__), -1);
  rb_define_method(SwigClassMatrixDoubleCWise.klass, "-@", VALUEFUNC(_wrap_MatrixDoubleCWise___neg__), -1);
  rb_define_method(SwigClassMatrixDoubleCWise.klass, "isApprox", VALUEFUNC(_wrap_MatrixDoubleCWise_isApprox), -1);
  rb_define_method(SwigClassMatrixDoubleCWise.klass, "isApproxToConstant", VALUEFUNC(_wrap_MatrixDoubleCWise_isApproxToConstant), -1);
  rb_define_method(SwigClassMatrixDoubleCWise.klass, "isMuchSmallerThan", VALUEFUNC(_wrap_MatrixDoubleCWise_isMuchSmallerThan), -1);
  rb_define_method(SwigClassMatrixDoubleCWise.klass, "isOnes", VALUEFUNC(_wrap_MatrixDoubleCWise_isOnes), -1);
  rb_define_method(SwigClassMatrixDoubleCWise.klass, "isZero", VALUEFUNC(_wrap_MatrixDoubleCWise_isZero), -1);
  rb_define_method(SwigClassMatrixDoubleCWise.klass, "hasNaN", VALUEFUNC(_wrap_MatrixDoubleCWise_hasNaN), -1);
  rb_define_method(SwigClassMatrixDoubleCWise.klass, "maxCoeff", VALUEFUNC(_wrap_MatrixDoubleCWise_maxCoeff), -1);
  rb_define_method(SwigClassMatrixDoubleCWise.klass, "minCoeff", VALUEFUNC(_wrap_MatrixDoubleCWise_minCoeff), -1);
  rb_define_method(SwigClassMatrixDoubleCWise.klass, "[]", VALUEFUNC(_wrap_MatrixDoubleCWise___getitem__), -1);
  rb_define_method(SwigClassMatrixDoubleCWise.klass, "[]=", VALUEFUNC(_wrap_MatrixDoubleCWise___setitem__), -1);
  SwigClassMatrixDoubleCWise.mark = 0;
  SwigClassMatrixDoubleCWise.destroy = (void (*)(void *)) free_RubyEigen_ArrayXXd;
  SwigClassMatrixDoubleCWise.trackObjects = 0;
  
  SwigClassVectorDoubleCWise.klass = rb_define_class_under(mEigen, "VectorDoubleCWise", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_RubyEigen__ArrayXd, (void *) &SwigClassVectorDoubleCWise);
  rb_define_alloc_func(SwigClassVectorDoubleCWise.klass, _wrap_VectorDoubleCWise_allocate);
  rb_define_method(SwigClassVectorDoubleCWise.klass, "initialize", VALUEFUNC(_wrap_new_VectorDoubleCWise), -1);
  rb_define_method(SwigClassVectorDoubleCWise.klass, "setOnes", VALUEFUNC(_wrap_VectorDoubleCWise_setOnes), -1);
  rb_define_method(SwigClassVectorDoubleCWise.klass, "setRandom", VALUEFUNC(_wrap_VectorDoubleCWise_setRandom), -1);
  rb_define_method(SwigClassVectorDoubleCWise.klass, "setZero", VALUEFUNC(_wrap_VectorDoubleCWise_setZero), -1);
  rb_define_method(SwigClassVectorDoubleCWise.klass, "abs", VALUEFUNC(_wrap_VectorDoubleCWise_abs), -1);
  rb_define_method(SwigClassVectorDoubleCWise.klass, "abs2", VALUEFUNC(_wrap_VectorDoubleCWise_abs2), -1);
  rb_define_method(SwigClassVectorDoubleCWise.klass, "square", VALUEFUNC(_wrap_VectorDoubleCWise_square), -1);
  rb_define_method(SwigClassVectorDoubleCWise.klass, "cube", VALUEFUNC(_wrap_VectorDoubleCWise_cube), -1);
  rb_define_method(SwigClassVectorDoubleCWise.klass, "sin", VALUEFUNC(_wrap_VectorDoubleCWise_sin), -1);
  rb_define_method(SwigClassVectorDoubleCWise.klass, "cos", VALUEFUNC(_wrap_VectorDoubleCWise_cos), -1);
  rb_define_method(SwigClassVectorDoubleCWise.klass, "tan", VALUEFUNC(_wrap_VectorDoubleCWise_tan), -1);
  rb_define_method(SwigClassVectorDoubleCWise.klass, "asin", VALUEFUNC(_wrap_VectorDoubleCWise_asin), -1);
  rb_define_method(SwigClassVectorDoubleCWise.klass, "acos", VALUEFUNC(_wrap_VectorDoubleCWise_acos), -1);
  rb_define_method(SwigClassVectorDoubleCWise.klass, "log", VALUEFUNC(_wrap_VectorDoubleCWise_log), -1);
  rb_define_method(SwigClassVectorDoubleCWise.klass, "exp", VALUEFUNC(_wrap_VectorDoubleCWise_exp), -1);
  rb_define_method(SwigClassVectorDoubleCWise.klass, "sqrt", VALUEFUNC(_wrap_VectorDoubleCWise_sqrt), -1);
  rb_define_method(SwigClassVectorDoubleCWise.klass, "pow", VALUEFUNC(_wrap_VectorDoubleCWise_pow), -1);
  rb_define_method(SwigClassVectorDoubleCWise.klass, "==", VALUEFUNC(_wrap_VectorDoubleCWise___eq__), -1);
  rb_define_method(SwigClassVectorDoubleCWise.klass, "max", VALUEFUNC(_wrap_VectorDoubleCWise_max), -1);
  rb_define_method(SwigClassVectorDoubleCWise.klass, "min", VALUEFUNC(_wrap_VectorDoubleCWise_min), -1);
  rb_define_method(SwigClassVectorDoubleCWise.klass, "+", VALUEFUNC(_wrap_VectorDoubleCWise___add__), -1);
  rb_define_method(SwigClassVectorDoubleCWise.klass, "-", VALUEFUNC(_wrap_VectorDoubleCWise___sub__), -1);
  rb_define_method(SwigClassVectorDoubleCWise.klass, "*", VALUEFUNC(_wrap_VectorDoubleCWise___mul__), -1);
  rb_define_method(SwigClassVectorDoubleCWise.klass, "/", VALUEFUNC(_wrap_VectorDoubleCWise___div__), -1);
  rb_define_method(SwigClassVectorDoubleCWise.klass, "-@", VALUEFUNC(_wrap_VectorDoubleCWise___neg__), -1);
  rb_define_method(SwigClassVectorDoubleCWise.klass, "isApprox", VALUEFUNC(_wrap_VectorDoubleCWise_isApprox), -1);
  rb_define_method(SwigClassVectorDoubleCWise.klass, "isApproxToConstant", VALUEFUNC(_wrap_VectorDoubleCWise_isApproxToConstant), -1);
  rb_define_method(SwigClassVectorDoubleCWise.klass, "isMuchSmallerThan", VALUEFUNC(_wrap_VectorDoubleCWise_isMuchSmallerThan), -1);
  rb_define_method(SwigClassVectorDoubleCWise.klass, "isOnes", VALUEFUNC(_wrap_VectorDoubleCWise_isOnes), -1);
  rb_define_method(SwigClassVectorDoubleCWise.klass, "isZero", VALUEFUNC(_wrap_VectorDoubleCWise_isZero), -1);
  rb_define_method(SwigClassVectorDoubleCWise.klass, "hasNaN", VALUEFUNC(_wrap_VectorDoubleCWise_hasNaN), -1);
  rb_define_method(SwigClassVectorDoubleCWise.klass, "maxCoeff", VALUEFUNC(_wrap_VectorDoubleCWise_maxCoeff), -1);
  rb_define_method(SwigClassVectorDoubleCWise.klass, "minCoeff", VALUEFUNC(_wrap_VectorDoubleCWise_minCoeff), -1);
  rb_define_method(SwigClassVectorDoubleCWise.klass, "[]", VALUEFUNC(_wrap_VectorDoubleCWise___getitem__), -1);
  rb_define_method(SwigClassVectorDoubleCWise.klass, "[]=", VALUEFUNC(_wrap_VectorDoubleCWise___setitem__), -1);
  SwigClassVectorDoubleCWise.mark = 0;
  SwigClassVectorDoubleCWise.destroy = (void (*)(void *)) free_RubyEigen_ArrayXd;
  SwigClassVectorDoubleCWise.trackObjects = 0;
  
  SwigClassArrayBool.klass = rb_define_class_under(mEigen, "ArrayBool", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_ArrayT_bool_Dynamic_Dynamic_t, (void *) &SwigClassArrayBool);
  rb_define_alloc_func(SwigClassArrayBool.klass, _wrap_ArrayBool_allocate);
  rb_define_method(SwigClassArrayBool.klass, "initialize", VALUEFUNC(_wrap_new_ArrayBool), -1);
  rb_define_method(SwigClassArrayBool.klass, "all", VALUEFUNC(_wrap_ArrayBool_all), -1);
  rb_define_method(SwigClassArrayBool.klass, "any", VALUEFUNC(_wrap_ArrayBool_any), -1);
  rb_define_method(SwigClassArrayBool.klass, "+", VALUEFUNC(_wrap_ArrayBool___add__), -1);
  rb_define_method(SwigClassArrayBool.klass, "select", VALUEFUNC(_wrap_ArrayBool_select), -1);
  SwigClassArrayBool.mark = 0;
  SwigClassArrayBool.destroy = (void (*)(void *)) free_RubyEigen_ArrayBool;
  SwigClassArrayBool.trackObjects = 0;
}

